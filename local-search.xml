<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Raft（二）：Leader选举</title>
    <link href="/2022/07/25/Raft-2/"/>
    <url>/2022/07/25/Raft-2/</url>
    
    <content type="html"><![CDATA[<h2 id="脑裂"><a href="#脑裂" class="headerlink" title="脑裂"></a>脑裂</h2><p>在多副本的分布式系统中，通常会存在一个 Primary 节点，由它来决定整个系统的决策，这样可以简化一致性的实现，因为 Priamry 只需要强迫其他节点与它保持一致即可。</p><p>但是 Primary 节点本身会发生故障，之后我们需要选出一个新的 Primary 节点，这样就可能会面临<strong>脑裂</strong>的场景。</p><p>现在我们以 VMware FT 为例，来说明为什么会出现脑裂。假设在一个网络中有两台服务器 S1 和 S2 ，这两台服务器是 Test-and-Set 服务的副本，这个网络中还有两个客户端 C1 和 C2 ，现在它们需要通过 Test-and-Set 服务确定谁是 Primary。</p><img src="/2022/07/25/Raft-2/Raft-%E5%9B%BE1.png" class=""><p>在正常情况下，Test-and-Set 服务中的数据记录从0开始。一个客户端会向两台服务器发送 Test-and-Set 指令，这个指令会把两台服务器中的数据记录设置为1，之后返回 Success 响应。如果服务器中的数据记录已经被设置，那么另一个客户端发送 Test-and-Set 指令后，则会收到一个 Fail 响应。因此，其本质上就是一个互斥锁服务。</p><p>我们希望 Test-and-Set 具有容错特性，当一个客户端只能与一个 Test-and-Set 服务器通信时，也可以正常工作。例如 C1 可以和 S1 通信，但不能和 S2 通信，C1 也可以正常工作。反之，如果 C1 必须和 S2 通信，而恰好 C1 和 S2 之间的网络出现了故障，这就导致 C1 为了等待 S2 的响应将永远无法继续工作，这就失去了多副本的意义。</p><p>因此为了具备容错特性，我们允许一个客户端只与它能连通的服务器交互。在这种情况下，如果发生了网络分区，例如 C1 只能与 S1 通信，C2 只能与 S2 通信，则会导致脑裂：</p><img src="/2022/07/25/Raft-2/Raft-%E5%9B%BE2.png" class=""><p>C1 发送 Test-and-Set 指令给 S1，S1将自己的数据记录设置为1，并返回 Success 给 C1。同时，C2 发送 Test-and-Set 指令给 S2，S2 将自己的数据记录为1，并返回 Success 给 C2。因此，C1 和 C2 都获得了 Success 响应，C1 和 C2 都会认为自己是 Primary，而不需要与另一个虚拟机进行协调，从而进入错误的场景。</p><p>因此，在这种有两个副本的服务中，我们似乎只有两种选择：要么等待两个服务器响应，那么这个时候就没有容错能力；要么只等待一个服务器响应，那么就会进入错误的场景，而这种错误的场景，通常被称为脑裂。</p><p>在上世纪八十年代，对于脑裂并没有什么好的解决办法。但是，当时又的确有多副本系统的需要，为了解决脑裂问题，有两种技术：</p><ul><li><p>构建不可能出现故障的网络。</p></li><li><p>人工解决问题，当一个服务器出现了故障，让运维人员去检查这台服务器是否真的关机了，还是出现了网络方面的故障。</p></li></ul><h2 id="过半投票"><a href="#过半投票" class="headerlink" title="过半投票"></a>过半投票</h2><p>当网络出现故障，将网络分割成两半，网络的两边独自运行，且不能访问对方，这通常被称为网络分区。而网络分区可能会导致进入上面提到的脑裂场景，从而导致多副本服务出现不一致。</p><p>随着技术的发展，人们发现即使出现分区，也能正确地实现能够自动完成故障切换的系统。在构建能自动恢复，同时又避免脑裂的多副本系统时，关键点在于<strong>过半投票</strong>。</p><p>首先服务器的数量必须是奇数，那么当出现网络分区时，必然只可能最多有一个分区拥有半数以上的服务器。我们可以规定，如果要完成任何操作，必须要凑够半数以上的服务器的投票。这样，在任何情况下只可能有一个分区能够完成操作，这也就避免了脑裂的场景。</p><p>在这种过半投票的思想的支持下，在上世纪九十年代，有两个系统被同时提出：Paxos 和 ViewStamped Replication，这两个系统都使用过半购票的原理来避免脑裂的问题。</p><h2 id="Raft-领导人选举"><a href="#Raft-领导人选举" class="headerlink" title="Raft 领导人选举"></a>Raft 领导人选举</h2><p>Raft 也应用了过半投票的思想来解决脑裂问题。Raft 会通过过半投票选举出一个领导人，然后给予他全部的管理复制日志的责任来实现一致性。</p><p>领导人从客户端接收日志条目，把日志条目复制到其他服务器上，并告诉其他的服务器什么时候可以安全地将日志条目应用到他们的状态机中。拥有一个领导人大大简化了对复制日志的管理。例如，领导人可以决定新的日志条目需要放在日志中的什么位置而不需要和其他服务器商议，并且数据都从领导人流向其他服务器。一个领导人可能会发生故障，或者和其他服务器失去连接，在这种情况下一个新的领导人会被选举出来。</p><p>具体的领导人选举算法，在 Raft 论文中说的非常详细：<a href="https://raft.github.io/raft.pdf">Raft paper</a>（第5节和5.2节）。</p><h2 id="Lab-2A-中遇到的问题"><a href="#Lab-2A-中遇到的问题" class="headerlink" title="Lab 2A 中遇到的问题"></a>Lab 2A 中遇到的问题</h2><p>最后说一说，在实现 6.824 的 LAB 2A 时遇到一个死锁 Bug。</p><p>在 6.824 的 LAB 2A 中，是需要大量使用互斥锁的，这非常容易出错。在我第一次实现完 LAB 2A 并运行测试的时候，报了大量的数据竞争错误，把这个错误改完就花了十几分钟~~。</p><p>之后继续运行测试的时候，又卡在了 “election after network failure” 的测试中，但奇怪的是整个测试并没有报错，只是“卡住了”，我就猜到可能出现了死锁。使用博客 <a href="https://blog.josejg.com/debugging-pretty/">Debugging by Pretty Printing</a> 中的测试框架，得到了如下的日志记录：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs go">S0 starts running                                                                                                                                                         <br>                                                          S1 starts running                                                                                               <br>                                                                                                                  S2 starts running                                       <br>S0 starts election                                                                                                                                                        <br>S0 becomes Candidate                                                                                                                                                      <br>S0 change term from <span class="hljs-number">0</span> to <span class="hljs-number">1</span>                                                                                                                                                <br>S0 votes <span class="hljs-keyword">for</span> S0                                                                                                                                                           <br>                                                          S1 receives VoteRequestRpc from S0                                                                              <br>                                                          S1 becomes Follower                                                                                             <br>                                                          S1 changes term from <span class="hljs-number">1</span> to <span class="hljs-number">1</span>                                                                                     <br>                                                          S1 votes <span class="hljs-keyword">for</span> S0                                                                                                 <br>S0 becomes Leader                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>                                                          S1 receives AppendEntriesRpc from S0                                                                            <br>                                                          S1 reply AppendEntriesRpc from S0: &amp;&#123;Term:<span class="hljs-number">1</span>&#125;                                                                    <br>                                                                                                                  S2 receives AppendEntriesRpc from S0                    <br>                                                                                                                  S2 becomes Follower                                     <br>                                                                                                                  S2 changes term from <span class="hljs-number">1</span> to <span class="hljs-number">1</span>                             <br>                                                                                                                  S2 reply AppendEntriesRpc from S0: &amp;&#123;Term:<span class="hljs-number">1</span>&#125;            <br>S0 sends hearbeat                                                                                                                                                         <br>                                                          S1 receives AppendEntriesRpc from S0                                                                            <br>                                                          S1 reply AppendEntriesRpc from S0: &amp;&#123;Term:<span class="hljs-number">1</span>&#125;                                                                    <br>                                                                                                                  S2 receives AppendEntriesRpc from S0                    <br>                                                                                                                  S2 reply AppendEntriesRpc from S0: &amp;&#123;Term:<span class="hljs-number">1</span>&#125;            <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>                                                                                                                  S2 starts election                                      <br>                                                                                                                  S2 becomes Candidate                                    <br>                                                                                                                  S2 change term from <span class="hljs-number">1</span> to <span class="hljs-number">2</span>                              <br>                                                                                                                  S2 votes <span class="hljs-keyword">for</span> S2                                         <br>                                                          S1 starts election                                                                                              <br>                                                          S1 becomes Candidate                                                                                            <br>                                                          S1 change term from <span class="hljs-number">1</span> to <span class="hljs-number">2</span>                                                                                      <br>                                                          S1 votes <span class="hljs-keyword">for</span> S1                                                                                                 <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>                                                                                                                  S2 receives VoteRequestRpc from S1                      <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>                                                          S1 receives VoteRequestRpc from S2                                                                              <br>S0 sends hearbeat   <br>S0 sends hearbeat<br>S0 sends hearbeat<br>S0 sends hearbeat<br>S0 sends hearbeat<br>S0 sends hearbeat                                                                                                                                                                                          <br></code></pre></td></tr></table></figure><p>在第25到28行的记录中，可以看到 S0 发送了四次心跳，但是都没有收到 S1 和 S2 的答复，可以推测出发生了网络分区，这时候 S1 和 S2 无法与 S0 通信。</p><p>之后 S1 和 S2 触发选举超时，发起选举投票，它们首先都为自己投票，因此 S1 和 S2 都不会得到过半投票。按照理论来说，过一会之后又会触发选举超时，S1 或 S2 会再次发起选举投票，但是整个系统卡住了，只有 S0 还在打印消息。</p><p>根据上面的分析，可初步定位是在选举投票的实现中出了问题，之前的实现如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(rf *Raft)</span></span> startElection() &#123;<br>    <span class="hljs-comment">// ...........</span><br>    <span class="hljs-comment">// ...........</span><br>    <span class="hljs-comment">// ...........</span><br><br>    receivedVotes := <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> rf.peers &#123;<br>        <span class="hljs-keyword">if</span> i == rf.me &#123;<br>            <span class="hljs-keyword">continue</span><br>        &#125;<br>        <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(peerId <span class="hljs-type">int</span>)</span></span> &#123;<br>            rf.mu.Lock()<br>            <span class="hljs-keyword">defer</span> rf.mu.Unlock()    <br>            <span class="hljs-comment">// 已经被选举成了领导人，或退化成了跟随者，直接返回</span><br>            <span class="hljs-keyword">if</span> rf.role != CANDIDATE &#123;<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            <span class="hljs-comment">// 选举超时，当前节点发起新一轮选举，因此任期号改变了，直接返回</span><br>            <span class="hljs-keyword">if</span> electionStartTerm != rf.currentTerm &#123;<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            args := &amp;RequestVoteArgs&#123;<br>                Term:        electionStartTerm,<br>                CandidateId: rf.me,<br>            &#125;<br>            reply := &amp;RequestVoteReply&#123;&#125;<br>            <span class="hljs-keyword">if</span> !rf.sendRequestVote(peerId, args, reply) &#123;<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            <span class="hljs-comment">// ...........</span><br>            <span class="hljs-comment">// ...........</span><br>            <span class="hljs-comment">// ...........</span><br>        &#125;(i)<br>    &#125;<br><br>    <span class="hljs-comment">// 重置选举超时计时器</span><br>    rf.electionStart = time.Now()<br>    rf.electionTimeout = rf.randomElectionTimeout()<br>    <span class="hljs-keyword">go</span> rf.ticker()<br>&#125;    <br></code></pre></td></tr></table></figure><p>在循环中，对每个节点我们都会开一个 Go 程去“拉票”，在 Go 程最开头的时候我们申请了锁，然后使用 <code>defer rf.mu.Unlock()</code> 在 Go 程返回的时候释放锁，而这恰恰就导致了死锁。</p><p>在这个实现中，S1 和 S2 在发起投票 RPC 的时候是持有自己的锁的（假设 S1 的锁为锁A，S2 的锁为锁B）。而 S1 和 S2 在收到投票 RPC 后需要读取自己的一些状态，因此 S1 会申请锁A，S2 会申请锁B，但是此时锁A和锁B已经被 S1 和 S2 持有了，这样整个系统就卡住了，无法继续执行下去，因此 S1 和 S2 自然就不可能再次发起选举，很显然这就是一个死锁Bug。</p><p>解决方法也很简单，只要 S1 和 S2 在发起投票 RPC 之前是否释放掉持有的锁即可：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(rf *Raft)</span></span> startElection() &#123;<br>    <span class="hljs-comment">// ...........</span><br>    <span class="hljs-comment">// ...........</span><br>    <span class="hljs-comment">// ...........</span><br><br>    receivedVotes := <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> rf.peers &#123;<br>        <span class="hljs-keyword">if</span> i == rf.me &#123;<br>            <span class="hljs-keyword">continue</span><br>        &#125;<br>        <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(peerId <span class="hljs-type">int</span>)</span></span> &#123;<br>            rf.mu.Lock()<br>            <span class="hljs-comment">// 已经被选举成了领导人，或退化成了跟随者，直接返回</span><br>            <span class="hljs-keyword">if</span> rf.role != CANDIDATE &#123;<br>                rf.mu.Unlock()<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            <span class="hljs-comment">// 选举超时，当前节点发起新一轮选举，因此任期号改变了，直接返回</span><br>            <span class="hljs-keyword">if</span> electionStartTerm != rf.currentTerm &#123;<br>                rf.mu.Unlock()<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            rf.mu.Unlock()    <span class="hljs-comment">// 在投票前释放</span><br>            args := &amp;RequestVoteArgs&#123;<br>                Term:        electionStartTerm,<br>                CandidateId: rf.me,<br>            &#125;<br>            reply := &amp;RequestVoteReply&#123;&#125;<br>            <span class="hljs-keyword">if</span> !rf.sendRequestVote(peerId, args, reply) &#123;<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            <span class="hljs-comment">// ...........</span><br>            <span class="hljs-comment">// ...........</span><br>            <span class="hljs-comment">// ...........</span><br>        &#125;(i)<br>    &#125;<br><br>    <span class="hljs-comment">// 重置选举超时计时器</span><br>    rf.electionStart = time.Now()<br>    rf.electionTimeout = rf.randomElectionTimeout()<br>    <span class="hljs-keyword">go</span> rf.ticker()<br>&#125;<br></code></pre></td></tr></table></figure><p>再次运行 Lab 2A 的测试，就能完美通过了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">Test (<span class="hljs-number">2</span>A): initial election ...<br>  ... Passed --   <span class="hljs-number">3.0</span>  <span class="hljs-number">3</span>  <span class="hljs-number">110</span>   <span class="hljs-number">11914</span>    <span class="hljs-number">0</span><br>Test (<span class="hljs-number">2</span>A): election after network failure ...<br>  ... Passed --   <span class="hljs-number">4.5</span>  <span class="hljs-number">3</span>  <span class="hljs-number">130</span>    <span class="hljs-number">9694</span>    <span class="hljs-number">0</span><br>Test (<span class="hljs-number">2</span>A): multiple elections ...<br>  ... Passed --   <span class="hljs-number">5.6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">852</span>   <span class="hljs-number">69742</span>    <span class="hljs-number">0</span><br>PASS<br>ok      <span class="hljs-number">6.824</span>/raft      <span class="hljs-number">14.129</span>s<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://pdos.csail.mit.edu/6.824/">MIT 6.824</a></p></li><li><p><a href="https://raft.github.io/raft.pdf">Raft paper</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>distributed system</category>
      
    </categories>
    
    
    <tags>
      
      <tag>consistency</tag>
      
      <tag>distributed</tag>
      
      <tag>paper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Raft（一）：一致性算法</title>
    <link href="/2022/07/24/Raft-1/"/>
    <url>/2022/07/24/Raft-1/</url>
    
    <content type="html"><![CDATA[<h2 id="为什么我们需要分布式系统？"><a href="#为什么我们需要分布式系统？" class="headerlink" title="为什么我们需要分布式系统？"></a>为什么我们需要分布式系统？</h2><p>分布式系统是由一组通过网络进行通信、为了完成共同的任务而协调工作的计算机节点组成的系统。</p><p>事实上分布式系统的复杂程度通常远远超过单机系统，在单机系统中，我们可能会遇到磁盘故障、并发死锁、系统崩溃等问题，而在分布式系统中，除了这些问题外，我们还可能遇到网络延迟、分区、系统状态不一致等千奇百怪的问题。</p><p>但是，分布式系统同样具有一些好处来吸引人们使用它：</p><ul><li><p>分布式系统中存在大量的计算机并行运行，可以获取<strong>更高的性能</strong>。比如大量的计算的CPU、内存、磁盘可以并行运行。</p></li><li><p>分布式系统可以提供<strong>容错</strong>。比如两台计算机运行完全相同的任务，其中一台发生故障，可以切换到另一台。</p></li><li><p>由于物理原因，有些系统天然在<strong>空间上是分布式</strong>的。例如银行转账，假设银行在相距很远的地方分别由两台服务器，如果要在这两台服务器之前进行交易转账，那么就需要一种在两者之间进行协调的方法。</p></li><li><p>实现一些<strong>安全</strong>目标。比如有一些代码不被信任，但是我们需要和它交互，这些代码不会立即表现出恶意或出现bug。我们可以把代码分散在多处运行，这样不被信任的代码在一台计算机运行，我们的代码在自己的计算机上运行，然后再通过一些特定的网络协议通信。这样就把系统分成了多个计算机，可以限制恶意代码的出错域。</p></li></ul><h2 id="通过复制实现容错"><a href="#通过复制实现容错" class="headerlink" title="通过复制实现容错"></a>通过复制实现容错</h2><p>上面提到，人们使用分布式系统的其中一个原因就是容错，而复制是实现容错的一个重要的工具。通过复制，可以让分布式系统中的节点运行相同副本，从在可以在一个节点出现故障的情况下，其他的节点可以继续提供服务。</p><p>有两种方法可以实现复制，一种是状态转移（State Transfer），另一种是复制状态机（Replicated State Machine）。</p><p>假设我们有一个服务的两个副本，一个是 Primary，另一个是 Backup。我们需要让它们保持同步，在实际上互为副本，这样一旦 Primary 出现故障，因为 Backup 的状态与 Primary 一致，就可以接管整个服务。</p><p>状态转移背后的思想是，Primary 将自己完整状态，比如说内存中的内容，拷贝并发送给Backup。Backup 会保存收到的最近一次状态，所以 Backup 会有所有的数据。当 Primary 故障了，Backup 就可以从它所保存的最新状态开始运行。所以，状态转移就是发送 Primary的状态。</p><p>复制状态机基于一个事实：我们想要复制的大部分服务都有一些确定的内部操作，而外部输入是不确定的。如果一台计算机没有外部输入，它只是一个接一个的执行指令，这样运行着相同服务的多个计算机的状态就会保持一致。只有当存在外部输入时，才可能会破坏一致性。例如，一台服务器在某个时间收到了一个网络数据包，导致服务器做一些不同的事情。</p><p>所以，复制状态机不会在不同的副本之间发送状态，相应的，它只会从 Primary 将这些外部输入发送给 Backup。假设有多台计算机，如果它们从相同的状态启动，并且以相同的顺序执行相同的外部输入，那么它们会一直互为副本，保持一致。</p><p>因此，状态转移传输的是可能是内存状态，而复制状态机会将来自客户端的操作或者其他外部输入，从 Primary 传输到 Backup。</p><h2 id="Raft-是什么？"><a href="#Raft-是什么？" class="headerlink" title="Raft 是什么？"></a>Raft 是什么？</h2><p>上面我们提到复制状态机是复制的一种实现方法，而复制状态机又通常是基于复制日志实现的，如图所示：</p><img src="/2022/07/24/Raft-1/raft-%E5%9B%BE1.png" class=""><p>每个服务器存储一个包含一系列指令的日志，并且按照日志的顺序执行指令。如果每个日志都按照相同的顺序包含相同的指令，那么每个服务器都将执行相同的指令序列，最终所有的服务其都将保持一致的状态。反过来说，如果服务器上的日志出现了不一致，比如某些服务器上缺失了一条指令，或者指令顺序与其他的服务器不一样，那么每个服务器将会执行不一样的指令序列，导致出现状态不同步的问题。</p><p>而 Raft 就是一种一致性算法，其任务是保证复制日志的一致性。服务器上的一致性模块接收客户端发送的指令然后添加到自己的日志中。它和其他服务器上的一致性模块进行通信来保证每一个服务器上的日志最终都以相同的顺序包含相同的请求，即使有些服务器发生故障。一旦指令被正确复制，每一个服务器的状态机按照日志顺序处理他们，然后输出结果被返回给客户端。因此，服务器集群看起来形成了一个高可靠的状态机。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://pdos.csail.mit.edu/6.824/">MIT 6.824</a></p></li><li><p><a href="https://raft.github.io/raft.pdf">Raft paper</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>distributed system</category>
      
    </categories>
    
    
    <tags>
      
      <tag>consistency</tag>
      
      <tag>distributed</tag>
      
      <tag>paper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lock-free hashtable</title>
    <link href="/2022/05/22/lock-free-hashtable/"/>
    <url>/2022/05/22/lock-free-hashtable/</url>
    
    <content type="html"><![CDATA[<h2 id="lock-free-linked-list"><a href="#lock-free-linked-list" class="headerlink" title="lock-free linked list"></a>lock-free linked list</h2><p>施工中。。。。</p><h2 id="lock-free-hashtable"><a href="#lock-free-hashtable" class="headerlink" title="lock-free hashtable"></a>lock-free hashtable</h2><p>施工中。。。。</p>]]></content>
    
    
    <categories>
      
      <category>concurrent</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rust</tag>
      
      <tag>concurrent</tag>
      
      <tag>parallel</tag>
      
      <tag>lock-free</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>drop check</title>
    <link href="/2022/05/22/drop-check/"/>
    <url>/2022/05/22/drop-check/</url>
    
    <content type="html"><![CDATA[<h2 id="drop-check-x2F-may-dangle"><a href="#drop-check-x2F-may-dangle" class="headerlink" title="drop check&#x2F;may_dangle"></a>drop check&#x2F;may_dangle</h2><p>Drop checker会检查一个类型是否能够安全地实现Drop Tarit。<strong>如果一个能够安全实现Drop的类型，那么它的泛型参数的生命周期必须严格长于它本身</strong>。一个违反Drop check的例子：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#![allow(unused)]</span><br><span class="hljs-keyword">use</span> std::alloc::&#123;GlobalAlloc, Layout, System&#125;;<br><span class="hljs-keyword">use</span> std::fmt;<br><span class="hljs-keyword">use</span> std::mem;<br><span class="hljs-keyword">use</span> std::ptr;<br><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> (y, x);<br>    x = String::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    y = MyBox::<span class="hljs-title function_ invoke__">new</span>(&amp;x);<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MyBox</span>&lt;T&gt; &#123;<br>    v: *<span class="hljs-keyword">mut</span> T,<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T&gt; MyBox&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(t: T) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = System.<span class="hljs-title function_ invoke__">alloc</span>(Layout::array::&lt;T&gt;(<span class="hljs-number">1</span>).<span class="hljs-title function_ invoke__">unwrap</span>());<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = p <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> T;<br>            ptr::<span class="hljs-title function_ invoke__">write</span>(p, t);<br>            MyBox &#123;<br>                v: p,<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T&gt; <span class="hljs-built_in">Drop</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">MyBox</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">drop</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            ptr::<span class="hljs-title function_ invoke__">drop_in_place</span>(<span class="hljs-keyword">self</span>.v);<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = <span class="hljs-keyword">self</span>.v <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> _;<br>            System.<span class="hljs-title function_ invoke__">dealloc</span>(p, Layout::array::&lt;T&gt;(<span class="hljs-number">1</span>).<span class="hljs-title function_ invoke__">unwrap</span>());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译将会发生报错：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust">error[E0597]: `x` does not live long enough<br>  -<span class="hljs-punctuation">-&gt;</span> src/main.rs:<span class="hljs-number">13</span>:<span class="hljs-number">20</span><br>   |<br><span class="hljs-number">13</span> |     y = MyBox::<span class="hljs-title function_ invoke__">new</span>(&amp;x);<br>   |                    ^^ borrowed value does not live long enough<br><span class="hljs-number">14</span> | &#125;<br>   | -<br>   | |<br>   | `x` dropped here <span class="hljs-keyword">while</span> still borrowed<br>   | borrow might be used here, when `y` is dropped and runs the `<span class="hljs-built_in">Drop</span>` code <span class="hljs-keyword">for</span> <span class="hljs-title class_">type</span> `MyBox`<br>   |<br>   = note: values <span class="hljs-keyword">in</span> a scope are dropped <span class="hljs-keyword">in</span> the opposite order they are defined<br></code></pre></td></tr></table></figure><p>从表面上看，<code>x</code>与<code>y</code>的生命周期是一样长的。但是<code>x</code>比<code>y</code>先定义，因此变量<code>x</code>会首先发生析构，因此<code>x</code>的生命周期并不严格长于<code>y</code>的生命周期，这显然不满足Drop checker的条件，因此发生报错：编译器认为在调用<code>y</code>的析构函数时，可能会使用<code>x</code>的引用，这会导致UB，因此编译器拒绝这段代码。</p><p>但是，实际上我们并没有在<code>y</code>的析构函数使用<code>x</code>的引用，不会出现UB行为。为了解决这个问题，可以开启特性<code>#![feature(dropck_eyepatch)]</code>，并使用属性<code>#[may_dangle]</code>注解<code>T</code>，明确表示不会在<code>y</code>的析构函数中使用<code>x</code>的引用：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#![allow(unused)]</span><br><span class="hljs-meta">#![feature(dropck_eyepatch)]</span><br><span class="hljs-keyword">use</span> std::alloc::&#123;GlobalAlloc, Layout, System&#125;;<br><span class="hljs-keyword">use</span> std::fmt;<br><span class="hljs-keyword">use</span> std::mem;<br><span class="hljs-keyword">use</span> std::ptr;<br><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> (y, x);<br>    x = String::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    y = MyBox::<span class="hljs-title function_ invoke__">new</span>(&amp;x);<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MyBox</span>&lt;T&gt; &#123;<br>    v: *<span class="hljs-keyword">mut</span> T,<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T&gt; MyBox&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(t: T) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = System.<span class="hljs-title function_ invoke__">alloc</span>(Layout::array::&lt;T&gt;(<span class="hljs-number">1</span>).<span class="hljs-title function_ invoke__">unwrap</span>());<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = p <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> T;<br>            ptr::<span class="hljs-title function_ invoke__">write</span>(p, t);<br>            MyBox &#123;<br>                v: p,<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">impl</span>&lt;<span class="hljs-meta">#[may_dangle]</span> T&gt; <span class="hljs-built_in">Drop</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">MyBox</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">drop</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            ptr::<span class="hljs-title function_ invoke__">drop_in_place</span>(<span class="hljs-keyword">self</span>.v);<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = <span class="hljs-keyword">self</span>.v <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> _;<br>            System.<span class="hljs-title function_ invoke__">dealloc</span>(p, Layout::array::&lt;T&gt;(<span class="hljs-number">1</span>).<span class="hljs-title function_ invoke__">unwrap</span>());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译将会顺利通过：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust">Compiling playground v0.<span class="hljs-number">0.1</span> (/playground)<br>    Finished dev [unoptimized + debuginfo] <span class="hljs-title function_ invoke__">target</span>(s) <span class="hljs-keyword">in</span> <span class="hljs-number">7.20</span>s<br>     Running `target/debug/playground`<br></code></pre></td></tr></table></figure><h2 id="phantomData"><a href="#phantomData" class="headerlink" title="phantomData"></a>phantomData</h2><p>使用<code>may_dangle</code>后编译器将不会进行Drop check检查，但是在下面的代码中将会出现UB：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#![allow(unused)]</span><br><span class="hljs-meta">#![feature(dropck_eyepatch)]</span><br><span class="hljs-keyword">use</span> std::alloc::&#123;GlobalAlloc, Layout, System&#125;;<br><span class="hljs-keyword">use</span> std::fmt;<br><span class="hljs-keyword">use</span> std::mem;<br><span class="hljs-keyword">use</span> std::ptr;<br><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> (y, x);<br>    x = Hello::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">13</span>);<br>    y = MyBox::<span class="hljs-title function_ invoke__">new</span>(Hello::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;y&quot;</span>, &amp;x));<br>&#125;<br><br><span class="hljs-meta">#[derive(Copy, Clone, Debug)]</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">State</span> &#123;<br>    Invalid,<br>    Valid,<br>&#125;<br><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Hello</span>&lt;T: fmt::<span class="hljs-built_in">Debug</span>&gt;(&amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span>, T, State);<br><br><span class="hljs-keyword">impl</span>&lt;T: fmt::<span class="hljs-built_in">Debug</span>&gt; Hello&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(name: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span>, t: T) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-title function_ invoke__">Hello</span>(name, t, State::Valid)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T: fmt::<span class="hljs-built_in">Debug</span>&gt; <span class="hljs-built_in">Drop</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Hello</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">drop</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Drop hello(&#123;&#125;, &#123;:?&#125;, &#123;:?&#125;)&quot;</span>, <span class="hljs-keyword">self</span>.<span class="hljs-number">0</span>, <span class="hljs-keyword">self</span>.<span class="hljs-number">1</span>, <span class="hljs-keyword">self</span>.<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">self</span>.<span class="hljs-number">2</span> = State::Invalid;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MyBox</span>&lt;T&gt; &#123;<br>    v: *<span class="hljs-keyword">mut</span> T,<br>    <span class="hljs-comment">// _pd: PhantomData&lt;T&gt;</span><br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T&gt; MyBox&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(t: T) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = System.<span class="hljs-title function_ invoke__">alloc</span>(Layout::array::&lt;T&gt;(<span class="hljs-number">1</span>).<span class="hljs-title function_ invoke__">unwrap</span>());<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = p <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> T;<br>            ptr::<span class="hljs-title function_ invoke__">write</span>(p, t);<br>            MyBox &#123;<br>                v: p,<br>                <span class="hljs-comment">// _pd: PhantomData</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">impl</span>&lt;<span class="hljs-meta">#[may_dangle]</span> T&gt; <span class="hljs-built_in">Drop</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">MyBox</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">drop</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            ptr::<span class="hljs-title function_ invoke__">drop_in_place</span>(<span class="hljs-keyword">self</span>.v);<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = <span class="hljs-keyword">self</span>.v <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> _;<br>            System.<span class="hljs-title function_ invoke__">dealloc</span>(p, Layout::array::&lt;T&gt;(<span class="hljs-number">1</span>).<span class="hljs-title function_ invoke__">unwrap</span>());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译结果：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-built_in">Drop</span> <span class="hljs-title function_ invoke__">hello</span>(x, <span class="hljs-number">13</span>, Valid)<br><span class="hljs-built_in">Drop</span> <span class="hljs-title function_ invoke__">hello</span>(y, <span class="hljs-title function_ invoke__">Hello</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">13</span>, Invalid), Valid)<br></code></pre></td></tr></table></figure><p>使用MIRI检查是否存在UB：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs rust">error: Undefined Behavior: pointer to alloc999 was dereferenced after this allocation got freed<br>    -<span class="hljs-punctuation">-&gt;</span> /playground/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/<span class="hljs-keyword">mod</span>.rs:<span class="hljs-number">2116</span>:<span class="hljs-number">1</span><br>     |<br><span class="hljs-number">2116</span> | fmt_refs! &#123; <span class="hljs-built_in">Debug</span>, Display, Octal, Binary, LowerHex, UpperHex, LowerExp, UpperExp &#125;<br>     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pointer to alloc999 was dereferenced after this allocation got freed<br>     |<br>     = help: this indicates a bug <span class="hljs-keyword">in</span> the program: it performed an invalid operation, and caused Undefined Behavior<br>     = help: see https:<span class="hljs-comment">//doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information</span><br><br>     = note: inside `&lt;&amp;Hello&lt;<span class="hljs-type">i32</span>&gt; <span class="hljs-keyword">as</span> std::fmt::<span class="hljs-built_in">Debug</span>&gt;::fmt` at /playground/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/<span class="hljs-keyword">mod</span>.rs:<span class="hljs-number">2106</span>:<span class="hljs-number">71</span><br>     = note: inside `std::fmt::write` at /playground/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/<span class="hljs-keyword">mod</span>.rs:<span class="hljs-number">1168</span>:<span class="hljs-number">17</span><br>     = note: inside `&lt;std::io::StdoutLock <span class="hljs-keyword">as</span> std::io::Write&gt;::write_fmt` at /playground/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/io/<span class="hljs-keyword">mod</span>.rs:<span class="hljs-number">1653</span>:<span class="hljs-number">15</span><br>     = note: inside `&lt;&amp;std::io::Stdout <span class="hljs-keyword">as</span> std::io::Write&gt;::write_fmt` at /playground/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/io/stdio.rs:<span class="hljs-number">844</span>:<span class="hljs-number">9</span><br>     = note: inside `&lt;std::io::Stdout <span class="hljs-keyword">as</span> std::io::Write&gt;::write_fmt` at /playground/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/io/stdio.rs:<span class="hljs-number">818</span>:<span class="hljs-number">9</span><br>     = note: inside `std::io::stdio::print_to::&lt;std::io::Stdout&gt;` at /playground/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/io/stdio.rs:<span class="hljs-number">1186</span>:<span class="hljs-number">21</span><br>     = note: inside `std::io::_print` at /playground/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/io/stdio.rs:<span class="hljs-number">1199</span>:<span class="hljs-number">5</span><br>note: inside `&lt;Hello&lt;&amp;Hello&lt;<span class="hljs-type">i32</span>&gt;&gt; <span class="hljs-keyword">as</span> std::ops::<span class="hljs-built_in">Drop</span>&gt;::drop` at /playground/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:<span class="hljs-number">99</span>:<span class="hljs-number">9</span><br>    -<span class="hljs-punctuation">-&gt;</span> src/main.rs:<span class="hljs-number">32</span>:<span class="hljs-number">9</span><br>     |<br><span class="hljs-number">32</span>   |         <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Drop hello(&#123;&#125;, &#123;:?&#125;, &#123;:?&#125;)&quot;</span>, <span class="hljs-keyword">self</span>.<span class="hljs-number">0</span>, <span class="hljs-keyword">self</span>.<span class="hljs-number">1</span>, <span class="hljs-keyword">self</span>.<span class="hljs-number">2</span>);<br>     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br>     = note: inside `std::ptr::drop_in_place::&lt;Hello&lt;&amp;Hello&lt;<span class="hljs-type">i32</span>&gt;&gt;&gt; - <span class="hljs-title function_ invoke__">shim</span>(<span class="hljs-title function_ invoke__">Some</span>(Hello&lt;&amp;Hello&lt;<span class="hljs-type">i32</span>&gt;&gt;))` at /playground/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ptr/<span class="hljs-keyword">mod</span>.rs:<span class="hljs-number">188</span>:<span class="hljs-number">1</span><br>note: inside `&lt;MyBox&lt;Hello&lt;&amp;Hello&lt;<span class="hljs-type">i32</span>&gt;&gt;&gt; <span class="hljs-keyword">as</span> std::ops::<span class="hljs-built_in">Drop</span>&gt;::drop` at src/main.rs:<span class="hljs-number">59</span>:<span class="hljs-number">13</span><br>    -<span class="hljs-punctuation">-&gt;</span> src/main.rs:<span class="hljs-number">59</span>:<span class="hljs-number">13</span><br>     |<br><span class="hljs-number">59</span>   |             ptr::<span class="hljs-title function_ invoke__">drop_in_place</span>(<span class="hljs-keyword">self</span>.v);<br>     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^<br>     = note: inside `std::ptr::drop_in_place::&lt;MyBox&lt;Hello&lt;&amp;Hello&lt;<span class="hljs-type">i32</span>&gt;&gt;&gt;&gt; - <span class="hljs-title function_ invoke__">shim</span>(<span class="hljs-title function_ invoke__">Some</span>(MyBox&lt;Hello&lt;&amp;Hello&lt;<span class="hljs-type">i32</span>&gt;&gt;&gt;))` at /playground/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ptr/<span class="hljs-keyword">mod</span>.rs:<span class="hljs-number">188</span>:<span class="hljs-number">1</span><br>note: inside `main` at src/main.rs:<span class="hljs-number">13</span>:<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>之所以会出现上述结果，是因为在<code>y</code>的析构函数中，我们调用了<code>T: Hello::new(&quot;y&quot;, &amp;x)</code>的析构函数，在<code>T</code>的析构函数中会打印<code>&amp;x</code>的值，而<code>x</code>在此时已经被析构了，它的值变成了<code>Hello(x,13,Invalid)</code>。因此<code>y</code>中的<code>&amp;x</code>变成了悬垂引用，并且在<code>T</code>的析构函数中使用了<code>&amp;x</code>，这显然是一种UB。</p><p>为了防止UB，我们可以在<code>MyBox</code>中添加<code>PhantomData</code>字段，表示<code>MyBox</code>拥有<code>T</code>，会在<code>MyBox</code>的析构函数中析构<code>T</code>（当然<code>MyBox</code>并不拥有<code>T</code>，也不一定会析构<code>T</code>），告诉编译器对<code>MyBox</code>进行Drop check检查。</p><p>修改上述代码，添加<code>PhantomData</code>字段：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#![allow(unused)]</span><br><span class="hljs-meta">#![feature(dropck_eyepatch)]</span><br><span class="hljs-keyword">use</span> std::alloc::&#123;GlobalAlloc, Layout, System&#125;;<br><span class="hljs-keyword">use</span> std::fmt;<br><span class="hljs-keyword">use</span> std::mem;<br><span class="hljs-keyword">use</span> std::ptr;<br><span class="hljs-keyword">use</span> std::marker::PhantomData;<br><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> (y, x);<br>    x = Hello::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">13</span>);<br>    y = MyBox::<span class="hljs-title function_ invoke__">new</span>(Hello::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;y&quot;</span>, &amp;x));<br>&#125;<br><br><span class="hljs-meta">#[derive(Copy, Clone, Debug)]</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">State</span> &#123;<br>    Invalid,<br>    Valid,<br>&#125;<br><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Hello</span>&lt;T: fmt::<span class="hljs-built_in">Debug</span>&gt;(&amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span>, T, State);<br><br><span class="hljs-keyword">impl</span>&lt;T: fmt::<span class="hljs-built_in">Debug</span>&gt; Hello&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(name: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span>, t: T) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-title function_ invoke__">Hello</span>(name, t, State::Valid)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T: fmt::<span class="hljs-built_in">Debug</span>&gt; <span class="hljs-built_in">Drop</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Hello</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">drop</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Drop hello(&#123;&#125;, &#123;:?&#125;, &#123;:?&#125;)&quot;</span>, <span class="hljs-keyword">self</span>.<span class="hljs-number">0</span>, <span class="hljs-keyword">self</span>.<span class="hljs-number">1</span>, <span class="hljs-keyword">self</span>.<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">self</span>.<span class="hljs-number">2</span> = State::Invalid;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MyBox</span>&lt;T&gt; &#123;<br>    v: *<span class="hljs-keyword">mut</span> T,<br>    _pd: PhantomData&lt;T&gt;<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T&gt; MyBox&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(t: T) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = System.<span class="hljs-title function_ invoke__">alloc</span>(Layout::array::&lt;T&gt;(<span class="hljs-number">1</span>).<span class="hljs-title function_ invoke__">unwrap</span>());<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = p <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> T;<br>            ptr::<span class="hljs-title function_ invoke__">write</span>(p, t);<br>            MyBox &#123;<br>                v: p,<br>                _pd: PhantomData<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">impl</span>&lt;<span class="hljs-meta">#[may_dangle]</span> T&gt; <span class="hljs-built_in">Drop</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">MyBox</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">drop</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            ptr::<span class="hljs-title function_ invoke__">drop_in_place</span>(<span class="hljs-keyword">self</span>.v);<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = <span class="hljs-keyword">self</span>.v <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> _;<br>            System.<span class="hljs-title function_ invoke__">dealloc</span>(p, Layout::array::&lt;T&gt;(<span class="hljs-number">1</span>).<span class="hljs-title function_ invoke__">unwrap</span>());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译将会报错：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust">error[E0597]: `x` does not live long enough<br>  -<span class="hljs-punctuation">-&gt;</span> src/main.rs:<span class="hljs-number">13</span>:<span class="hljs-number">36</span><br>   |<br><span class="hljs-number">13</span> |     y = MyBox::<span class="hljs-title function_ invoke__">new</span>(Hello::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;y&quot;</span>, &amp;x));<br>   |                                    ^^ borrowed value does not live long enough<br><span class="hljs-number">14</span> | &#125;<br>   | -<br>   | |<br>   | `x` dropped here <span class="hljs-keyword">while</span> still borrowed<br>   | borrow might be used here, when `y` is dropped and runs the `<span class="hljs-built_in">Drop</span>` code <span class="hljs-keyword">for</span> <span class="hljs-title class_">type</span> `MyBox`<br>   |<br>   = note: values <span class="hljs-keyword">in</span> a scope are dropped <span class="hljs-keyword">in</span> the opposite order they are defined<br></code></pre></td></tr></table></figure><p>这表明Drop checker起了作用，有效防止出现UB。</p><p>但是，这似乎与最初版的代码的编译是一样的，那要<code>PhantomData</code>和<code>may_dangle</code>有什么用？答案当然是有用的，如果<code>MyBox&lt;T&gt;</code>中的<code>T</code>没有实现Drop trait，那么上述代码将会编译通过。</p><p>删除<code>Hello</code>的析构函数：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#![allow(unused)]</span><br><span class="hljs-meta">#![feature(dropck_eyepatch)]</span><br><span class="hljs-keyword">use</span> std::alloc::&#123;GlobalAlloc, Layout, System&#125;;<br><span class="hljs-keyword">use</span> std::fmt;<br><span class="hljs-keyword">use</span> std::mem;<br><span class="hljs-keyword">use</span> std::ptr;<br><span class="hljs-keyword">use</span> std::marker::PhantomData;<br><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> (y, x);<br>    x = Hello::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">13</span>);<br>    y = MyBox::<span class="hljs-title function_ invoke__">new</span>(Hello::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;y&quot;</span>, &amp;x));<br>&#125;<br><br><span class="hljs-meta">#[derive(Copy, Clone, Debug)]</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">State</span> &#123;<br>    Invalid,<br>    Valid,<br>&#125;<br><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Hello</span>&lt;T: fmt::<span class="hljs-built_in">Debug</span>&gt;(&amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span>, T, State);<br><br><span class="hljs-keyword">impl</span>&lt;T: fmt::<span class="hljs-built_in">Debug</span>&gt; Hello&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(name: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span>, t: T) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-title function_ invoke__">Hello</span>(name, t, State::Valid)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MyBox</span>&lt;T&gt; &#123;<br>    v: *<span class="hljs-keyword">mut</span> T,<br>    _pd: PhantomData&lt;T&gt;<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T&gt; MyBox&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(t: T) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = System.<span class="hljs-title function_ invoke__">alloc</span>(Layout::array::&lt;T&gt;(<span class="hljs-number">1</span>).<span class="hljs-title function_ invoke__">unwrap</span>());<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = p <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> T;<br>            ptr::<span class="hljs-title function_ invoke__">write</span>(p, t);<br>            MyBox &#123;<br>                v: p,<br>                _pd: PhantomData<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">impl</span>&lt;<span class="hljs-meta">#[may_dangle]</span> T&gt; <span class="hljs-built_in">Drop</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">MyBox</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">drop</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            ptr::<span class="hljs-title function_ invoke__">drop_in_place</span>(<span class="hljs-keyword">self</span>.v);<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = <span class="hljs-keyword">self</span>.v <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> _;<br>            System.<span class="hljs-title function_ invoke__">dealloc</span>(p, Layout::array::&lt;T&gt;(<span class="hljs-number">1</span>).<span class="hljs-title function_ invoke__">unwrap</span>());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译将会通过：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust">Compiling playground v0.<span class="hljs-number">0.1</span> (/playground)<br>   Finished dev [unoptimized + debuginfo] <span class="hljs-title function_ invoke__">target</span>(s) <span class="hljs-keyword">in</span> <span class="hljs-number">1.53</span>s<br>    Running `target/debug/playground`<br></code></pre></td></tr></table></figure><p>这是因为，如果<code>MyBox&lt;T&gt;</code>中的<code>T</code>没有实现<code>Drop Trait</code>，就算<code>T</code>中存在悬垂引用，也不可能在<code>MyBox</code>的析构函数中通过<code>T</code>的析构函数访问这个悬垂引用，因此不会出现UB，</p><p>如果不使用<code>may_dangle</code>和<code>PhantomData</code>，那么即使<code>T</code>没有实现Drop trait，代码也不会通过编译，即编译器会拒绝掉正确的代码，这显然不是我们所期望的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综上所述，<code>may_dangle</code>和<code>PhantomData</code>结合使用将会有如下效果：</p><ul><li>如果<code>MyBox&lt;T&gt;</code>中的<code>T</code>实现了Drop Trait，那么Drop Checker会要求<code>T</code>的生命周期严格长于<code>MyBox</code>；</li><li>如果<code>MyBox&lt;T&gt;</code>中的<code>T</code>没有实现Drop Trait，那么Drop Checker不会会要求<code>T</code>的生命周期严格长于<code>MyBox</code>。</li></ul><p>如果没有使用<code>may_dangle</code>和<code>PhantomData</code>，那么无论<code>T</code>有没有实现Drop Trait，Drop Checker都会要求<code>T</code>的生命周期严格长于<code>MyBox</code>。</p><p>参考：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/383004091">https://zhuanlan.zhihu.com/p/383004091</a></li><li><a href="https://stackoverflow.com/questions/42708462/why-is-it-useful-to-use-phantomdata-to-inform-the-compiler-that-a-struct-owns-a">https://stackoverflow.com/questions/42708462/why-is-it-useful-to-use-phantomdata-to-inform-the-compiler-that-a-struct-owns-a</a></li><li>来自群友的答疑解惑😀</li></ul>]]></content>
    
    
    <categories>
      
      <category>rust</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rust</tag>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/22/hello-world/"/>
    <url>/2022/05/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
