<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Relaxed Memory Concurrency</title>
    <link href="/2022/11/27/relaxed-memory-concurrency/"/>
    <url>/2022/11/27/relaxed-memory-concurrency/</url>
    
    <content type="html"><![CDATA[<p>内存一致性模型是是系统和程序员之间的规范，它规定了在一个共享存储器的多线程程序中的存储访问应该表现出怎样的行为。内存模型由以下两个属性组成：</p><ul><li><p>Memory Ordering</p><ul><li>Load-Load Order：不同地址上的读操作是否会乱序；</li><li>Load-Store Order：读操作和后面另一个地址上的写操作是否会乱序；</li><li>Store-Load Order：写操作和后面的读操作是否会乱序；</li><li>Store-Store Order：不同地址上的写操作是否会乱序；</li><li>Dependent Loads Order：当第二条读操作的地址取决于前一条读操作的结果时，是否会乱序。</li></ul></li><li><p>Store Atomicity（处理器的写操作是否会被所有处理器看到）</p><ul><li>Load Other’s Store Early &amp;&amp; Non-Causality：允许写操作被自己及个别其他处理器先看到，不支持 Causality。写序列可能以不同顺序被多个处理器观察到；</li><li>Load Other’s Store Early &amp;&amp; Causality：允许写操作被自己及个别其他处理器先看到，支持 Causality；</li><li>Load Own Store Early：只允许写操作被自己先看到。写序列以相同顺序被多个处理器观察到；</li><li>Atomic Store：所有处理器同时看到写操作。</li></ul></li></ul><p>最符合程序员直觉的是 SC（Sequential Consistency） Model，即所有的线程以交错的方式访问内存，并且在单个线程中访问内存的顺序与代码的执行顺序一致。这意味着，一个线程执行的操作对随后执行的线程可见，并且所有的线程都会看到一个相同的操作顺序。SC 的 Memory Model 属性：</p><ul><li>LL&#x2F;LS&#x2F;SL&#x2F;SS&#x2F;DL 乱序：不允许；</li><li>Store Atomicity：Load Own Store Early。</li></ul><p>在 SC Model 的基础上，逐步放松各个属性的限制，会依次得到各种弱一致性模型，可以统称为 Relaxed Memory Model。</p><blockquote><p>以上内容来自：<a href="https://github.com/GHScan/TechNotes/blob/master/2017/Memory_Model.md">https://github.com/GHScan/TechNotes/blob/master/2017/Memory_Model.md</a></p></blockquote><p>本文是 <a href="https://github.com/kaist-cp/cs431">CS431</a> 的学习笔记，记录了 Relaxed Memory Model 的 promising semantics 的原理和验证自旋锁实现正确性的例子。</p><h2 id="the-nondeterminism-due-to-shared-memory-accesses"><a href="#the-nondeterminism-due-to-shared-memory-accesses" class="headerlink" title="the nondeterminism due to shared memory accesses"></a>the nondeterminism due to shared memory accesses</h2><p>在基于共享内存实现的多线程并发程序中，执行结果常常具备大量的不确定性，不确定来源主要有两个：thread interleaving 和 instruction reordering。</p><h3 id="thread-interleaving"><a href="#thread-interleaving" class="headerlink" title="thread interleaving"></a>thread interleaving</h3><p>thread interleaving 指的是多线程的 Load&#x2F;Store 指令交替执行，导致执行结果的不确定性。例如下面这段程序：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::thread;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">mut</span> X: <span class="hljs-type">i32</span> = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">handle1</span> = thread::<span class="hljs-title function_ invoke__">spawn</span>(|| &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = <span class="hljs-number">1</span>;<br>            X = a;<br>        &#125;<br>    &#125;);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">handle2</span> = thread::<span class="hljs-title function_ invoke__">spawn</span>(|| &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">b</span> = <span class="hljs-number">2</span>;<br>            X = b;<br>        &#125;<br>    &#125;);<br>    handle1.<span class="hljs-title function_ invoke__">join</span>().<span class="hljs-title function_ invoke__">unwrap</span>();<br>    handle2.<span class="hljs-title function_ invoke__">join</span>().<span class="hljs-title function_ invoke__">unwrap</span>();<br><br>    <span class="hljs-keyword">unsafe</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;X = &#123;&#125;&quot;</span>, X);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果 <code>handle1</code> 线程先执行，那么 <code>X = 1</code>；如果 <code>handle2</code> 线程先执行，那么 <code>X = 2</code>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r">PS C<span class="hljs-operator">:</span><span class="hljs-punctuation">\</span>Users<span class="hljs-punctuation">\</span><span class="hljs-number">25864</span><span class="hljs-punctuation">\</span>Desktop<span class="hljs-punctuation">\</span>relaxed_memory_concurrency<span class="hljs-operator">&gt;</span> cargo run<br>    Finished dev <span class="hljs-punctuation">[</span>unoptimized <span class="hljs-operator">+</span> debuginfo<span class="hljs-punctuation">]</span> target<span class="hljs-punctuation">(</span>s<span class="hljs-punctuation">)</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0.01</span>s<br>     Running `target\debug\relaxed_memory_concurrency.exe`<br>X <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>PS C<span class="hljs-operator">:</span><span class="hljs-punctuation">\</span>Users<span class="hljs-punctuation">\</span><span class="hljs-number">25864</span><span class="hljs-punctuation">\</span>Desktop<span class="hljs-punctuation">\</span>relaxed_memory_concurrency<span class="hljs-operator">&gt;</span> cargo run<br>    Finished dev <span class="hljs-punctuation">[</span>unoptimized <span class="hljs-operator">+</span> debuginfo<span class="hljs-punctuation">]</span> target<span class="hljs-punctuation">(</span>s<span class="hljs-punctuation">)</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0.01</span>s<br>     Running `target\debug\relaxed_memory_concurrency.exe`<br>X <span class="hljs-operator">=</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>thread interleaving 产生的不确定性非常容易推断，这也是我们所期望的，通过 thread interleaving 可以显著提高程序的性能。</p><h3 id="reordering"><a href="#reordering" class="headerlink" title="reordering"></a>reordering</h3><p>reordering 指的是 Load&#x2F;Store 指令被重排序，导致出现不符合直觉的执行结果。硬件和编译器会执行一些优化，只要不是访问相同的内存位置，任何 Load&#x2F;Store&#x2F;RMW 指令都可能会被重排序。例如下面这段程序：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust">DATA = <span class="hljs-number">42</span>;||<span class="hljs-keyword">if</span> FLAG.<span class="hljs-title function_ invoke__">load</span>() == <span class="hljs-number">1</span> &#123;<br>FLAG.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-number">1</span>);||<span class="hljs-built_in">assert_eq!</span>(DATA, <span class="hljs-number">42</span>);<br>||      &#125;<br></code></pre></td></tr></table></figure><p>假设只存在 thread interleaving：</p><ul><li>线程2先执行 <code>if FLAG.load() == 1</code>，而此时 <code>FLAG = 0</code>，那么就不会执行 <code>assert_eq!(DATA, 42)</code>，程序运行正常；</li><li>线程1先执行 <code>DATA = 42; FLAG.store(1)</code>，然后线程后执行 <code>if FLAG.load() == 1</code>，此时 <code>FLAG = 1</code>，因此会进行 if 分支执行 <code>assert_eq!(DATA, 42)</code>，因为 <code>DATA = 42</code> 已经被执行了，因此断言不会失败，程序继续运行。</li></ul><p>可见，如果只存在 thread interleaving，那么上面的程序一定不会执行失败。但是，由于存在 reordering，<code>assert_eq!(DATA, 42)</code> 断言有可能会失败：</p><ul><li>Store hoisting：线程1中的 <code>FLAG.store(1)</code> 先执行，然后线程2执行 <code>if</code> 判断成功，之后执行 <code>assert_eq!(DATA, 42)</code> 断言就会失败，因为此时 <code>DATA = 0</code>；</li><li>Load hoisting：线程2中的 <code>assert_eq!(DATA, 42)</code> 先执行，此时 <code>DATA = 0</code>，因此断言失败，程序崩溃。</li></ul><p>我们把硬件&#x2F;编译器 reordering 导致的 unintended behaviors 统称为 relaxed behaviors，relaxed behaviors 无法在 thread interleaving 语义中观测到。</p><h3 id="solution-for-relaxed-behaviors-amp-orderings"><a href="#solution-for-relaxed-behaviors-amp-orderings" class="headerlink" title="solution for relaxed behaviors &amp; orderings"></a>solution for relaxed behaviors &amp; orderings</h3><p>可以使用 ordering primitives 禁止 reordering，从而避免出现 relaxed behaviors：</p><ul><li><p>Access ordering：使用 <code>Release/Acquire</code> synchronization。</p></li><li><p>Fence：在 Store&#x2F;Load 之间插入 <code>fence(SC)</code>；</p></li></ul><p>（1）使用  <code>Release/Acquire</code> synchronization：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust">DATA = <span class="hljs-number">42</span>;                ||   <span class="hljs-keyword">if</span> FLAG.<span class="hljs-title function_ invoke__">load</span>(acquire) == <span class="hljs-number">1</span> &#123;<br>FLAG.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-number">1</span>, release);   ||       <span class="hljs-title function_ invoke__">assert</span>(DATA == <span class="hljs-number">42</span>);<br>                          ||   &#125;<br></code></pre></td></tr></table></figure><p>Release Store：禁止与 Store 之前的指令重排序；Acquire Load：禁止与 LOAD 之后的指令重排序。因此只要 <code>FLAG.load(acquire) == 1</code>，那么 <code>assert(DATA == 42)</code> 断言一定会成功。</p><p>（2）使用 <code>fence(SC)</code>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust">DATA = <span class="hljs-number">42</span>;                ||   <span class="hljs-keyword">if</span> FLAG.<span class="hljs-title function_ invoke__">load</span>(relaxed) == <span class="hljs-number">1</span> &#123;<br><span class="hljs-title function_ invoke__">fence</span>(SC);                ||       <span class="hljs-title function_ invoke__">fence</span>(SC);<br>FLAG.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-number">1</span>, relaxed);   ||       <span class="hljs-title function_ invoke__">assert</span>(DATA == <span class="hljs-number">42</span>);  &#125;<br></code></pre></td></tr></table></figure><p>SC fence：禁止重排序 SC fence 之前和之后的指令。那么，只要 <code>FLAG.load(acquire) == 1</code>，那么 <code>assert(DATA == 42)</code> 断言一定会成功。</p><p>但是 relaxed behaviors &amp; orderings 的精确含义是什么？到底什么行为是被允许的、什么行为是不被允许的？为了推断并发程序的正确性，我们需要为 relaxed behaviors &amp; orderings 找到一个好的语义。</p><h2 id="promising-semantics"><a href="#promising-semantics" class="headerlink" title="promising semantics"></a>promising semantics</h2><p><a href="https://sf.snu.ac.kr/promise-concurrency/">promising semantics</a> 是一种 Relaxed Memory Model，对 relaxed behaviors &amp; orderings 进行建模。它有下面的四个 Key idea：</p><ul><li>modeling load hoisting w&#x2F; <strong>multi-valued memory</strong>：Allowing a thread to read an old value from a location；</li><li>modeling read-modify-write w&#x2F; <strong>message adjacency</strong>：Forbidding multiple read-modify-writes of a single value；</li><li>modeling coherence &amp; ordering w&#x2F; <strong>views</strong>：Constraining a thread’s behavior；</li><li>modeling store hoisting w&#x2F; <strong>promises</strong>：Allowing a thread to speculatively write a value。</li></ul><h3 id="multi-valued-memory"><a href="#multi-valued-memory" class="headerlink" title="multi-valued memory"></a>multi-valued memory</h3><p>在 promising semantics 中内存是 location 到 list message 的映射，message 由 value 和 timestamp 组成。因此线程可以从一个 location 读取一个 old value。</p><p>multi-values memory 的目的是为 load hoisting 建模，例如 Load hoisting（r1&#x3D;r2&#x3D;0 allowed by reading old values from X and Y）：</p><img src="/2022/11/27/relaxed-memory-concurrency/multi-value-memory-1.png" class=""><p>假设线程1先执行 <code>X = 1</code>，插入一条 <code>X = 1</code> 的 message：</p><img src="/2022/11/27/relaxed-memory-concurrency/multi-value-memory-2.png" class=""><p>线程2执行 <code>Y = 1</code>，插入一条 <code>Y = 1</code> 的 message：</p><img src="/2022/11/27/relaxed-memory-concurrency/multi-value-memory-3.png" class=""><p>线程1执行 <code>r1 = Y</code>，可以读到 <code>Y = 0</code> message，因此 <code>r1 = 0</code>：</p><img src="/2022/11/27/relaxed-memory-concurrency/multi-value-memory-4.png" class=""><p>线程2执行 <code>r2 = X</code>，可以读到 <code>X = 0</code> message，因此 <code>r2 = 0</code>：</p><img src="/2022/11/27/relaxed-memory-concurrency/multi-value-memory-5.png" class=""><p>综上所述，在 multi-value memory 中，从 <code>X</code> 和 <code>Y</code> 中可以读取 old value，<code>r1 = r2 = 0</code> 是可以出现的。</p><p>从 reordering 的角度考虑，线程1中的 <code>X = 1; r1 = Y</code> 可以被重排序，线程2中的 <code>Y = 1; r2 = X</code> 可以被重排序，因此 <code>r1 = r2 = 0</code> 可以出现，这也被称为 load hoisting。</p><p>在 x86 平台中，允许 Store-Load 重排序，因此可以用下面这段真实的程序验证 load hoisting：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::thread;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">mut</span> R1: <span class="hljs-type">i32</span> = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">mut</span> R2: <span class="hljs-type">i32</span> = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">mut</span> X: <span class="hljs-type">i32</span> = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">mut</span> Y: <span class="hljs-type">i32</span> = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">total</span> = <span class="hljs-number">2000000</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">count</span> = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">_</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..total &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-title function_ invoke__">test_load_hoisting</span>() &#123;<br>            count += <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;load hoisting happens &#123;count&#125; times in &#123;total&#125; running.&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">test_load_hoisting</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">bool</span> &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">handle1</span> = thread::<span class="hljs-title function_ invoke__">spawn</span>(|| &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            X = <span class="hljs-number">1</span>;<br>            R1 = Y;<br>        &#125;<br>    &#125;);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">handle2</span> = thread::<span class="hljs-title function_ invoke__">spawn</span>(|| &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            Y = <span class="hljs-number">1</span>;<br>            R2 = X;<br>        &#125;<br>    &#125;);<br>    <br>    handle1.<span class="hljs-title function_ invoke__">join</span>().<span class="hljs-title function_ invoke__">unwrap</span>();<br>    handle2.<span class="hljs-title function_ invoke__">join</span>().<span class="hljs-title function_ invoke__">unwrap</span>();<br><br>    <span class="hljs-keyword">unsafe</span> &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">res</span> = R1 == <span class="hljs-number">0</span> &amp;&amp; R2 == <span class="hljs-number">0</span>;<br>        R1 = <span class="hljs-number">0</span>;<br>        R2 = <span class="hljs-number">0</span>;<br>        X = <span class="hljs-number">0</span>;<br>        Y = <span class="hljs-number">0</span>;<br><br>        res<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行2000000次，发生了1次重排序：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">PS C:\Users\<span class="hljs-number">25864</span>\Desktop\relaxed_memory_concurrency&gt; cargo <span class="hljs-built_in">run</span> <span class="hljs-comment">--release</span><br>   <br>load hoisting happens <span class="hljs-number">1</span> <span class="hljs-keyword">times</span> <span class="hljs-keyword">in</span> <span class="hljs-number">2000000</span> <span class="hljs-built_in">running</span>.<br></code></pre></td></tr></table></figure><h3 id="message-adjacency"><a href="#message-adjacency" class="headerlink" title="message adjacency"></a>message adjacency</h3><p>为了对 read-modify-write 指令进行建模，需要对 message 增加限制，在 multi-value memory 中 message 的 timestamp 仅仅只一个点，而在 message adjacency 中 message 的 timestamp 具有范围。</p><p>message adjacency 对 RMW 指令进行建模，在执行 Read-Modify-writes 指令时，应该把一个新的 message 邻接到旧的 message 右边。例如 counter（r1&#x3D;r2&#x3D;0 forbidden）：</p><img src="/2022/11/27/relaxed-memory-concurrency/message-adjacency-1.png" class=""><p>线程1执行 <code>r1 = X.fetch_add(1)</code>，将 <code>X = 1</code> 的 message 邻接到 <code>X = 0</code> 的 message 的右边，此时 <code>r1 = 0</code>：</p><img src="/2022/11/27/relaxed-memory-concurrency/message-adjacency-2.png" class=""><p>线程2执行 <code>r2 = X.fetch_add(1)</code>，因为 <code>X = 0</code> 这条 message 已经被邻接了，因此 <code>X = 2</code> message 只能邻接到 <code>X = 1</code> message 的右边，因此只能读到 <code>X = 1</code> message，此时 <code>r2 = 1</code>：</p><img src="/2022/11/27/relaxed-memory-concurrency/message-adjacency-3.png" class=""><p>综上所述，<code>r1 = r2 = 0</code> 结果不可能出现，符合 RMW 指令的语义。</p><h3 id="views"><a href="#views" class="headerlink" title="views"></a>views</h3><p>multi-valued memory 允许太多的 unintended behaviors，当涉及到 coherence 和 synchronization 时需要增加限制。view 是 location 到 timestamp 的映射，表示 message 的确认。一共有三种 view：</p><ul><li><strong>Per-thread</strong> <strong>view</strong> for coherence；</li><li><strong>Per-message view</strong> for release&#x2F;acquire synchronization；</li><li><strong>A global view</strong> for SC synchronization。</li></ul><h4 id="Per-thread-view"><a href="#Per-thread-view" class="headerlink" title="Per-thread view"></a>Per-thread view</h4><p>Per-thread view 表示一个线程对 message 的确认，要求 reading&#x2F;writing 发生在当前线程的 view 之后，并且 reading&#x2F;writing 会改变当前线程的 view。</p><p>Per-thread view 用于建模 per-location coherence：</p><ul><li>RR coherence：X&#x3D;1 || r1&#x3D;X; r2&#x3D;X [r1&#x3D;1,r2&#x3D;0 impossible]</li><li>RW coherence:：r&#x3D;X; X&#x3D;1 [r&#x3D;0]</li><li>WR coherence:：X&#x3D;1; r&#x3D;X [r&#x3D;1]</li><li>WW coherence:：X&#x3D;1; X&#x3D;2 [X&#x3D;2 at the end]</li></ul><img src="/2022/11/27/relaxed-memory-concurrency/per-thread-view-1.png" class=""><p>以 WR coherence为例，执行代码 <code>X=1; r=X </code>：初始的线程 view 为 X &#x3D; 0 &amp; Y &#x3D; 0，当执行 <code>X = 1</code> 时，会插入一条 <code>X = 1</code> message，之后线程 view 变为 X &#x3D; 1 &amp; Y &#x3D; 0，此时再执行 <code>r = X</code>，由于 reading&#x2F;writing 只能发生在当前线程的 view 之后，因此一定会有 <code>r = 1</code>。这样就完成了对 WR coherence 的建模。</p><h4 id="Per-message-view"><a href="#Per-message-view" class="headerlink" title="Per-message view"></a>Per-message view</h4><p>Per-message view 表示执行 <code>AtomicType.store(T, release)</code> 产生的 released view，用于建模 release&#x2F;acquire synchronization。例如 message passing （X&#x3D;1 should be acknowledged after reading Y&#x3D;1）：</p><img src="/2022/11/27/relaxed-memory-concurrency/per-message-view-1.png" class=""><p>线程1执行 <code>X = 1</code>，插入 <code>X=1</code> message，线程1的视图变为 X &#x3D; 1 &amp; Y &#x3D; 0：</p><img src="/2022/11/27/relaxed-memory-concurrency/per-message-view-2.png" class=""><p>线程1执行 <code>Y.store(1, release)</code>，插入 <code>Y=1</code> message，线程1的视图变为 X &#x3D; 1 &amp; Y &#x3D; 1，由于使用了 release，生成了一个 message view：X &#x3D; 1 &amp; Y &#x3D; 1：</p><img src="/2022/11/27/relaxed-memory-concurrency/per-message-view-3.png" class=""><p>线程2执行 <code>Y.load(acquire)</code>，假设线程2读到 <code>Y=1</code> message，线程2的视图变为 X &#x3D; 0 &amp; Y &#x3D; 1，由于使用了 acquire，message view 会合并到线程2的 view 中，因此线程2的视图变为 X &#x3D; 1 &amp; Y &#x3D; 1：</p><img src="/2022/11/27/relaxed-memory-concurrency/per-message-view-4.png" class=""><p>线程2执行 <code>assert(X == 1);</code>，此时线程2的 view 为 X &#x3D; 1 &amp; Y &#x3D; 1，因此会读取 X&#x3D;1 message，断言执行成功：</p><img src="/2022/11/27/relaxed-memory-concurrency/per-message-view-5.png" class=""><p>可以看出，通过 Release&#x2F;Acquire 的使用，可以实现 message 在不同线程之间的传递。</p><h4 id="Global-view"><a href="#Global-view" class="headerlink" title="Global view"></a>Global view</h4><p>Global view 表示 SC fence 的当前累积 view，在一个 SC fence 之后，SC view 和 thread view 成为它们之中的最大者。Global view 用于建模 SC-fence synchronization，例如 message passing （X&#x3D;1 should be acknowledged after reading Y&#x3D;1）：</p><img src="/2022/11/27/relaxed-memory-concurrency/global-view-1.png" class=""><p>线程1执行 <code>X = 1</code>，插入 X &#x3D; 1 message，线程1的 view 变为 X &#x3D; 1 &amp; Y &#x3D; 0：</p><img src="/2022/11/27/relaxed-memory-concurrency/global-view-2.png" class=""><p>线程1执行 <code>fence(SC)</code>，SC view 和 thread1 view 成为它们之间的最大者，因为此时 SC view 不存在，因此 thread1 view 保持不变，SC view 变为 X &#x3D; 1 &amp; Y &#x3D; 0：</p><img src="/2022/11/27/relaxed-memory-concurrency/global-view-3.png" class=""><p>线程1执行 <code>Y.store(1, relaxed)</code>，插入 Y &#x3D; 1 message，线程1的 view 变为 X &#x3D; 1 &amp; Y &#x3D; 1：</p><img src="/2022/11/27/relaxed-memory-concurrency/global-view-4.png" class=""><p>线程2执行 <code>Y.load(relaxed)</code>，假设线程2读到 Y &#x3D; 1 message，线程2的 view 变为 X &#x3D; 0 &amp; Y &#x3D; 1：</p><img src="/2022/11/27/relaxed-memory-concurrency/global-view-5.png" class=""><p>线程2执行 <code>fence(SC)</code>，SC view 和 thread2 view 成为它们之间的最大者，因此 thread2 view 变为 X &#x3D; 1 &amp; Y &#x3D; 1，SC view 变为 X &#x3D; 1 &amp; Y &#x3D; 1：</p><img src="/2022/11/27/relaxed-memory-concurrency/global-view-6.png" class=""><p>线程2执行 <code>assert(X == 1)</code>，此时线程2的 view 为 X &#x3D; 1 &amp; Y &#x3D; 1，因此线程2会读到 X &#x3D; 1 message，断言执行成功。</p><p>总结：通过 SC fence 的使用，也可以实现 message 在不同线程之间的传递。</p><h3 id="promises"><a href="#promises" class="headerlink" title="promises"></a>promises</h3><h4 id="Store-hoisting"><a href="#Store-hoisting" class="headerlink" title="Store hoisting"></a>Store hoisting</h4><p>与 load hoisting、RMW、coherence、synchronization 不同，store hoisting 更为复杂，涉及到以下三种情况：</p><p>（1）Store hoisting w&#x2F;o dependency（r1&#x3D;r2&#x3D;1 allowed by reordering in the right）</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust">r1=X    ||    r2=Y<br>Y=r1    ||    X=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>线程2中 X 写入的值不依赖于其他指令，由于 Load-Store reordering，可以观察到 r1 &#x3D; r2 &#x3D; 1。</p><p>（2）Store hoisting w&#x2F; dependency（r1&#x3D;r2&#x3D;1 disallowed, “out of thin air” (OOTA)）</p><p>线程2中 X 写入的值依赖于上一条指令读取的值，此时不允许观察到 r1 &#x3D; r2 &#x3D; 1。如果 r1 &#x3D; r2 &#x3D; 1，则出现了 OOTA（out of thin air）behavior，那么我们将无法推断并发程序的正确性。</p><p>（3）Store hoisting w&#x2F; syntactic dependency（r1&#x3D;r2&#x3D;1 allowed by compiler opt）</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust">r1=X    ||    r2=Y<br>Y=r1    ||    <span class="hljs-keyword">if</span> r2==<span class="hljs-number">1</span>  &#123; X=r2 &#125;   <span class="hljs-comment">// “if” should be taken for the behavior,</span><br>              <span class="hljs-keyword">else</span>       &#123; X=<span class="hljs-number">1</span>  &#125;   <span class="hljs-comment">// but looks like OOTA</span><br></code></pre></td></tr></table></figure><p>从表面上来看，线程2中 X 写入的值依赖于上一条指令，但是<code>if r2 == 1 &#123; X = r2 &#125; else &#123; X = 1 &#125;</code> 无论执行哪个分治都有 <code>X = 1</code>，因此编译器可能会将其直接优化成：<code>X = 1</code>，这样就变成了情况（1）了：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust">r1=X    ||    r2=Y<br>Y=r1    ||    X=<span class="hljs-number">1</span><span class="hljs-comment">// if r2 == 1 &#123; X = r2 &#125; else &#123; X = 1 &#125;</span><br></code></pre></td></tr></table></figure><p>优化之后的代码，线程2写入的值不依赖于其他指令，由于 Load-Store reordering，也可以观察到 r1 &#x3D; r2 &#x3D; 1。</p><p>这里的难点就是，我们需要找到一个好的 semantic model，其允许（1）和（3）但是不允许（2）。</p><h4 id="modeling"><a href="#modeling" class="headerlink" title="modeling"></a>modeling</h4><p>promises 对 store hoisting 建模：</p><ul><li><strong>Goal:</strong> allowing the hoisting of <strong>semantically independent writes</strong> only</li><li><strong>Idea:</strong> “semantically independent writes” are <strong>always writable</strong> in the future</li><li><strong>Mechanism</strong><ul><li>A thread may speculatively write a value (“promise to write”)</li><li>A thread should <strong>always be able to write its promises</strong> in the future</li></ul></li></ul><p>（1）例一：store hoisting w&#x2F;o dependency（r1&#x3D;r2&#x3D;1 allowed by reordering in the thread 2）</p><img src="/2022/11/27/relaxed-memory-concurrency/promises-1-1.png" class=""><p>线程2 promise to write X &#x3D; 1，插入 X &#x3D; 1 message：</p><img src="/2022/11/27/relaxed-memory-concurrency/promises-1-2.png" class=""><p>为了验证线程2可以完成 promise write，需要屏蔽掉线程1：</p><img src="/2022/11/27/relaxed-memory-concurrency/promises-1-5.png" class=""><p>线程2执行 <code>r2=Y</code>，读取 <code>Y = 0</code> message，线程2视图保持不变。接着，线程2执行 <code>X = 1</code>，插入 X &#x3D; 1 message，兑现 promise write，线程2的视图更新为 X &#x3D; 1 &amp; Y &#x3D; 0：</p><img src="/2022/11/27/relaxed-memory-concurrency/promises-1-6.png" class=""><p>promise write 得到验证，将线程2的视图还原，并将 X &#x3D; 1 message 标记为 Certified：</p><img src="/2022/11/27/relaxed-memory-concurrency/promises-1-7.png" class=""><p>线程1执行 <code>r1 = X</code>，假设读取 X &#x3D; 1 message，则线程1的视图更新为 X &#x3D; 1 &amp; Y &#x3D; 0：</p><img src="/2022/11/27/relaxed-memory-concurrency/promises-1-8.png" class=""><p>线程1执行 <code>Y = r1</code>，插入 Y &#x3D; 1 message，线程1的视图更新为 X &#x3D; 1 &amp; Y &#x3D; 1：</p><img src="/2022/11/27/relaxed-memory-concurrency/promises-1-9.png" class=""><p>线程2执行 <code>r2 = Y</code>，假设读取 Y &#x3D; 1 message，则线程2的视图更新为 X &#x3D; 0 &amp; Y &#x3D; 1：</p><img src="/2022/11/27/relaxed-memory-concurrency/promises-1-10.png" class=""><p>线程2可以执行 <code>X = 1</code> 兑现 promise write，因此 promise 得到二次验证，将 X &#x3D; 1 message 标记为 Re-Certified：</p><img src="/2022/11/27/relaxed-memory-concurrency/promises-1-11.png" class=""><p>线程2执行 <code>X = 1</code>，兑现 promise write，线程2的视图更新为 X &#x3D; 1 &amp; Y &#x3D; 1：</p><img src="/2022/11/27/relaxed-memory-concurrency/promises-1-12.png" class=""><p>（2）例二：store hoisting w&#x2F; dependency（r1&#x3D;r2&#x3D;1 disallowed, OOTA）</p><img src="/2022/11/27/relaxed-memory-concurrency/promises-2-1.png" class=""><p>线程2 promise to write X &#x3D; 1，插入 X &#x3D; 1 message。屏蔽线程1，线程2执行 <code>r2 = Y</code> 读取 Y &#x3D; 0 message，因此 r2 &#x3D; 0。线程2执行 <code>X = r2</code>，因为 r2 &#x3D; 0，线程2无法兑现 promise write，执行失败。</p><p>因此 r1 &#x3D; r2 &#x3D; 1 不可能成立。</p><p>（3）例三：store hoisting w&#x2F; syntactic dependency（r1&#x3D;r2&#x3D;1 allowed）</p><img src="/2022/11/27/relaxed-memory-concurrency/promises-3-1.png" class=""><p>线程2 promise to write X &#x3D; 1，插入 X &#x3D; 1 message：</p><img src="/2022/11/27/relaxed-memory-concurrency/promises-3-2.png" class=""><p>为了验证线程2可以兑现 promise write，需要屏蔽掉线程1：</p><img src="/2022/11/27/relaxed-memory-concurrency/promises-3-5.png" class=""><p>线程2执行 <code>r2=Y</code>，读取 <code>Y = 0</code> message，线程2视图保持不变。接着，线程2进入 else 分支，执行 <code>X = 1</code>，插入 X &#x3D; 1 message，兑现 promise write，线程2的视图更新为 X &#x3D; 1 &amp; Y &#x3D; 0：</p><img src="/2022/11/27/relaxed-memory-concurrency/promises-3-6.png" class=""><p>promise write 得到验证，将线程2的视图还原，并将 X &#x3D; 1 message 标记为 Certified：</p><img src="/2022/11/27/relaxed-memory-concurrency/promises-3-7.png" class=""><p>线程1执行 <code>r1 = X</code>，假设读取 X &#x3D; 1 message，则线程1的视图更新为 X &#x3D; 1 &amp; Y &#x3D; 0：</p><img src="/2022/11/27/relaxed-memory-concurrency/promises-3-8.png" class=""><p>线程1执行 <code>Y = r1</code>，插入 Y &#x3D; 1 message，线程1的视图更新为 X &#x3D; 1 &amp; Y &#x3D; 1：</p><img src="/2022/11/27/relaxed-memory-concurrency/promises-3-9.png" class=""><p>线程2执行 <code>r2 = Y</code>，假设读取 Y &#x3D; 1 message，则线程2的视图更新为 X &#x3D; 0 &amp; Y &#x3D; 1：</p><img src="/2022/11/27/relaxed-memory-concurrency/promises-3-10.png" class=""><p>因为 <code>r2 = 1</code>，线程2执行 <code>if r2 == 1</code> 进入 if 分支内部，接着可执行 <code>X = r2</code> 兑现 promise write，因此 promise 得到二次验证，将 X &#x3D; 1 message 标记为 Re-Certified：</p><img src="/2022/11/27/relaxed-memory-concurrency/promises-3-11.png" class=""><p>最后，线程2执行 <code>X = r2</code>，兑现 promise write，线程2的视图更新为 X &#x3D; 1 &amp; Y &#x3D; 1：</p><img src="/2022/11/27/relaxed-memory-concurrency/promises-3-12.png" class=""><p>（4）例四：store hoisting w&#x2F; syntactic dependency（r1&#x3D;r2&#x3D;r3&#x3D;1 disallowed due to RW coherence）</p><p>线程2 promise to write X &#x3D; 1，并验证 promise（验证过程与前面的例子一致，这里跳过）：</p><img src="/2022/11/27/relaxed-memory-concurrency/promises-4-1.png" class=""><p>线程1执行 <code>r1 = X</code>，假设读到 X &#x3D; 1 message，则线程1的视图变为 X &#x3D; 1 &amp; Y &#x3D; 0：</p><img src="/2022/11/27/relaxed-memory-concurrency/promises-4-2.png" class=""><p>线程1执行 <code>Y = r1</code>，插入 Y &#x3D; 1 message，线程1的视图变为 X &#x3D; 1 &amp; Y &#x3D; 1：</p><img src="/2022/11/27/relaxed-memory-concurrency/promises-4-3.png" class=""><p>线程2执行 <code>r2=Y</code>，读取 <code>Y = 1</code> message，线程2的视图变为 X &#x3D; 0 &amp; Y &#x3D; 1。接着，线程2执行 <code>r3 = X</code>，假设读到 X &#x3D; 1 message，则线程2的视图变为 X &#x3D; 1 &amp; Y &#x3D; 1：</p><img src="/2022/11/27/relaxed-memory-concurrency/promises-4-4.png" class=""><p>由于 <code>r2 = 1</code>，因此进入 if 分支内部执行 <code>X = r2</code>，由于线程2的视图已经变为 X &#x3D; 1 &amp; Y &#x3D; 1，因此只能在当前视图的右边插入新的 X &#x3D; 1 message，那么就无法兑现 promise write，执行失败：</p><img src="/2022/11/27/relaxed-memory-concurrency/promises-4-5.png" class=""><p>因此 r1 &#x3D; r2 &#x3D; r3 &#x3D; 1 不可能成立。</p><h3 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h3><p>Promising semantics is an operational semantics modeling relaxed behaviors and orderings.</p><p><strong>Key ideas</strong></p><ul><li><strong>Multi-valued memory:</strong> modeling load hoisting</li><li><strong>Message adjacency:</strong> modeling read-modify-write</li><li><strong>Views:</strong> modeling coherence and synchronization</li><li><strong>Promises:</strong> modeling store hoisting</li></ul><h2 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h2><h3 id="Spin-lock"><a href="#Spin-lock" class="headerlink" title="Spin lock"></a>Spin lock</h3><p>Spin lock 代码：<a href="https://github.com/kaist-cp/cs431/blob/main/src/lock/spinlock.rs%E3%80%82">https://github.com/kaist-cp/cs431/blob/main/src/lock/spinlock.rs。</a> 关键方法：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">lock</span>(&amp;<span class="hljs-keyword">self</span>) &#123; <br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">self</span>.inner.<span class="hljs-title function_ invoke__">cas</span>(<span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>, acquire).<span class="hljs-title function_ invoke__">is_err</span>() &#123;&#125; <br>&#125;<br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">unlock</span>(&amp;<span class="hljs-keyword">self</span>) &#123; <br>    <span class="hljs-keyword">self</span>.inner.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-literal">false</span>, release);            <br>&#125;<br></code></pre></td></tr></table></figure><p>Lock Guarantee：</p><ul><li>If a lock has already been acquired, lock() will spin.</li><li>Events between lock &amp; unlock are transferred via release&#x2F;acquire synch.</li><li>When holding the lock, you’ll access the latest value of D (no shared access).</li></ul><p>L 表示锁的状态，F 表示锁没有被占用，T 表示锁被占用了。D 表示锁保护的数据。绿色线条表示线程1 view，黑色线条表示线程2 view，黄色线条表示 message view。初始状态下，线程1的 view 和线程2的 view 相同：L &#x3D; F &amp; D &#x3D; Something1，message view 为上一个线程是否锁后产生的：</p><img src="/2022/11/27/relaxed-memory-concurrency/spin-lock-1.png" class=""><p>线程1调用 <code>lock</code> 函数获取锁，执行 <code>cas(false, true, acquire)</code> 操作，读取 L &#x3D; F message，因此 cas 操作执行成功，邻接 L &#x3D; T message，由于使用了 acquire，message view 会合并到线程1的 view 中，线程1的 view 变为 L &#x3D; T &amp; D &#x3D; Something1：</p><img src="/2022/11/27/relaxed-memory-concurrency/spin-lock-2.png" class=""><p>线程1持有锁，并修改 D，插入 D &#x3D; Something2 message，线程1的view 变为 L &#x3D; T &amp; D &#x3D; Something2：</p><img src="/2022/11/27/relaxed-memory-concurrency/spin-lock-3.png" class=""><p>线程2调用 <code>lock</code> 函数获取锁，由于 L &#x3D; F message 已经被邻接了，只能读到 L &#x3D; T message，因此 cas 操作失败，进入 while 循环自旋，由于使用了 acquire，message view 会合并到线程2的 view 中，线程2的 view 变为 L &#x3D; T &amp; D &#x3D; Something1：</p><img src="/2022/11/27/relaxed-memory-concurrency/spin-lock-4.png" class=""><p>线程1调用 <code>unlock</code> 函数释放锁，执行 <code>store(false, release)</code> 操作，插入 L &#x3D; F message，线程1的视图变为 L &#x3D; F &amp; D &#x3D; Something2，由于使用了 release，会生成 message view：L &#x3D; F &amp; D &#x3D; Something2：</p><img src="/2022/11/27/relaxed-memory-concurrency/spin-lock-5.png" class=""><p>线程2调用 <code>lock</code> 函数获取锁，执行 <code>cas(false, true, acquire)</code> 操作，假设读到第二个 L &#x3D; F message，因此 cas 操作执行成功，邻接 L &#x3D; T message，由于使用了 acquire，message view 会合并到线程2的 view 中，线程2的 view 变为 L &#x3D; T &amp; D &#x3D; Something2：</p><img src="/2022/11/27/relaxed-memory-concurrency/spin-lock-6.png" class=""><p>线程2持有锁，并修改 D，插入 D &#x3D; Something3 message，线程2的view 变为 L &#x3D; T &amp; D &#x3D; Something3：</p><img src="/2022/11/27/relaxed-memory-concurrency/spin-lock-7.png" class=""><p>线程2调用 <code>unlock</code> 函数释放锁，执行 <code>store(false, release)</code> 操作，插入 L &#x3D; F message，线程2的视图变为 L &#x3D; F &amp; D &#x3D; Something3，由于使用了 release，会生成 message view：L &#x3D; F &amp; D &#x3D; Something3：</p><img src="/2022/11/27/relaxed-memory-concurrency/spin-lock-8.png" class=""><p>最后，全图执行流程如下所示：</p><img src="/2022/11/27/relaxed-memory-concurrency/spin-lock-9.png" class=""><p>综上所述，线程1和线程2持有锁的 timestamp 区间不相交，因此多个线程不会同时读写锁保护的数据，并且当一个线程持有锁时，另一个线程尝试获取锁则会进入自旋。此外，通过 Release&#x2F;Acquire 实现了 message passing，保证当一个线程持有锁时，访问到的是最新的数据。</p><h3 id="Ticket-lock"><a href="#Ticket-lock" class="headerlink" title="Ticket lock"></a>Ticket lock</h3><p>待定。。。。。。</p><h3 id="CLH-lock"><a href="#CLH-lock" class="headerlink" title="CLH lock"></a>CLH lock</h3><p>待定。。。。。</p>]]></content>
    
    
    <categories>
      
      <category>concurrent</category>
      
      <category>rust</category>
      
    </categories>
    
    
    <tags>
      
      <tag>consistency</tag>
      
      <tag>rust</tag>
      
      <tag>note</tag>
      
      <tag>concurrent</tag>
      
      <tag>lock-free</tag>
      
      <tag>relaxed memory</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cacher and Blog</title>
    <link href="/2022/11/19/cacher-blog/"/>
    <url>/2022/11/19/cacher-blog/</url>
    
    <content type="html"><![CDATA[<p>最近闲着没事，又把 The Rust Book 看了一遍， 把第13章中的 <code>Cacher</code> 和第17章中的 <code>Blog</code> 例子完善了一下。</p><h2 id="Cacher"><a href="#Cacher" class="headerlink" title="Cacher"></a>Cacher</h2><p>在原版的基础上进行改进：</p><ul><li>使用 <code>HashMap</code> 存储 <code>arg</code> 到 <code>value</code> 的映射，对不同的 <code>arg</code> 参数缓存不同的值；</li><li>闭包中使用泛型参数，因此 <code>Cacher</code> 还可以缓存其他类型的值。</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::collections::HashMap;<br><span class="hljs-keyword">use</span> std::hash::Hash;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Cacher</span>&lt;T, U&gt;<br><span class="hljs-keyword">where</span><br>    T: <span class="hljs-title function_ invoke__">Fn</span>(U) <span class="hljs-punctuation">-&gt;</span> U,<br>    U: <span class="hljs-built_in">Clone</span> + <span class="hljs-built_in">Eq</span> + Hash,<br>&#123;<br>    calculation: T,<br>    value: HashMap&lt;U, U&gt;,<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T, U&gt; Cacher&lt;T, U&gt;<br><span class="hljs-keyword">where</span><br>    T: <span class="hljs-title function_ invoke__">Fn</span>(U) <span class="hljs-punctuation">-&gt;</span> U,<br>    U: <span class="hljs-built_in">Clone</span> + <span class="hljs-built_in">Eq</span> + Hash,<br>&#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(calculation: T) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-keyword">Self</span> &#123;<br>            calculation,<br>            value: HashMap::<span class="hljs-title function_ invoke__">new</span>(),<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">value</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>, arg: U) <span class="hljs-punctuation">-&gt;</span> U &#123;<br>        <span class="hljs-keyword">self</span>.value<br>            .<span class="hljs-title function_ invoke__">entry</span>(arg.<span class="hljs-title function_ invoke__">clone</span>())<br>            .<span class="hljs-title function_ invoke__">or_insert_with</span>(|| (<span class="hljs-keyword">self</span>.calculation)(arg))<br>            .<span class="hljs-title function_ invoke__">clone</span>()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h2><p>在原版的基础上进行完善：</p><ul><li>增加 <code>reject</code> 方法将博文的状态从 <code>PendingReview</code> 变回 <code>Draft</code>；</li><li>在将状态变为 <code>Published</code> 之前需要两次 <code>approve</code> 调用；</li><li>只允许博文处于 <code>Draft</code> 状态时增加文本内容。</li></ul><h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Post</span> &#123;<br>    state: <span class="hljs-type">Option</span>&lt;<span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> State&gt;&gt;,<br>    content: <span class="hljs-type">String</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Post</span> &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-keyword">Self</span> &#123;<br>            state: <span class="hljs-title function_ invoke__">Some</span>(Box::<span class="hljs-title function_ invoke__">new</span>(Draft &#123;&#125;)),<br>            content: String::<span class="hljs-title function_ invoke__">new</span>(),<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_text</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>, text: &amp;<span class="hljs-type">str</span>) &#123;<br>        <span class="hljs-keyword">self</span>.content<br>            .<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-keyword">self</span>.state.<span class="hljs-title function_ invoke__">as_ref</span>().<span class="hljs-title function_ invoke__">unwrap</span>().<span class="hljs-title function_ invoke__">add_text</span>(text));<br>    &#125;<br><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">content</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-type">str</span> &#123;<br>        <span class="hljs-keyword">self</span>.state.<span class="hljs-title function_ invoke__">as_ref</span>().<span class="hljs-title function_ invoke__">unwrap</span>().<span class="hljs-title function_ invoke__">content</span>(<span class="hljs-keyword">self</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">request_review</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(s) = <span class="hljs-keyword">self</span>.state.<span class="hljs-title function_ invoke__">take</span>() &#123;<br>            <span class="hljs-keyword">self</span>.state = <span class="hljs-title function_ invoke__">Some</span>(s.<span class="hljs-title function_ invoke__">request_review</span>());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">approve</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(s) = <span class="hljs-keyword">self</span>.state.<span class="hljs-title function_ invoke__">take</span>() &#123;<br>            <span class="hljs-keyword">self</span>.state = <span class="hljs-title function_ invoke__">Some</span>(s.<span class="hljs-title function_ invoke__">approve</span>());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">reject</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(s) = <span class="hljs-keyword">self</span>.state.<span class="hljs-title function_ invoke__">take</span>() &#123;<br>            <span class="hljs-keyword">self</span>.state = <span class="hljs-title function_ invoke__">Some</span>(s.<span class="hljs-title function_ invoke__">reject</span>());<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">request_review</span>(<span class="hljs-keyword">self</span>: <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">Self</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> State&gt;;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">approve</span>(<span class="hljs-keyword">self</span>: <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">Self</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> State&gt;;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">self</span>: <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">Self</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> State&gt;;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">content</span>&lt;<span class="hljs-symbol">&#x27;a</span>&gt;(&amp;<span class="hljs-keyword">self</span>, _post: &amp;<span class="hljs-symbol">&#x27;a</span> Post) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span> &#123;<br>        <span class="hljs-string">&quot;&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_text</span>&lt;<span class="hljs-symbol">&#x27;a</span>&gt;(&amp;<span class="hljs-keyword">self</span>, _text: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span> &#123;<br>        <span class="hljs-string">&quot;&quot;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Draft</span> &#123;&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">State</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Draft</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">request_review</span>(<span class="hljs-keyword">self</span>: <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">Self</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> State&gt; &#123;<br>        Box::<span class="hljs-title function_ invoke__">new</span>(PendingReview &#123;&#125;)<br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">approve</span>(<span class="hljs-keyword">self</span>: <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">Self</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> State&gt; &#123;<br>        <span class="hljs-keyword">self</span><br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">self</span>: <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">Self</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> State&gt; &#123;<br>        <span class="hljs-keyword">self</span><br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_text</span>&lt;<span class="hljs-symbol">&#x27;a</span>&gt;(&amp;<span class="hljs-keyword">self</span>, text: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span> &#123;<br>        text<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">PendingReview</span> &#123;&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">State</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">PendingReview</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">request_review</span>(<span class="hljs-keyword">self</span>: <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">Self</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> State&gt; &#123;<br>        <span class="hljs-keyword">self</span><br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">approve</span>(<span class="hljs-keyword">self</span>: <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">Self</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> State&gt; &#123;<br>        Box::<span class="hljs-title function_ invoke__">new</span>(PrePublished &#123;&#125;)<br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">self</span>: <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">Self</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> State&gt; &#123;<br>        Box::<span class="hljs-title function_ invoke__">new</span>(Draft &#123;&#125;)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">PrePublished</span> &#123;&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">State</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">PrePublished</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">request_review</span>(<span class="hljs-keyword">self</span>: <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">Self</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> State&gt; &#123;<br>        <span class="hljs-keyword">self</span><br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">approve</span>(<span class="hljs-keyword">self</span>: <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">Self</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> State&gt; &#123;<br>        Box::<span class="hljs-title function_ invoke__">new</span>(Published &#123;&#125;)<br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">self</span>: <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">Self</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> State&gt; &#123;<br>        <span class="hljs-keyword">self</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Published</span> &#123;&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">State</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Published</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">request_review</span>(<span class="hljs-keyword">self</span>: <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">Self</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> State&gt; &#123;<br>        <span class="hljs-keyword">self</span><br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">approve</span>(<span class="hljs-keyword">self</span>: <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">Self</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> State&gt; &#123;<br>        <span class="hljs-keyword">self</span><br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">content</span>&lt;<span class="hljs-symbol">&#x27;a</span>&gt;(&amp;<span class="hljs-keyword">self</span>, post: &amp;<span class="hljs-symbol">&#x27;a</span> Post) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span> &#123;<br>        &amp;post.content<br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">self</span>: <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">Self</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> State&gt; &#123;<br>        <span class="hljs-keyword">self</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="状态编码为类型"><a href="#状态编码为类型" class="headerlink" title="状态编码为类型"></a>状态编码为类型</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Post</span> &#123;<br>    content: <span class="hljs-type">String</span>,<br>&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">DraftPost</span> &#123;<br>    content: <span class="hljs-type">String</span>,<br>&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">PendingReviewPost</span> &#123;<br>    content: <span class="hljs-type">String</span>,<br>&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">PrePublished</span> &#123;<br>    content: <span class="hljs-type">String</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Post</span> &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>() <span class="hljs-punctuation">-&gt;</span> DraftPost &#123;<br>        DraftPost &#123;<br>            content: String::<span class="hljs-title function_ invoke__">new</span>(),<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">content</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-type">str</span> &#123;<br>        &amp;<span class="hljs-keyword">self</span>.content<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">DraftPost</span> &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_text</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>, text: &amp;<span class="hljs-type">str</span>) &#123;<br>        <span class="hljs-keyword">self</span>.content.<span class="hljs-title function_ invoke__">push_str</span>(text);<br>    &#125;<br><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">request_review</span>(<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> PendingReviewPost &#123;<br>        PendingReviewPost &#123;<br>            content: <span class="hljs-keyword">self</span>.content,<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">PendingReviewPost</span> &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">approve</span>(<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> PrePublished &#123;<br>        PrePublished &#123;<br>            content: <span class="hljs-keyword">self</span>.content,<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> DraftPost &#123;<br>        DraftPost &#123;<br>            content: <span class="hljs-keyword">self</span>.content,<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">PrePublished</span> &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">approve</span>(<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> Post &#123;<br>        Post &#123;<br>            content: <span class="hljs-keyword">self</span>.content,<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>rust</tag>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Windows 上安装 Rust</title>
    <link href="/2022/09/17/rust-install-windows/"/>
    <url>/2022/09/17/rust-install-windows/</url>
    
    <content type="html"><![CDATA[<h2 id="Step1：安装-Windows-terminal"><a href="#Step1：安装-Windows-terminal" class="headerlink" title="Step1：安装 Windows terminal"></a>Step1：安装 Windows terminal</h2><p>打开 Windows 应用商店，搜索 terminal 并选择第一个搜索结果，然后点击下载即可：</p><img src="/2022/09/17/rust-install-windows/%E5%9B%BE1.png" class=""><h2 id="Step2：安装-Chocolatey"><a href="#Step2：安装-Chocolatey" class="headerlink" title="Step2：安装 Chocolatey"></a>Step2：安装 Chocolatey</h2><p>以管理员的身份打开 Windows terminal，然后输入下面的命令：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Set</span>-ExecutionPolicy Bypass -Scope Process -Force; [<span class="hljs-keyword">System</span>.Net.ServicePointManager]::SecurityProtocol = [<span class="hljs-keyword">System</span>.Net.ServicePointManager]::SecurityProtocol -bor <span class="hljs-number">3072</span>; iex ((<span class="hljs-built_in">New</span>-<span class="hljs-keyword">Object</span> <span class="hljs-keyword">System</span>.Net.WebClient).DownloadString(<span class="hljs-string">&#x27;https://community.chocolatey.org/install.ps1&#x27;</span>))<br></code></pre></td></tr></table></figure><p>安装完成后输入 <code>choco -v</code> 检查版本，如果输出了具体的版本号则表示安装成功。</p><h2 id="Step3：安装-mingw"><a href="#Step3：安装-mingw" class="headerlink" title="Step3：安装 mingw"></a>Step3：安装 mingw</h2><p>以管理员的身份打开 Windows terminal，然后输入下面的命令：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">choco <span class="hljs-keyword">install</span> mingw -y<br></code></pre></td></tr></table></figure><p>安装完成后输入 <code>gcc --version</code> 和 <code>g++ --version</code>，如果出现如下的输出则表示安装成功：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">PS C:\Users\<span class="hljs-number">25864</span>&gt; gcc --version<br>gcc.exe (MinGW-W64 x86_64-posix-<span class="hljs-keyword">seh, </span><span class="hljs-keyword">built </span><span class="hljs-keyword">by </span><span class="hljs-keyword">Brecht </span>Sanders) <span class="hljs-number">11</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span><br>Copyright (C) <span class="hljs-number">2021</span> Free Software Foundation, Inc.<br>This is free software<span class="hljs-comment">; see the source for copying conditions.  There is NO</span><br>warranty<span class="hljs-comment">; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br><br>PS C:\Users\<span class="hljs-number">25864</span>&gt; g++ --version<br>g++.exe (MinGW-W64 x86_64-posix-<span class="hljs-keyword">seh, </span><span class="hljs-keyword">built </span><span class="hljs-keyword">by </span><span class="hljs-keyword">Brecht </span>Sanders) <span class="hljs-number">11</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span><br>Copyright (C) <span class="hljs-number">2021</span> Free Software Foundation, Inc.<br>This is free software<span class="hljs-comment">; see the source for copying conditions.  There is NO</span><br>warranty<span class="hljs-comment">; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br></code></pre></td></tr></table></figure><h2 id="Step4：安装-Rust"><a href="#Step4：安装-Rust" class="headerlink" title="Step4：安装 Rust"></a>Step4：安装 Rust</h2><p>打开 Rust 的官网：<a href="https://www.rust-lang.org/zh-CN/tools/install">https://www.rust-lang.org/zh-CN/tools/install</a> ，点击下载 RUSTUP-INIT.EXE（64位）：</p><img src="/2022/09/17/rust-install-windows/%E5%9B%BE2.png" class=""><p>打开刚刚下载完的可执行文件：</p><img src="/2022/09/17/rust-install-windows/%E5%9B%BE3.png" class=""><p>选择 3) Don’t install the prerequisites：</p><img src="/2022/09/17/rust-install-windows/%E5%9B%BE4.png" class=""><p>选择 2) Customize installation：</p><img src="/2022/09/17/rust-install-windows/%E5%9B%BE5.png" class=""><p>接下来会输入四个可选项：</p><img src="/2022/09/17/rust-install-windows/%E5%9B%BE6.png" class=""><p>然后输入 1 即可开始安装。</p><h2 id="Step5：验证是否安装成功"><a href="#Step5：验证是否安装成功" class="headerlink" title="Step5：验证是否安装成功"></a>Step5：验证是否安装成功</h2><p>打开 Windows terminal，输入 <code>rustc --version --verbose</code>，如果出现如下输出则表示安装成功：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust">PS C:\Users\<span class="hljs-number">25864</span>&gt; rustc --version --verbose<br>rustc <span class="hljs-number">1.65</span>.<span class="hljs-number">0</span>-<span class="hljs-title function_ invoke__">nightly</span> (<span class="hljs-number">95</span>a992a68 <span class="hljs-number">2022</span>-<span class="hljs-number">09</span>-<span class="hljs-number">16</span>)<br>binary: rustc<br>commit-hash: <span class="hljs-number">95</span>a992a68694d8bf3959bd2c0ac27ce9e9208b59<br>commit-date: <span class="hljs-number">2022</span>-<span class="hljs-number">09</span>-<span class="hljs-number">16</span><br>host: x86_64-pc-windows-gnu<br>release: <span class="hljs-number">1.65</span>.<span class="hljs-number">0</span>-nightly<br>LLVM version: <span class="hljs-number">15.0</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>最后通过安装一个 Rust 命令行工具来查看 Cargo 是否正常工作。在 Windows terminal 中输入 <code>cargo install onefetch</code>，如果出现如下输出则表示 Cargo 能够正常工作：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"> ......<br> ......<br> Compiling ansi_term v0.<span class="hljs-number">12.1</span><br> Compiling owo-colors v3.<span class="hljs-number">5.0</span><br> Compiling zstd v0.<span class="hljs-number">11.2</span>+zstd.<span class="hljs-number">1.5</span>.<span class="hljs-number">2</span><br> Compiling askalono v0.<span class="hljs-number">4.6</span><br> Compiling git2 v0.<span class="hljs-number">14.4</span><br> Compiling onefetch v2.<span class="hljs-number">12.0</span><br>  Finished release [optimized] <span class="hljs-title function_ invoke__">target</span>(s) <span class="hljs-keyword">in</span> <span class="hljs-number">5</span>m <span class="hljs-number">59</span>s<br>Installing C:\Users\<span class="hljs-number">25864</span>\.cargo\bin\onefetch.exe<br> Installed package `onefetch v2.<span class="hljs-number">12.0</span>` (executable `onefetch.exe`)<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://chocolatey.org/install#individual">https://chocolatey.org/install#individual</a></li><li><a href="https://www.rust-lang.org/zh-CN/tools/install">https://www.rust-lang.org/zh-CN/tools/install</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>rust</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rust</tag>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sharded Key/Value Service</title>
    <link href="/2022/09/02/Sharded-Key-Value-Service/"/>
    <url>/2022/09/02/Sharded-Key-Value-Service/</url>
    
    <content type="html"><![CDATA[<p>6.824 的 LAB 4 的内容是构建一个分片的分布式 KV 存储系统。分片是 Key&#x2F;Value 对的子集。例如，所有以 “a” 开头的 Key 可能是一个分片，所有以 “b” 开头的 Key 可能是另一个分片。分片的目的是获取更好的性能，每个副本组只负责几个分片的 puts 和 gets，当访问的分片处于不同的副本组时，这些操作就可以并行地执行。因此，系统的总吞吐量与副本组的数量成正比。</p><p>分片 KV 存储系统包括两个主要组件：</p><ul><li>一组副本组。每个副本组负责分片的一个子集，并由少数使用 Raft 复制分片的服务器组成；</li><li>分片控制器。分片控制器决定一个副本组负责哪些分片，这个信息被称为配置。客户端询问分片控制器找到 Key 对应的副本组，副本组询问分片控制器找到要服务的分片。整个系统有一个单一的分片控制器，使用 Raft    作为容错服务实现。</li></ul><p>LAB 4 实验的主要挑战将是处理重新配置——将分片分配给副本组的更改。在一个副本组中，所有的服务器必须就何时应用新的配置达成一致。例如，Put 可能与重新配置同时到达，导致副本组不再负责对应的 Key。副本组中的服务器必须就 Put 发生在重新配置之前还是之后达成一致。如果之前，Put 应该生效，分片的新所有者应该看到它的效果；如果之后，Put 将不会生效，客户端必须在新所有者处重新尝试。</p><p>重新配置还需要副本组之间的交互。例如，在配置 10 中，副本组 G1 可能负责分片 S1。在配置 11 中，副本组 G2 可能负责分片 S1。在从 10 到 11 的重新配置过程中，G1 和 G2 必须使用 RPC 将分片 S1 从 G1 移动到 G2。</p><h2 id="LAB-4A"><a href="#LAB-4A" class="headerlink" title="LAB 4A"></a>LAB 4A</h2><p>LAB 4A 的内容是实现分片控制器，支持添加新的副本组、清除副本组以及在副本组之间移动分片。LAB 4A 的实现非常简单，除了没有使用快照之外，跟 LAB 3 的实现非常相似。</p><p>需要注意的是，当创建新的配置时，不要把之前的配置的 <code>Groups</code> 赋值给新的配置（因为 <code>Groups</code> 是引用类型），实现完后跑一下测试：</p><img src="/2022/09/02/Sharded-Key-Value-Service/%E5%9B%BE1.png" class=""><h2 id="LAB-4B"><a href="#LAB-4B" class="headerlink" title="LAB 4B"></a>LAB 4B</h2><p>LAB 4B 的内容是实现分片 KV 存储系统，为使用客户端接口的应用程序提供可线性化的接口。也就是说，对 Get、Put 和 Append 方法的完整应用程序调用必须以相同的顺序影响所有副本。 Get 应该看到最近的 Put&#x2F;Append 写入到同一个 Key 的值。即使 Gets 和 Puts 与配置更改几乎同时到达，也必须如此。</p><p>每个 shardkv 服务器都作为副本组的一部分运行。每个副本组为某些分片的 Key 提供 Get、Put 和 Append 操作。</p><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>我写完第一版代码后只通过了前面三个测试，第四个测试一直报错 Get 操作返回了错误的值。我反复检查了代码都没找到什么问题，于是就去仔细看了一下实验给的提示，终于发现了问题的所在。</p><p>提示里面给出了非常关键的信息：”Process re-configurations one at a time, in order.”，即应该按照顺序一次处理一个重新配置。在我之前的实现中副本组的 Leader 以100MS的频率向分片控制器询问最新配置，如果配置号大于当前的配置，那么就开始进行分片迁移，在分片迁移完成后进化到新的配置。但这样是有问题的，假设有如下的场景：</p><img src="/2022/09/02/Sharded-Key-Value-Service/%E5%9B%BE4.png" class=""><br><p>Server 1 和 Server 2 初始状态都是配置1，此时 Server 2 向分片控制器询问最新的配置，分片控制器返回了配置3。Server 2 根据配置3向 Server 1 发送分片2的请求，但是 Server 1 不拥有分片2，于是 Server 1会返回空数据或者无用的垃圾数据，Server 2 会把返回的垃圾数据保存起来，之后如果有客户端向 Server 2 发送 Get 请求，那么 Server 2 就会返回错误的值。</p><p>原因是副本组没有按照顺序处理重新配置，Server 2 不应该跳过配置2直接到达配置3，而是要先到达配置2，再到达配置3。</p><p>但即使这样还需要额外的判断才能保证正确性，假设副本组按照顺序一次处理一个重新配置，有如下的场景：</p><img src="/2022/09/02/Sharded-Key-Value-Service/%E5%9B%BE3.png" class=""><br><p>Server 1 初始状态是配置1，Server 2 初始状态是配置2。此时 Server 2 向分片控制器询问最新的配置，分片控制器返回了配置3。Server 2 根据配置3向 Server 1 发送分片2的请求，但是 Server 1 不拥有分片2，于是 Server 1会返回空数据或者无用的垃圾数据，Server 2 会把返回的垃圾数据保存起来，之后如果有客户端向 Server 2 发送 Get 请求，那么 Server 2 就会返回错误的值。</p><p>原因是 Server 2 的配置高于 Server 1，Server 1到达配置2后才会拥有分片2。因此当一个 Server 接收到请求分片的 RPC 时，需要先判断请求分片的配置号是否高于本服务器当前的配置，如果高于则返回一个错误提示告诉对方你要求的分片的配置太高了，否则就可以安全地把分片发送给对方。</p><h3 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h3><p>再说一说在实现 LAB 4B 的过程中遇到的一个小 Bug。在我的之前的实现中，每当服务器返回一个分片给请求方时，都会直接把这个分片对应的 GID 设置为0，表示不再拥有这个分片：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(kv *ShardKV)</span></span> doShard(command *Op) NotifyMsg &#123;<br><span class="hljs-comment">// ....</span><br>    <span class="hljs-comment">// ....</span><br><span class="hljs-keyword">for</span> _, shard := <span class="hljs-keyword">range</span> command.Shards &#123;<br><span class="hljs-comment">// ....</span><br>        <span class="hljs-comment">// ....</span><br>kv.config.Shards[shard] = <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-keyword">return</span> notifyMsg<br>&#125;<br></code></pre></td></tr></table></figure><p>但这样做是有问题的，假设有如下的场景：</p><img src="/2022/09/02/Sharded-Key-Value-Service/%E5%9B%BE5.png" class=""><br><p>Server 1 已经到达了配置2，Server 2 到达了配置1。此时 Server 2 向分片控制器询问最新的配置，分片控制器返回了配置2，Server 2 根据配置2向 Server 1 发送分片1的请求，Server 1就把分片1的数据返回给 Server 2，并直接把 <code>kv.config.Shards[1]</code> 设置为0。</p><p>那么问题来了，当 Server 1 想要到达配置 3 时 需要分片1的数据，但是 Server 1已经把 <code>kv.config.Shards[1]</code> 置为0了，因此 Server 1 无法知道现在是谁拥有分片1。</p><p>解决方法很简单，加一个额外的判断即可：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> kv.config.Shards[shard] == kv.gid &#123;<br>kv.config.Shards[shard] = <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果 Server 1 已经到了配置2，则不把 <code>kv.config.Shards[shard]</code> 设置为0。</p><h3 id="Challenge-1"><a href="#Challenge-1" class="headerlink" title="Challenge 1"></a>Challenge 1</h3><p>挑战1是垃圾状态收集，即当一个副本组失去对分片的所有权时，副本组应该把相应的分片数据删除。</p><p>最简单的办法是，在一个副本组返回分片给请求者后就立马把这个分片的数据删掉。但这样是有问题的，由于网络的不可靠性，请求者可能没有收到返回的分片数据，之后这个请求者就会重试，但此时副本组已经把这个分片删掉了，请求者不可能再拿到这个分片了。</p><p>解决方案是，副本组返回分片给请求者后不立即删掉这个分片。在请求者设置好分片后，再发送消息给分片的原来的持有者：告诉它这个分片我已经拿到了，你可以把这个分片的数据删掉了。这样副本组就能安全地删除掉分片了。</p><p>当然，这里面还有一些细节性的判断，这里就不再赘述了。</p><h3 id="Challenge-2"><a href="#Challenge-2" class="headerlink" title="Challenge 2"></a>Challenge 2</h3><p>挑战2是在配置更改期间能够处理客户端请求：</p><ul><li>在配置更改期间，如果一个分片没有收到影响，那么发送到这个分片的请求能够继续执行；</li><li>在配置更改期间，当副本组收到它需要的一个分片时，这个副本组可以立马为这个分片提供服务。</li></ul><p>第一个问题很简单，只要不在配置更改期间禁用客户端请求就可以通过这个测试。</p><p>对于第二个问题，解决方案是：在副本组得到一个分片后，就创建一个设置分片的操作提交到 Raft 中，当这个操作被复制到多数节点后，就执行这个操作，把分片保存到服务器状态中，之后就可以为这个分片提供服务了。这样就不需要等待到达新的配置就可以为新的分片提供服务了。</p><p>解决完所有的 Bug 并实现两个挑战后，跑一下测试：</p><img src="/2022/09/02/Sharded-Key-Value-Service/%E5%9B%BE2.png" class=""><h2 id="难度排序"><a href="#难度排序" class="headerlink" title="难度排序"></a>难度排序</h2><p>终于把 6.824 的所有 LAB 都做完了，结合我自己实现 LAB 的经历给这4个 LAB 的难度做一个排序吧：</p><ol><li>LAB 2。LAB 2 的难度最高，我认为主要是比较难 Debug，测试报错后很多时候都有上万行的日志，除了看日志以外没有什么好的 Debug 方法。我在做 LAB 2A 的时候参考了 Github 上的一个 Raft 的开源实现，主要是看一下需要定义哪些字段和方法，因为我刚开始做的时候完全不知道从哪儿下手😥。然后 2B、2C、2D 都是我完全独立完成的；</li><li>LAB 4。LAB 4 的难度比 LAB 2 的难度低一点，但是远高于 LAB 3 和 LAB 1 的难度。LAB 4A 和 4B 的所有内容都是我自己独立完成的，包括 4B 的最后两个挑战练习。LAB 4 的第一版代码我很快就写完了，但是只能通过前3个测试，直到看到 “Process re-configurations one at a time, in order.” 提示才直到自己哪儿错了，之后只改动几行代码就通过了前面的测试。再之后就慢慢地想要怎么实现最后的两个挑战练习，经过思考后也是顺利地完成了代码；</li><li>LAB 3。LAB 3 的难度本来挺低的，但是我在 LAB 3A 卡了接近一天，原因是我把 LAB 3 的架构搞错了（具体可见之前的文章），我看了一下别人的实现思路后才知道自己竟然犯了这么低级错误，之后改了10来行代码就通过所有测试了ヽ(✿ﾟ▽ﾟ)ノ；</li><li>LAB 1。LAB 1 的难度最低，我感觉 LAB 1 就相当于这门课的热身练习，实现逻辑比较简单，也没有什么复杂的交互，Debug 也比较简单。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://pdos.csail.mit.edu/6.824/">MIT 6.824</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>distributed system</category>
      
    </categories>
    
    
    <tags>
      
      <tag>distributed</tag>
      
      <tag>Fault-tolerant</tag>
      
      <tag>Key/Value Service</tag>
      
      <tag>Shard</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fault-tolerant Key/Value Service（二）</title>
    <link href="/2022/08/22/Fault-tolerant-Key-Value-Service-2/"/>
    <url>/2022/08/22/Fault-tolerant-Key-Value-Service-2/</url>
    
    <content type="html"><![CDATA[<h2 id="具有快照功能的Key-x2F-Value-service"><a href="#具有快照功能的Key-x2F-Value-service" class="headerlink" title="具有快照功能的Key&#x2F;Value service"></a>具有快照功能的Key&#x2F;Value service</h2><p>LAB 3B在LAB 3A的基础上增加了快照的功能，随着Key&#x2F;Value服务的运行，其底层的Raft日志会越来越多，当超过某一阈值时，Key&#x2F;Value服务就需要创建一个快照，然后把快照传给Raft，Raft收到快照后就能够丢弃快照点之前的日志了。</p><p>Key&#x2F;Value服务也必须在崩溃重启后仍然能够过滤重复请求，这意味着LAB 3A中用来实现过滤重复请功能的数据结构也必须持久化到快照中。这样，当Key&#x2F;Value服务重启后，Key&#x2F;Value服务会首先读取持久化存储的快照，恢复在快照点的状态和客户端请求记录，之后再一条条执行快照点之后的日志，因此快照点之后的重复操作仍然可以被过滤。</p><h2 id="LAB-3B-中遇到的问题"><a href="#LAB-3B-中遇到的问题" class="headerlink" title="LAB 3B 中遇到的问题"></a>LAB 3B 中遇到的问题</h2><h3 id="Bug-1"><a href="#Bug-1" class="headerlink" title="Bug 1"></a>Bug 1</h3><p>第一个遇到的问题是 <code>TestSnapshotUnreliableRecoverConcurrentPartitionLinearizable3B</code> 测试没有通过，错误信息中显示客户端的写操作不是线性一致的。</p><p>截取的错误日志片段如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// ............</span><br><span class="hljs-number">188282</span> SNAP S4 receives snapshot: &amp;&#123;term: <span class="hljs-number">22</span> index: <span class="hljs-number">1576</span>&#125;<br><span class="hljs-number">188282</span> INFO S4 lastApplied: <span class="hljs-number">0</span>, kvTable: <span class="hljs-keyword">map</span>[], clientReqTable: <span class="hljs-keyword">map</span>[]<br><span class="hljs-number">188283</span> SNAP S4 applies a snapshot: &amp;&#123;term: <span class="hljs-number">22</span> index: <span class="hljs-number">1576</span>&#125;<br><span class="hljs-comment">// ............</span><br>nfo: wrote history visualization to /tmp/<span class="hljs-number">503826179.</span>html<br>--- FAIL: TestSnapshotUnreliableRecoverConcurrentPartitionLinearizable3B (<span class="hljs-number">29.60</span>s)<br>    test_test.<span class="hljs-keyword">go</span>:<span class="hljs-number">385</span>: history is not linearizable<br>FAIL<br>exit status <span class="hljs-number">1</span><br>FAIL<span class="hljs-number">6.824</span>/kvraft<span class="hljs-number">29.606</span>s<br></code></pre></td></tr></table></figure><p>日志中显示S4收到了Raft发来的一个空的快照，并且S4应用了这个快照，这导致S4的状态被清空，因此违反了线性一致性。</p><p>在我的Raft实现中，快照会被保存在Raft结构体中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Raft <span class="hljs-keyword">struct</span> &#123;<br>    snapshot[]<span class="hljs-type">byte</span> <span class="hljs-comment">//最近的快照</span><br>&#125;<br></code></pre></td></tr></table></figure><p>当上层的Server传递快照给Raft时，Raft除了会把快照持久化存储起来之外，还会更新自己的 <code>snapshot</code> 字段的值。当 Leader 发送快照时会直接发送 <code>rf.snapshot</code> 的值而不会去读取持久化存储的快照。</p><p>但是在Raft初始启动时，我没有读取持久化存储的快照来初始化 <code>rf.snapshot</code>，而这就是问题的所在。当一个重新启动的节点被当选为 Leader 后，这个节点会向落后于它的快照点的其他节点发送快照，而此时快照是空的。当其他节点收到这个快照后，如果应用了这个快照，复制状态机的状态将会被清空，最终导致错误。</p><p>因此，需要在初始化Raft时读取持久化存储的快照来设置 <code>rf.snapshot</code> 的值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Make</span><span class="hljs-params">(peers []*labrpc.ClientEnd, me <span class="hljs-type">int</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">// ....</span></span><br><span class="hljs-params"><span class="hljs-function">rf.snapshot = rf.persister.ReadSnapshot()</span></span><br><span class="hljs-comment">// ....</span><br><br><span class="hljs-keyword">return</span> rf<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Bug-2"><a href="#Bug-2" class="headerlink" title="Bug 2"></a>Bug 2</h3><p>第二个遇到的问题是 <code>TestSnapshotUnreliable3B</code> 测试没有通过。这个 Bug 是我在 LAB 3 中遇到的最难解决的一个Bug。</p><p>起初，我在测试时加了竞争检测器：<code>go test --run TestSnapshotUnreliable3B--race</code>，得到了如下的错误日志：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// ....</span><br>race: limit on <span class="hljs-number">8128</span> simultaneously alive goroutines is exceeded, dying<br>exit status <span class="hljs-number">66</span><br>FAIL<span class="hljs-number">6.824</span>/kvraft<span class="hljs-number">589.365</span>s<br></code></pre></td></tr></table></figure><p>错误日志中显示存在的Go程太多了，超过了8128个。我检查代码之后，没有找到哪里出了问题，所以就去搜了一下看别人有没有遇到这个问题，最终在知乎上看到了一篇文章有讲这个Bug。在那篇文章中作者提到是因为心跳太过频繁导致Go程开的太多，最终超过了竞争检测器的上限。</p><p>因此，我把心跳间隔设置为200MS（原来是100MS）再去测试，但是这个错误还是出现了，只是出现错误次数比之前少了很多。之后，我把竞争检测器去掉（<code>go test --run TestSnapshotUnreliable3B</code>），再并发跑500次测试，最终有一次测试发生了超时报错：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// ....</span><br><span class="hljs-built_in">panic</span>: test timed out after <span class="hljs-number">10</span>m0s<br><br>goroutine <span class="hljs-number">79839</span> [running]:<br>testing.(*M).startAlarm.func1()<br>/usr/lib/<span class="hljs-keyword">go</span><span class="hljs-number">-1.13</span>/src/testing/testing.<span class="hljs-keyword">go</span>:<span class="hljs-number">1377</span> +<span class="hljs-number">0xdf</span><br>created by time.goFunc<br>/usr/lib/<span class="hljs-keyword">go</span><span class="hljs-number">-1.13</span>/src/time/sleep.<span class="hljs-keyword">go</span>:<span class="hljs-number">168</span> +<span class="hljs-number">0x44</span><br><span class="hljs-comment">// ....</span><br></code></pre></td></tr></table></figure><p>这个时候我才意识到有可能发生了死锁，当一个服务器发生死锁后，这个服务器就会被永久阻塞，在测试超时10分钟后就会发生panic。</p><p>没办法，只能硬着头皮去看这几万行的日志了&#x2F;(ㄒoㄒ)&#x2F;~~。经过一顿操作后，终于定位到了发生错误的日志：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">100223</span> INFO S2 success changes lastApplied from <span class="hljs-number">237</span> to <span class="hljs-number">238</span><br><span class="hljs-number">100223</span> SNAP S2 generates snapshot: &amp;&#123;index: <span class="hljs-number">238</span>&#125;<br></code></pre></td></tr></table></figure><p>服务器S2在日志索引号238处想要生成一个快照，但是之后没有打印生成快照成功的日志。正常的生成快照得日志是这样的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">102268</span> INFO S1 success changes lastApplied from <span class="hljs-number">247</span> to <span class="hljs-number">248</span><br><span class="hljs-number">102268</span> SNAP S1 generates snapshot: &amp;&#123;index: <span class="hljs-number">248</span>&#125;<br><span class="hljs-number">102270</span> INFO S1 generates snapshot success<br></code></pre></td></tr></table></figure><p>生成快照的函数实现如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(kv *KVServer)</span></span> genSnapshot() &#123;<br>w := <span class="hljs-built_in">new</span>(bytes.Buffer)<br>e := labgob.NewEncoder(w)<br>    <br><span class="hljs-comment">// ....</span><br><br>data := w.Bytes()<br>kv.rf.Snapshot(kv.LastApplied, data)<br>&#125;<br></code></pre></td></tr></table></figure><p>生成快照完毕后会调用Raft的<code>Snapshot</code>函数并把快照作为参数传入。<code>Snapshot</code> 的函数实现如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(rf *Raft)</span></span> Snapshot(index <span class="hljs-type">int</span>, snapshot []<span class="hljs-type">byte</span>) &#123;<br><span class="hljs-comment">// Your code here (2D).</span><br>rf.mu.Lock()<br><span class="hljs-keyword">defer</span> rf.mu.Unlock()<br><br>    <span class="hljs-comment">//....</span><br>    <span class="hljs-comment">//....</span><br><br>rf.persister.SaveStateAndSnapshot(state, snapshot)<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>Snapshot</code>函数中需要首先获取Raft的锁才能继续向下执行，所以我在<code>rf.mu.Lock()</code>后面加了一行日志以便于Debug：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">rf.mu.Lock()<br>log.Printf(<span class="hljs-string">&quot;S%d acquire lock successful&quot;</span>)<br>rf.mu.Unlock()<br></code></pre></td></tr></table></figure><p>之后，再并发跑500次测试。检查出现的错误的测试日志，我发现某个服务器在最后一次生成快照的时候没有打印这条消息，这说明直到10分钟后测试超时这个服务器一直没有拿到锁，即这个服务器执行 <code>rf.mu.Lock()</code> 语句被阻塞住了。</p><p>我猜测这很可能是死锁造成的，经过一顿代码筛查，终于定位到了错误代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Raft 中安装快照RPC的handler</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(rf *Raft)</span></span> InstallSnapshot(args *InstallSnapshotArgs, reply *InstallSnapshotReply) &#123;<br><span class="hljs-comment">// ....</span><br>    rf.mu.Lock()<br>    <span class="hljs-keyword">defer</span> rf.mu.Unlock()<br><br>    msg := ApplyMsg&#123;&#125;<br>    rf.applyCh &lt;- msg<br>&#125;<br><br><span class="hljs-comment">// KvServer 中一个单独运行的Go程</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(kv *KVServer)</span></span> applyMsgToStateMachine() &#123;<br><span class="hljs-keyword">for</span> !kv.killed() &#123;<br>msg := &lt;-kv.applyCh<br>        <span class="hljs-comment">// ....</span><br><br><span class="hljs-keyword">if</span> msg.CommandValid &#123;<br><span class="hljs-comment">// ....</span><br>kv.genSnapshot()<br><span class="hljs-comment">// ....</span><br>&#125;<br>        <span class="hljs-comment">// ....</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>假设这样一个场景，S 收到了 Leader 发来的快照并执行 <code> rf.mu.Lock()</code>获取了 Raft 锁，之后 S 在会把快照发送给上层 Key&#x2F;Value服务：<code>rf.applyCh &lt;- msg</code>。</p><p>如果 Key&#x2F;Value 服务正在执行 <code>kv.genSnapshot</code>，那么 Key&#x2F;Value 服务也会尝试获取 Raft 锁，那么 <code>rf.applyCh</code> 就没有接收方。由于 <code>applyCh</code> 是同步管道，<code>InstallSnapshot</code> RPC会一直被阻塞住不会释放 Raft 锁，所以 <code>kv.genSnapshot</code> 也无法获取 Raft 锁，导致无法生成快照。</p><p>解决方法很简单，把发送快照给上层 Key&#x2F;Value服务的操作放在锁的外面即可：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(rf *Raft)</span></span> InstallSnapshot(args *InstallSnapshotArgs, reply *InstallSnapshotReply) &#123;<br><span class="hljs-comment">// ....</span><br>    rf.mu.Lock()<br>    msg := ApplyMsg&#123;&#125;<br>    rf.mu.Unlock()<br>    <br>    rf.applyCh &lt;- msg<br>&#125;<br></code></pre></td></tr></table></figure><p>解决完所有的 Bug 后，并发跑500次测试全部通过：</p><img src="/2022/08/22/Fault-tolerant-Key-Value-Service-2/%E5%9B%BE1.png" class=""><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://pdos.csail.mit.edu/6.824/">MIT 6.824</a></li><li><a href="https://raft.github.io/raft.pdf">Raft paper</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>distributed system</category>
      
    </categories>
    
    
    <tags>
      
      <tag>distributed</tag>
      
      <tag>Fault-tolerant</tag>
      
      <tag>Key/Value Service</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fault-tolerant Key/Value Service（一）</title>
    <link href="/2022/08/19/Fault-tolerant-Key-Value-Service/"/>
    <url>/2022/08/19/Fault-tolerant-Key-Value-Service/</url>
    
    <content type="html"><![CDATA[<h2 id="LAB-3：分布式KV"><a href="#LAB-3：分布式KV" class="headerlink" title="LAB 3：分布式KV"></a>LAB 3：分布式KV</h2><p>6.824 LAB 3的内容是基于LAB 2实现的Raft库构建一个容错的Key&#x2F;Value服务。</p><p>容错的Key&#x2F;Value服务是一个复制状态机，由多个使用Raft进行复制的Key&#x2F;Value服务器组成。由于底层使用Raft实现复制，因此只要过半服务器没有故障并且能够互相通信，那么构建的Key&#x2F;Value服务就能够一直处理客户请求。整体架构如图所示：</p><img src="/2022/08/19/Fault-tolerant-Key-Value-Service/%E5%9B%BE1.png" class=""><p>客户端可以向Key&#x2F;Value服务发送三种不同的RPC：</p><ul><li><p>Put(key, value)：替换数据库中某一特定Key对应的Value。</p></li><li><p>Append(key, arg)：将arg附加到Key对应的Value上。</p></li><li><p>Get(key)：获取Key对应的Value。对于一个不存在的Key，Get应该返回一个空字符串。</p></li></ul><p>每个客户端通过Clerk的Put&#x2F;Append&#x2F;Put方法与服务进行通信，Clerk负责管理与服务的RPC交互。</p><p>LAB 3要求客户端对Clerk的Get&#x2F;Put&#x2F;Append方法的调用是可线性化的。如果一次调用一个，Get&#x2F;Put&#x2F;Append方法应该表现得像系统只有一个副本一样，并且每次调用都应该观察到前面的调用序列对状态的修改（一个操作只能执行一次）。对于并发调用，返回值和最终状态必须与操作按某种顺序一次执行一个得到的结果相同。如果调用在时间上重叠，就是并发的：例如，如果客户端X调用Clerk.Put()，客户端Y调用Clerk.Append()，然后客户端X的调用返回。一个调用必须观察到在该调用开始之前已经完成的所有调用的效果。</p><h2 id="实现线性一致性"><a href="#实现线性一致性" class="headerlink" title="实现线性一致性"></a>实现线性一致性</h2><p>由于使用Raft实现复制，写操作已经实现了线性一致性，因为所有的服务器都会按照相同的顺序执行相同的写操作：</p><img src="/2022/08/19/Fault-tolerant-Key-Value-Service/%E5%9B%BE2.png" class=""><p>对于读操作，我们可以把客户端的Get请求只发送到Leader，来确保一定能够读到最近写入的值。但是这样需要额外的机制来验证这个Leader是否是真的Leader，因为一个困在分区中的Leader是一个假Leader。</p><p>可以把读操作也提交到Raft日志中，这样所有的读写操作在所有的服务器中都会按照相同的顺序执行，并且读操作一定能够看到它之前的写操作写入的值。这种方法的缺点是性能差，为了把读操作的日志复制给大多数服务器，至少需要发送一轮AppendEntries RPC，需要花费10MS以上的时间。</p><h2 id="过滤重复请求"><a href="#过滤重复请求" class="headerlink" title="过滤重复请求"></a>过滤重复请求</h2><p>当一个客户端向Key&#x2F;Value服务器发送一个请求后，在超时时间内这个服务器可能执行不完这个请求，服务器会返回一个error给客户端，之后客户端会重新发送这个请求。因此，客户端可能会发送多条重复的请求给服务端。</p><p>这种情况下，服务器需要有能力过滤掉重复的请求，确保每个请求只执行一次。否则，服务器执行重复请求可能会导致状态的错误更改，导致违反线性一致性。</p><p>比如，客户端X向服务器发送请求 <code>Append(&quot;K&quot;, &quot;Hello&quot;)</code>，之后由于一些原因客户端X再次发送请求 <code>Append(&quot;K&quot;, &quot;Hello&quot;)</code>，如果服务器不过滤掉重复的请求，那么 <code>K</code> 对应的 Value 就会变为 <code>HelloHello</code>。但是在客户端看来，我只想要追加一个 <code>Hello</code>，最终却追加了两个，这显然不符合要求。</p><p>解决方法是在客户端存储一个客户端标识符和请求ID，并在服务端存储一张表，表中的每一项是客户端的标识符和对应的请求ID，请求ID是一个从1开始的递增整数。客户端每次发送请求时都把请求ID加一，然后把客户端标识符和请求ID附加到发送的请求中；服务器收到这个请求后可以查看这个客户端对应的最大请求ID，只有当发送过来的请求ID大于服务器存储的最大请求ID才执行这个请求，否者说明是一个重复的请求，直接返回即可。</p><h2 id="LAB-3A中遇到的问题"><a href="#LAB-3A中遇到的问题" class="headerlink" title="LAB 3A中遇到的问题"></a>LAB 3A中遇到的问题</h2><h3 id="架构理解错误"><a href="#架构理解错误" class="headerlink" title="架构理解错误"></a>架构理解错误</h3><p>在实现LAB 3A的是否遇到的第一个问题就是把架构理解错了。在我原先的理解中，系统中只存在一个Clerk，然后存在多个客户端，所有的客户端都调用同一个Clerk的Put&#x2F;Append&#x2F;Get方法，因此对Clerk的调用是并发的：</p><img src="/2022/08/19/Fault-tolerant-Key-Value-Service/%E5%9B%BE3.png" class=""><p>但是，这样的话无法知道是谁调用的Put&#x2F;Append&#x2F;Get方法，因为这些方法中没有客户端ID这个参数。我原来的想法是Clerk每次发送请求之前先生成一个随机的请求ID，之后发送请求时附带上这个ID。这样服务端在执行完一条请求后就可以把这个请求ID和执行结果存储在一条表中，之后如果客户端发送了一条重复的请求，我们就可以根据请求ID直接把结果返回，而不需要再次执行。</p><p>这个方法的问题随着请求的执行，服务端存储的请求ID和执行结果会越来越多，而且没有什么有效的清理无用数据的方法。</p><p>想了半天没啥好的思路，我就看了一下别人的LAB 3的实现文档，才发现我把LAB 3的架构理解错了。正确的架构是，有多个客户端，并且每个客户端有自己的Clerk，每个客户端阻塞调用自己的Clerk的Put&#x2F;Append&#x2F;Get方法：</p><img src="/2022/08/19/Fault-tolerant-Key-Value-Service/%E5%9B%BE4.png" class=""><p>这样，就能够使用上面提到的过滤重复请求的方法了。</p><h3 id="Bug-1"><a href="#Bug-1" class="headerlink" title="Bug 1"></a>Bug 1</h3><p>第一个遇到的问题是每条请求的执行时间过长，超过了33ms：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">--- FAIL: TestSpeed3A (<span class="hljs-number">101.08</span>s)<br>    test_test.<span class="hljs-keyword">go</span>:<span class="hljs-number">419</span>: Operations completed too slowly <span class="hljs-number">100.480114</span>ms/op &gt; <span class="hljs-number">33.333333</span>ms/op<br>FAIL<br>exit status <span class="hljs-number">1</span><br>FAIL    <span class="hljs-number">6.824</span>/kvraft    <span class="hljs-number">101.086</span>s<br></code></pre></td></tr></table></figure><p>我反复检查了LAB 3A的代码实现，都没找到啥问题，去网上搜了一下才发现是LAB2的实现策略有问题。</p><p>在我的LAB 2的实现中，心跳的间隔是100MS，并且只在心跳的是否才发送日志给其他的节点。如果只有一个客户端，客户端发送Put&#x2F;Append&#x2F;Get请求给服务器，服务器把这个请求提交给Raft，Raft需要等待100MS然后发送附加日志给其他的节点，之后才能提交执行这个请求，当服务器执行完这个请求后返回响应给客户端，之后客户端才能继续发起新的请求。因此，执行一条请求至少需要100MS，这没有达到33MS的要求。</p><p>解决方法很简单，在Raft执行Start方法添加完一条日志后，就立马发送心跳，这样就不需要等待100MS了。</p><h3 id="Bug-2"><a href="#Bug-2" class="headerlink" title="Bug 2"></a>Bug 2</h3><p>第二个Bug是与Go语言相关的。如果向<code>nil</code>管道发送值会发生死锁，发送端Go程会被永久阻塞。最开始我的实现是这样的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">command.Ch &lt;- sendVal<br></code></pre></td></tr></table></figure><p>如果当前的服务器不是Leader，那么<code>command.Ch</code>就等于<code>nil</code>，因此在发送前需要加一个判断：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> command.Ch != <span class="hljs-literal">nil</span> &#123;<br>    command.Ch &lt;- sendVal<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Bug-3"><a href="#Bug-3" class="headerlink" title="Bug 3"></a>Bug 3</h3><p>第三个Bug还是与Go语言相关的。对于一个同步管道，只有当接收方准备接收的时候，发送方才能发送过去，否则发送方会永久阻塞。最开始我的实现是这样的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 某个函数</span><br><span class="hljs-keyword">if</span> command.Ch != <span class="hljs-literal">nil</span> &#123;<br>    command.Ch &lt;- sendVal<br>&#125;<br><br><br><span class="hljs-comment">// 某个函数</span><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> value := &lt;-waitCh:<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>, value<br><span class="hljs-keyword">case</span> &lt;-time.After(kv.waitTimeOut):<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果在<code>kv.waitTimeOut</code>内还没有收到请求完成的通知，服务器会直接返回一个error给客户端。之后当请求完成后，执行<code>command.Ch &lt;- sendVal</code>就会发生永久阻塞，因为此时已经没有接收方了。</p><p>解决方法是，在发送端也设置一个超时，如果在超时时间内没有发送成功就直接退出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> command.Ch != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-keyword">select</span> &#123;<br>    <span class="hljs-keyword">case</span> command.Ch &lt;- sendVal:<br>    <span class="hljs-keyword">case</span> &lt;-time.After(time.Microsecond):<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解决完所有Bug后，并发跑500次测试：</p><img src="/2022/08/19/Fault-tolerant-Key-Value-Service/%E5%9B%BE5.png" class=""><p>TestSpeed3A有一次测试没有通过，错误日志中显示每条操作花了37MS，没有达到33MS&#x2F;op的要求，但是这个问题应该已经在Bug 1中被解决了。测试报告中显示，TestSpeed3A平均花费了78.41秒才完成，但是在单独测试中只花了10.9秒就完成了：</p><img src="/2022/08/19/Fault-tolerant-Key-Value-Service/%E5%9B%BE7.png" class=""><p>我就猜测可能是测试的时候开的线程太多导致的，毕竟我的电脑性能不太行。那么，只开5个线程并发跑500次TestSpeed3A测试：</p><img src="/2022/08/19/Fault-tolerant-Key-Value-Service/%E5%9B%BE6.png" class=""><p>所有的测试全部通过，并且平均只花费了13.13秒。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://pdos.csail.mit.edu/6.824/">MIT 6.824</a></li><li><a href="https://raft.github.io/raft.pdf">Raft paper</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>distributed system</category>
      
    </categories>
    
    
    <tags>
      
      <tag>distributed</tag>
      
      <tag>Fault-tolerant</tag>
      
      <tag>Key/Value Service</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Raft（五）：日志压缩和快照</title>
    <link href="/2022/08/08/Raft-5/"/>
    <url>/2022/08/08/Raft-5/</url>
    
    <content type="html"><![CDATA[<h2 id="为什么需要快照？"><a href="#为什么需要快照？" class="headerlink" title="为什么需要快照？"></a>为什么需要快照？</h2><p>在 Raft 中，Log 压缩和快照解决的问题是：</p><ul><li><p>节约内存和磁盘的存储空间。对于一个长期运行的系统，例如运行了几周，几个月甚至几年，如果按照 Raft 论文图2的规则，那么 Log 会无限增长。最后可能会有数百万条 Log，从而需要大量的内存来存储。如果持久化存储在磁盘上，最终会消耗磁盘的大量空间。</p></li><li><p>减少崩溃重启后恢复应用程序状态花费的时间。如果一个服务器重启了，它需要重新从头开始执行这数百万条 Log 来重建自己的状态。当故障重启之后，遍历并执行整个 Log 的内容可能要花费几个小时来完成。这在某种程度上来说是浪费，因为在重启之前，服务器已经有了一定的应用程序状态。</p></li></ul><p>为了应对上面的问题，Raft 有了快照的概念。快照背后的思想是，将应用程序状态的拷贝单独存储下来。</p><p>对于大多数的应用程序来说，应用程序的状态远小于 Log 的大小。某种程度上，在某些时间点，Log 和应用程序的状态是可以互换的，它们是用来表示应用程序状态的不同事物。但是 Log 可能包含大量的重复的记录（例如KV存储中对同一个键的重复赋值），这些记录使用了 Log 中的大量的空间，但是可以压缩为表示应用程序状态的一条记录。这条记录通常比 Log 小的多，这就是快照的背后原理。</p><h2 id="快照实现策略"><a href="#快照实现策略" class="headerlink" title="快照实现策略"></a>快照实现策略</h2><p>当 Raft 认为它的 Log 太大，例如大于1MB，10MB或者任意的限制，Raft 会从 Log 中选取一个与快照对应的点，然后要求应用程序在那个点的位置做一个快照。之后，Raft 会持久化存储快照并丢弃快照点之前的日志条目。</p><p>当 Raft 服务器崩溃重启后，应用程序读取持久化存储的快照，恢复在快照点对应的状态。</p><p>但是，由于丢弃了快照之前 Log，这引入了大量的复杂性。如果有的 Follower 的 Log 很短，比 Leader 的快照点还短，那么 Leader 就不可能与 Follower 的日志匹配成功，因此 Leader 就无法通过 AppendEntries 的方式让 Follower 的 Log 补齐至 Leader 的 Log。</p><p>一种可能的解决方式是，如果 Leader 发现有任何一个 Follower 的 Log 落后于 Leader 快照的点，那么 Leader 就不丢弃快照之前的 Log。但是如果一个 Follower 关机了很长一段时间，那么 Leader 就不能确认这个 Follower 的 Log 条目，这就意味着 Leader 不能通过快照来减少自己的存储消耗。</p><p>Raft 选择的方法是，Leader 可以丢弃 Follower 需要的 Log。因此，我们需要某种机制能够处理 Follower Log 的结尾到 Leader Log 开始之间缺失的 Log，解决方法是 InstallSnapshot RPC。</p><p>当 Follower 收到 AppendEntries RPC 时，如果日志不匹配则会返回 false。Leader 收到 false 返回后，会回退自己的 Log，直到某个点为止 Leader 将不能再回退，此时它已经到了自己 Log 的起点。这时，Leader 会将自己的快照发给 Follower，之后通过 AppendEntries 将后面的 Log 发给 Follower。</p><p>具体的 InstallSnapshot 算法可以查看 <a href="https://raft.github.io/raft.pdf">Raft paper</a>（第七节）。</p><h2 id="LAB-2D"><a href="#LAB-2D" class="headerlink" title="LAB 2D"></a>LAB 2D</h2><p>LAB 2D 的实现不难，但是小细节挺多的。虽然实现的过程中遇到了很多Bug，但是都属于那种一眼就能知道问题在哪儿的类型，所以这里就不列举了。</p><p>最后，并发跑500次测试，全部顺利通过：</p><img src="/2022/08/08/Raft-5/Raft-%E5%9B%BE1.png" class=""><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://pdos.csail.mit.edu/6.824/">MIT 6.824</a></p></li><li><p><a href="https://raft.github.io/raft.pdf">Raft paper</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>distributed system</category>
      
    </categories>
    
    
    <tags>
      
      <tag>distributed</tag>
      
      <tag>consistency</tag>
      
      <tag>paper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Raft（四）：持久化存储</title>
    <link href="/2022/08/06/Raft-4/"/>
    <url>/2022/08/06/Raft-4/</url>
    
    <content type="html"><![CDATA[<h2 id="Raft-持久化"><a href="#Raft-持久化" class="headerlink" title="Raft 持久化"></a>Raft 持久化</h2><p>Raft 中所有服务器需要持久化存储的状态：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>currentTerm</td><td>服务器已知最新的任期（在服务器首次启动时初始化为0，单调递增）</td></tr><tr><td>votedFor</td><td>当前任期内收到选票的 candidateId，如果没有投给任何候选人则为空</td></tr><tr><td>log[]</td><td>日志条目；每个条目包含了用于状态机的命令，以及领导人接收到该条目时的任期（初始索引为1）</td></tr></tbody></table><p>当服务器改变了被标记为持久化的某个数据时，服务器应该将更新写入到磁盘或其他持久化存储中。这样当服务器故障重启后，就可以从持久化存储中找到相应的数据并将其加载到内存中，恢复之前的状态。</p><h3 id="currentTerm-持久化"><a href="#currentTerm-持久化" class="headerlink" title="currentTerm 持久化"></a>currentTerm 持久化</h3><p>currentTerm 需要被持久化存储是为了确保选举安全特性，即一个任期内最多只有一个 Leader 会被选举出来。</p><p>假设一共有三台服务器A、B、C。A是Leader，A有三条日志，其任期号分别为5、6、7；B有一条日志，任期号为5；C有一条日志，任期号为5。</p><p>这时，A还没复制日志给B、C，然后A、B、C都崩溃了。之后B、C重启，B、C需要选举出一个Leader，但是由于没有持久化 currentTerm，因此B、C不知道当前的任期号是多少，一种可能的方法是B、C通过查看自己的最后一条日志发现任期号为5，于是就会递增任期号并在任期6中选出一个Leader。</p><p>但是6是一个旧的任期号，在之前的这个任期中已经选举出了一个Leader了，这样一个任期中就选出了两个Leader，因此违反了选举安全特性。</p><h3 id="votedFor-持久化"><a href="#votedFor-持久化" class="headerlink" title="votedFor 持久化"></a>votedFor 持久化</h3><p>votefFor 需要被持久化存储也是为了确保选举安全特性。</p><p>假设一共有三台服务器A、B、C。A收到了B发来的投票请求，这时A检查发现自己的 votedFor 为空，于是给B投票。</p><p>然后A马上就崩溃重启了，这时收到C发来的投票请求，由于 votedFor 没有被持久化存储，因此B检查发现自己的 votedFor 为空，然后也会给C投票。这样B、C都收到了过半数的投票，B、C都会成为 Leader，这就违反了选举安全特性。</p><h3 id="log-持久化"><a href="#log-持久化" class="headerlink" title="log[] 持久化"></a>log[] 持久化</h3><p>日志需要被持久化存储是因为在崩溃重启后，应用程序可以根据保存的日志条目来重建崩溃前的运行状态。</p><p>假设由于断电或者其他原因导致所有的服务器全都重启了，这时所有的服务器都没有任何关于之前的日志条目信息，这样的话就不可能恢复到崩溃前的运行状态了。</p><h2 id="LAB-2C-中遇到的问题"><a href="#LAB-2C-中遇到的问题" class="headerlink" title="LAB 2C 中遇到的问题"></a>LAB 2C 中遇到的问题</h2><p>最后说一说，在实现 6.824 的 LAB 2C 的过程中遇到的两个 Bug。</p><h3 id="Bug-1"><a href="#Bug-1" class="headerlink" title="Bug 1"></a>Bug 1</h3><p>遇到的第一个Bug的错误日志如下所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs go">                                    S1 starts election                                                                                                                      <br>                                    S1 becomes Candidate                                                                                                                    <br>                                    S1 change term from <span class="hljs-number">40</span> to <span class="hljs-number">41</span>                                                                                                            <br>                                    S1 votes <span class="hljs-keyword">for</span> S1                                                                                                                         <br>S0 receives VoteRequestRpc from S1                                                                                                                                          <br>S0 becomes Follower                                                                                                                                                         <br>S0 changes term from <span class="hljs-number">40</span> to <span class="hljs-number">41</span>                                                                                                                                               <br>S0 votes <span class="hljs-keyword">for</span> S1                                                                                                                                                             <br>                                                                      S2 receives VoteRequestRpc from                                                                       <br>                                                                      S1                                                                                                    <br>                                                                      S2 changes term from <span class="hljs-number">40</span> to <span class="hljs-number">41</span>                                                                         <br>                                                                                                                                          S4 sends hearbeat                 <br>                                                                                                                                          。。。。。。。。。<br><br>                                                                                                        S3 starts election                                                  <br>                                                                                                        S3 change term from <span class="hljs-number">40</span> to <span class="hljs-number">41</span>                                        <br>                                                                                                        S3 votes <span class="hljs-keyword">for</span> S3                                                     <br>                                                                                                                                          S4 sends hearbeat                 <br>                                                                                                                                           。。。。。。。。。<br><br>S0 starts election                                                                                                                                                          <br>S0 becomes Candidate                                                                                                                                                        <br>S0 change term from <span class="hljs-number">41</span> to <span class="hljs-number">42</span>                                                                                                                                                <br>S0 votes <span class="hljs-keyword">for</span> S0                                                                                                                                                             <br>                                    S1 receives VoteRequestRpc from                                                                                                         <br>                                    S0                                                                                                                                      <br>                                    S1 becomes Follower                                                                                                                     <br>                                    S1 changes term from <span class="hljs-number">41</span> to <span class="hljs-number">42</span>                                                                                                           <br>                                    S1 votes <span class="hljs-keyword">for</span> S0                                                                                                                         <br>                                                                      S2 receives VoteRequestRpc from                                                                       <br>                                                                      S0                                                                                                    <br>                                                                      S2 changes term from <span class="hljs-number">41</span> to <span class="hljs-number">42</span>                                                                         <br>                                                                                                                                          S4 sends hearbeat                 <br>                                                                                                                                           。。。。。。。。。<br><br>                                                                                                        S3 starts election                                                  <br>                                                                                                        S3 change term from <span class="hljs-number">41</span> to <span class="hljs-number">42</span>                                        <br>                                                                                                        S3 votes <span class="hljs-keyword">for</span> S3                                                     <br>                                                                                                                                          S4 sends hearbeat                 <br>                                                                                                                                           。。。。。。。。。<br><br>                                    S1 starts election                                                                                                                      <br>                                    S1 becomes Candidate                                                                                                                    <br>                                    S1 change term from <span class="hljs-number">42</span> to <span class="hljs-number">43</span>                                                                                                            <br>                                    S1 votes <span class="hljs-keyword">for</span> S1                                                                                                                         <br>S0 receives VoteRequestRpc from S1                                                                                                                                          <br>S0 becomes Follower                                                                                                                                                         <br>S0 changes term from <span class="hljs-number">42</span> to <span class="hljs-number">43</span>                                                                                                                                               <br>                                                                      S2 receives VoteRequestRpc from                                                                       <br>                                                                      S1                                                                                                    <br>                                                                      S2 changes term from <span class="hljs-number">42</span> to <span class="hljs-number">43</span>                                                                         <br>S0 votes <span class="hljs-keyword">for</span> S1  <br></code></pre></td></tr></table></figure><p>在这个场景中，S0、S1和S2在一个网络分区中，S3 和 S4 分别在一个网络分区中。S0、S1的日志没有S2的日志新。</p><p>从日志中可以看到，S1总是先发起选举，然后S2收到S1的投票请求后会转化为跟随者，S2会重置自己的选举计时器，这就导致S2一直无法发起选举投票。</p><p>解决方法是，在收到投票请求时，如果需要转化为跟随者，则不重置选举计时器：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> args.Term &gt; rf.currentTerm &#123;<br>    rf.convertToFollower(args.Term, <span class="hljs-literal">false</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(rf *Raft)</span></span> convertToFollower(term <span class="hljs-type">int</span>, resetFlag <span class="hljs-type">bool</span>) &#123;<br>    <span class="hljs-comment">// .......</span><br>    <span class="hljs-comment">// .......</span><br>    <span class="hljs-keyword">if</span> resetFlag &#123;<br>        rf.electionStart = time.Now()<br>        rf.electionTimeout = rf.randomElectionTimeout()<br>    &#125;<br>    <span class="hljs-keyword">go</span> rf.ticker()<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，即使S2在收到S1的投票请求后转化为跟随者，也不会重置选举超时计时器，在一定时间后S2将能够发起选举投票。</p><h3 id="Bug-2"><a href="#Bug-2" class="headerlink" title="Bug 2"></a>Bug 2</h3><p>遇到的第二个Bug的错误日志如下所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">018750</span> LEAD S2 sends hearbeat<br><span class="hljs-number">018750</span> INFO S2 sends hearbeat to S4: &amp;&#123;Term:<span class="hljs-number">4</span> LeaderId:<span class="hljs-number">2</span> PrevLogIndex:<span class="hljs-number">2</span> PrevLogTerm:<span class="hljs-number">3</span> Entries:[&#123;Command:<span class="hljs-number">2420</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">3</span>&#125; &#123;Command:<span class="hljs-number">6554</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">4</span>&#125; &#123;Command:<span class="hljs-number">6316</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">5</span>&#125; &#123;Command:<span class="hljs-number">648</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">6</span>&#125; &#123;Command:<span class="hljs-number">3226</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">7</span>&#125; &#123;Command:<span class="hljs-number">9916</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">8</span>&#125; &#123;Command:<span class="hljs-number">6121</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">9</span>&#125; &#123;Command:<span class="hljs-number">9155</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">10</span>&#125; &#123;Command:<span class="hljs-number">9102</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">11</span>&#125; &#123;Command:<span class="hljs-number">1911</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">12</span>&#125;] LeaderCommit:<span class="hljs-number">0</span>&#125;<br><span class="hljs-number">018752</span> INFO S2 sends hearbeat to S0: &amp;&#123;Term:<span class="hljs-number">4</span> LeaderId:<span class="hljs-number">2</span> PrevLogIndex:<span class="hljs-number">2</span> PrevLogTerm:<span class="hljs-number">3</span> Entries:[&#123;Command:<span class="hljs-number">2420</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">3</span>&#125; &#123;Command:<span class="hljs-number">6554</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">4</span>&#125; &#123;Command:<span class="hljs-number">6316</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">5</span>&#125; &#123;Command:<span class="hljs-number">648</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">6</span>&#125; &#123;Command:<span class="hljs-number">3226</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">7</span>&#125; &#123;Command:<span class="hljs-number">9916</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">8</span>&#125; &#123;Command:<span class="hljs-number">6121</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">9</span>&#125; &#123;Command:<span class="hljs-number">9155</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">10</span>&#125; &#123;Command:<span class="hljs-number">9102</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">11</span>&#125; &#123;Command:<span class="hljs-number">1911</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">12</span>&#125;] LeaderCommit:<span class="hljs-number">0</span>&#125;<br><span class="hljs-number">018753</span> INFO S2 sends hearbeat to S1: &amp;&#123;Term:<span class="hljs-number">4</span> LeaderId:<span class="hljs-number">2</span> PrevLogIndex:<span class="hljs-number">2</span> PrevLogTerm:<span class="hljs-number">3</span> Entries:[&#123;Command:<span class="hljs-number">2420</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">3</span>&#125; &#123;Command:<span class="hljs-number">6554</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">4</span>&#125; &#123;Command:<span class="hljs-number">6316</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">5</span>&#125; &#123;Command:<span class="hljs-number">648</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">6</span>&#125; &#123;Command:<span class="hljs-number">3226</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">7</span>&#125; &#123;Command:<span class="hljs-number">9916</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">8</span>&#125; &#123;Command:<span class="hljs-number">6121</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">9</span>&#125; &#123;Command:<span class="hljs-number">9155</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">10</span>&#125; &#123;Command:<span class="hljs-number">9102</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">11</span>&#125; &#123;Command:<span class="hljs-number">1911</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">12</span>&#125;] LeaderCommit:<span class="hljs-number">0</span>&#125;<br><span class="hljs-number">018754</span> INFO S2 sends hearbeat to S3: &amp;&#123;Term:<span class="hljs-number">4</span> LeaderId:<span class="hljs-number">2</span> PrevLogIndex:<span class="hljs-number">2</span> PrevLogTerm:<span class="hljs-number">3</span> Entries:[&#123;Command:<span class="hljs-number">2420</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">3</span>&#125; &#123;Command:<span class="hljs-number">6554</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">4</span>&#125; &#123;Command:<span class="hljs-number">6316</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">5</span>&#125; &#123;Command:<span class="hljs-number">648</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">6</span>&#125; &#123;Command:<span class="hljs-number">3226</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">7</span>&#125; &#123;Command:<span class="hljs-number">9916</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">8</span>&#125; &#123;Command:<span class="hljs-number">6121</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">9</span>&#125; &#123;Command:<span class="hljs-number">9155</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">10</span>&#125; &#123;Command:<span class="hljs-number">9102</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">11</span>&#125; &#123;Command:<span class="hljs-number">1911</span> Term:<span class="hljs-number">4</span> CommandIndex:<span class="hljs-number">12</span>&#125;] LeaderCommit:<span class="hljs-number">0</span>&#125;<br><span class="hljs-number">018764</span> VOTE S2 receives VoteRequestRpc from S3<br><span class="hljs-number">018764</span> INFO S2 becomes Follower<br><span class="hljs-number">018764</span> TERM S2 changes term from <span class="hljs-number">4</span> to <span class="hljs-number">5</span><br><span class="hljs-number">018866</span> VOTE S2 starts election<br><span class="hljs-number">018867</span> INFO S2 becomes Candidate<br><span class="hljs-number">018867</span> TERM S2 change term from <span class="hljs-number">5</span> to <span class="hljs-number">6</span><br><span class="hljs-number">018867</span> VOTE S2 votes <span class="hljs-keyword">for</span> S2<br><span class="hljs-number">018869</span> VOTE S1 receives VoteRequestRpc from S3<br><span class="hljs-number">018869</span> TERM S1 changes term from <span class="hljs-number">4</span> to <span class="hljs-number">5</span><br><span class="hljs-number">018870</span> VOTE S1 votes <span class="hljs-keyword">for</span> S3<br><span class="hljs-number">018988</span> INFO S3 receives AppendEntriesRpc from S2<br><span class="hljs-number">018988</span> INFO S3 reply AppendEntriesRpc from S2: &amp;Reply&#123;Term: <span class="hljs-number">5</span>, Success: <span class="hljs-literal">false</span>&#125;<br><span class="hljs-number">018992</span> VOTE S3 receives VoteRequestRpc from S2<br><span class="hljs-number">018992</span> INFO S3 becomes Follower<br><span class="hljs-number">018992</span> TERM S3 changes term from <span class="hljs-number">5</span> to <span class="hljs-number">6</span><br><span class="hljs-number">018992</span> VOTE S3 votes <span class="hljs-keyword">for</span> S2<br><span class="hljs-number">019029</span> VOTE S1 receives VoteRequestRpc from S2<br><span class="hljs-number">019029</span> TERM S1 changes term from <span class="hljs-number">5</span> to <span class="hljs-number">6</span><br><span class="hljs-number">019029</span> VOTE S1 votes <span class="hljs-keyword">for</span> S2<br><span class="hljs-number">019032</span> INFO S2 becomes Leader<br><span class="hljs-number">019032</span> LEAD S2 sends hearbeat<br><span class="hljs-number">019033</span> INFO S2 sends hearbeat to S4: &amp;&#123;Term:<span class="hljs-number">6</span> LeaderId:<span class="hljs-number">2</span> PrevLogIndex:<span class="hljs-number">12</span> PrevLogTerm:<span class="hljs-number">4</span> Entries:[] LeaderCommit:<span class="hljs-number">0</span>&#125;<br><span class="hljs-number">019035</span> INFO S1 receives AppendEntriesRpc from S2<br><span class="hljs-number">019035</span> INFO S1 reply AppendEntriesRpc from S2: &amp;Reply&#123;Term: <span class="hljs-number">6</span>, Success: <span class="hljs-literal">false</span>&#125;<br><span class="hljs-built_in">panic</span>: runtime <span class="hljs-type">error</span>: index out of <span class="hljs-keyword">range</span> [<span class="hljs-number">-1</span>]<br></code></pre></td></tr></table></figure><p>这是一个由于负数索引导致的运行崩溃错误，代码如下所示（在第20行崩溃）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go">rf.mu.Lock()<br><span class="hljs-comment">// 已经不是领导人了，直接返回</span><br><span class="hljs-keyword">if</span> rf.role != LEADER &#123;<br>    rf.mu.Unlock()<br>    <span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 跟随者节点已经被Kill了，直接返回</span><br><span class="hljs-keyword">if</span> reply.Term &lt; rf.currentTerm &#123;<br>    rf.mu.Unlock()<br>    <span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> reply.Term &gt; rf.currentTerm &#123;<br>    rf.convertToFollower(reply.Term, <span class="hljs-literal">true</span>)<br>    rf.mu.Unlock()<br>    <span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> !reply.Success &#123;<br>    <span class="hljs-keyword">if</span> reply.XTerm == <span class="hljs-number">-1</span> &#123;<br>        rf.nextIndex[peerId] = prevLogIndex - reply.XLen + <span class="hljs-number">1</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> reply.XTerm == rf.log[reply.XIndex<span class="hljs-number">-1</span>].Term &#123;<br>        rf.nextIndex[peerId] = reply.XIndex + <span class="hljs-number">1</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        rf.nextIndex[peerId] = reply.XIndex<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// ....</span><br>    <span class="hljs-comment">// .....</span><br>&#125;<br>rf.mu.Unlock()<br></code></pre></td></tr></table></figure><p>在我的实现中只有三种情况 <code>reply.Success = false</code>：</p><ul><li><p>节点已经被Kill了，这时候会返回 <code>reply.Term = 0</code></p></li><li><p>收到的心跳的任期号比当前节点的任期号小，这时候会返回 <code>reply.Term=XX</code></p></li><li><p>收到的心跳的<code>prevLogIndex</code>位置的日志不匹配，这时候会返回 <code>reply.XTerm=-1</code> 或 <code>reply.XIndex=YY</code></p></li></ul><p>第一种情况，第八行的代码会将其排除。第二种情况，第十二行代码会将其排除。第三种情况，如果要走到第20行，则只能是 <code>reply.XIndex=YY</code>，但是我的实现中 <code>YY</code> 一定大于0。这样，所有情况都排除了，那么为什么会出现这个问题呢？</p><p>通过观察日志可以发现，在第四行，S2给S1发送了一个心跳：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">S2 sends hearbeat to S1: &amp;&#123;Term:<span class="hljs-number">4</span>, ......&#125;<br></code></pre></td></tr></table></figure><p>此时S2的任期号为4。从第四行到第25行，S2先是变成了Follower，之后又在任期6被选举成为Leader。</p><p>在第28行，S1终于收到了S2发送的心跳，此时S1的保存的任期号为6，因此它会返回 <code>Reply&#123;Term: 6, Success: false, XIndex=0&#125;</code>。这是前面提到的第二种情况，但是此时S2的任期号也变成了6，因此第十二行代码就无法排除这种情况。最终代码就会执行到第20行，导致运行时崩溃。</p><p>可见，这是由于网络延迟导致的错误，解决方法也很简单，在第20行代码之前在加一个判断，如果<code>reply.XIndex=0</code>则不执行后面的代码了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> reply.XTerm == <span class="hljs-number">-1</span> &#123;<br>    rf.nextIndex[peerId] = prevLogIndex - reply.XLen + <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> reply.XIndex != <span class="hljs-number">0</span> &#123;<br>    <span class="hljs-keyword">if</span> reply.XTerm == rf.log[reply.XIndex<span class="hljs-number">-1</span>].Term &#123;<br>        rf.nextIndex[peerId] = reply.XIndex + <span class="hljs-number">1</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        rf.nextIndex[peerId] = reply.XIndex<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解决完上述的两个Bug后，并发跑500次测试，全部顺利通过：</p><img src="/2022/08/06/Raft-4/Raft-%E5%9B%BE1.png" class=""><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://pdos.csail.mit.edu/6.824/">MIT 6.824</a></p></li><li><p><a href="https://raft.github.io/raft.pdf">Raft paper</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>distributed system</category>
      
    </categories>
    
    
    <tags>
      
      <tag>distributed</tag>
      
      <tag>consistency</tag>
      
      <tag>paper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Raft（三）：日志复制</title>
    <link href="/2022/07/31/Raft-3/"/>
    <url>/2022/07/31/Raft-3/</url>
    
    <content type="html"><![CDATA[<h2 id="日志复制"><a href="#日志复制" class="headerlink" title="日志复制"></a>日志复制</h2><p>具体的日志复制算法，在 Raft 论文中说的非常详细：<a href="https://raft.github.io/raft.pdf">Raft paper</a>（第5节、5.3节）。</p><p>在 LAB 2B 的实现中需要施加选举限制：<a href="https://raft.github.io/raft.pdf">Raft paper</a>（第5.4.1节）。</p><p>需要注意的是，Leader 只能提交当前任期内的日志：<a href="https://raft.github.io/raft.pdf">Raft paper</a>（第5.4.2节）。</p><h2 id="日志加速回退"><a href="#日志加速回退" class="headerlink" title="日志加速回退"></a>日志加速回退</h2><p>在 <a href="https://raft.github.io/raft.pdf">Raft paper</a>（第5节）中提到，如果 Leader 向一个 Follower 追加日志失败，就表明 Leader 和 Follower 的日志有冲突，则 Leader 会回退一个 Log，之后再次向跟随者追加日志。</p><p>假设有这样一个场景，我们有5个服务器，有1个 Leader，这个 Leader 和另一个 Follower 困在一个网络分区中。这个 Leader 一直向它唯一的 Follower 发送 AppendEntries，因为没有过半服务器，所以没有一条 Log 会 commit。在另一个有多数服务器的网络分区中，系统会选出新的 Leader 并继续运行。旧的 Leader 和它的 Follower 可能会记录无限多的旧的任期的未 commit 的 Log。当旧的 Leader 和它的 Follower 重新加入到集群中时，这些 Log 需要被删除并覆盖。</p><p>如果 Leader 每次只能在附加日志RPC 失败后回退一个 Log 然后重试的话，可能会耗费大量的时间。因此，需要某些方法来加速日志的回退。</p><p>6.824 的课堂上，Robert 教授给出了一个方法：让 Leader 可以每次回退一整个任期的 Log，而不是只回退一个 Log。</p><p>我们将可能的场景分成3类，在这里假设我们只有一个 Leader(S2)和一个 Follower(S1)，S2 要发送一条任期号为6的 AppendEntries 消息给 S1：</p><p>（1）场景一</p><p>S1没有任期6的 Log，因此我们需要回退一整个任期的 Log。</p><img src="/2022/07/31/Raft-3/Raft-%E5%9B%BE1.png" class=""><p>（2）场景二</p><p>S1 收到了任期4的旧 Leader 的多条 Log，但是作为新 Leader，S2 只收到了一条任期4的 Log。所以这里，我们需要覆盖 S1 中有关旧 Leader 的 Log。</p><img src="/2022/07/31/Raft-3/Raft-%E5%9B%BE2.png" class=""><p>（3）场景三</p><p>S1 与 S2 的 Log 不冲突，但是 S1 缺失了部分 S2 中的Log，这里我们回退掉所有空缺的 Log。</p><img src="/2022/07/31/Raft-3/Raft-%E5%9B%BE3.png" class=""><p>可以让 Follower 在回复 Leader 的 AppendEntries 消息中，携带3个额外的变量，来加速日志的恢复：</p><ul><li><p>XTerm：Follower 与 Leader 冲突的 Log 对应的任期号。如果 Follower 在 PrevLogIndex 位置的任期号与 Leader 不匹配，它会拒绝 Leader 的 AppendEntries 消息，并将自己的任期号放在 XTerm 中。如果 Follower 在对应位置没有 Log，那么这里会返回 -1。</p></li><li><p>XIndex：Folower 中任期号为 XTerm 的第一条 Log 的槽位号。</p></li><li><p>XLen：如果 Follower 在 PrevLogIndex 位置没有 Log，那么 XTerm 会返回-1，XLen 表示空白的 Log 槽位数。</p></li></ul><p>Leader 收到错误返回时，就可以根据上述信息加速日志回退：</p><ul><li><p>场景一：S1 会返回 XTerm&#x3D;5，XIndex&#x3D;2。S2 发现自己没有任期5的日志，它会将 S1 的 nextIndex 设置为 XIndex，也就是S1中，任期5的第一条Log对应的槽位号。</p></li><li><p>场景二：S1 会返回 XTerm&#x3D;4，XIndex&#x3D;1。S2 发现自己有任期4的日志，它会将 S1 的 nextIndex 设置为 XIndex+1。</p></li><li><p>场景三：S1 会返回 XTerm&#x3D;-1，XLen&#x3D;2。这表示 S1 中日志太短了，在冲突的位置没有 Log 条目，Leader 应该回退到 Follower 最后一条 Log 条目的下一条，也就是说 S2 会将 S1 的 nextIndex 设置为 nextIndex-XLen。</p></li></ul><h2 id="LAB-2B-中遇到的问题"><a href="#LAB-2B-中遇到的问题" class="headerlink" title="LAB 2B 中遇到的问题"></a>LAB 2B 中遇到的问题</h2><p>最后说一说，在实现 6.824 的 LAB 2B 的过程中遇到的一些 Bug。</p><h3 id="Bug-1"><a href="#Bug-1" class="headerlink" title="Bug 1"></a>Bug 1</h3><p>在运行 LAB 2B 的测试后，第一个没有通过的是测试 <code>TestRPCBytes2B</code>。错误日志如下所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go">S0 starts running                                                                                                                        <br>                                               S1 starts running                                                                         <br>                                                                                            S2 starts running                            <br>                                                                                            S2 starts election                           <br>                                                                                            S2 becomes Candidate                         <br>                                                                                            S2 change term from <span class="hljs-number">0</span> to <span class="hljs-number">1</span>                   <br>                                                                                            S2 votes <span class="hljs-keyword">for</span> S2                              <br>S0 receives VoteRequestRpc from S2                                                                                                       <br>S0 becomes Follower                                                                                                                      <br>S0 changes term from <span class="hljs-number">1</span> to <span class="hljs-number">1</span>                                                                                                              <br>S0 votes <span class="hljs-keyword">for</span> S2                                                                                                                          <br>                                                                                            S2 becomes Leader                            <br>                                               S1 receives VoteRequestRpc from S2                                                        <br>                                               S1 becomes Follower                                                                       <br>                                               S1 changes term from <span class="hljs-number">1</span> to <span class="hljs-number">1</span>                                                               <br>                                               S1 votes <span class="hljs-keyword">for</span> S2                                                                           <br>                                                                                            S2 sends hearbeat                            <br>                                                                                            S2 becomes Leader                            <br>                                                                                            S2 sends hearbeat                                <br></code></pre></td></tr></table></figure><p>在错误日志中，S2 连续两次成为 Leader，导致 S2 中运行了两个 <code>heartbeat ticker</code>，因此 S2 就会发送比正常的 Leader 的两倍字节数，所以无法通过 <code>TestRPCBytes2B</code> 测试。</p><p>根据错误原因，可以定位错误是在请求投票的实现中，代码如下所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(rf *Raft)</span></span> startElection() &#123;<br>    <span class="hljs-comment">// 省略。。。。</span><br><br>    receivedVotes := <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> rf.peers &#123;<br>        <span class="hljs-keyword">if</span> i == rf.me &#123;<br>            <span class="hljs-keyword">continue</span><br>        &#125;<br>        <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(peerId <span class="hljs-type">int</span>)</span></span> &#123;<br>            rf.mu.Lock()<br>            <span class="hljs-comment">// 已经不是候选者了，直接返回</span><br>            <span class="hljs-keyword">if</span> rf.role != CANDIDATE &#123;<br>                rf.mu.Unlock()<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            args := &amp;RequestVoteArgs&#123;<br>                Term:         rf.currentTerm,<br>                CandidateId:  rf.me,<br>                LastLogIndex: rf.lastLogIndex,<br>                LastLogTerm:  rf.lastLogTerm,<br>            &#125;<br>            reply := &amp;RequestVoteReply&#123;&#125;<br>            rf.mu.Unlock()<br><br>            <span class="hljs-keyword">if</span> !rf.sendRequestVote(peerId, args, reply) &#123;<br>                <span class="hljs-keyword">return</span><br>            &#125;<br><br>            rf.mu.Lock()<br>            <span class="hljs-keyword">if</span> reply.Term &gt; rf.currentTerm &#123;<br>                rf.convertToFollower(reply.Term)<br>                rf.mu.Unlock()<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> !reply.VoteGranted &#123;<br>                rf.mu.Unlock()<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            receivedVotes++<br>            <span class="hljs-keyword">if</span> receivedVotes*<span class="hljs-number">2</span> &gt; <span class="hljs-built_in">len</span>(rf.peers) &#123;<br>                rf.convertToLeader()<br>            &#125;<br>            rf.mu.Unlock()<br>        &#125;(i)<br>    &#125;<br><br>    <span class="hljs-comment">// 省略。。。。</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们把 Go 程中锁的使用分成两部分，第一部分：第10行（上锁）——第23行（解锁），第二部分：第29行（上锁）——第43行（解锁）。</p><p>假设所有的 Go 程都执行完第一部分后，再执行第二部分。这样所有的 Go 程都能发送请求投票RPC，因为此时当前的节点一定是跟随者。这样，当执行第二部分时，在得到的投票数达到半数服务器数量后，每多收到一票，就会调用 <code>rf.convertToLeader()</code> 转化为跟随者，从而导致上述的错误。</p><p>解决方法很简单，只需要在第二部分的开头增加一个对当前节点是否还是候选者的判断即可：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(rf *Raft)</span></span> startElection() &#123;<br>    <span class="hljs-comment">// 省略。。。。</span><br><br>    receivedVotes := <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> rf.peers &#123;<br>        <span class="hljs-keyword">if</span> i == rf.me &#123;<br>            <span class="hljs-keyword">continue</span><br>        &#125;<br>        <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(peerId <span class="hljs-type">int</span>)</span></span> &#123;<br>            rf.mu.Lock()<br>            <span class="hljs-comment">// 已经不是候选者了，直接返回</span><br>            <span class="hljs-keyword">if</span> rf.role != CANDIDATE &#123;<br>                rf.mu.Unlock()<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            args := &amp;RequestVoteArgs&#123;<br>                Term:         rf.currentTerm,<br>                CandidateId:  rf.me,<br>                LastLogIndex: rf.lastLogIndex,<br>                LastLogTerm:  rf.lastLogTerm,<br>            &#125;<br>            reply := &amp;RequestVoteReply&#123;&#125;<br>            rf.mu.Unlock()<br><br>            <span class="hljs-keyword">if</span> !rf.sendRequestVote(peerId, args, reply) &#123;<br>                <span class="hljs-keyword">return</span><br>            &#125;<br><br>            rf.mu.Lock()<br>            <span class="hljs-comment">// 已经不是候选者了，直接返回</span><br>            <span class="hljs-keyword">if</span> rf.role != CANDIDATE &#123;<br>                rf.mu.Unlock()<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> reply.Term &gt; rf.currentTerm &#123;<br>                rf.convertToFollower(reply.Term)<br>                rf.mu.Unlock()<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> !reply.VoteGranted &#123;<br>                rf.mu.Unlock()<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            receivedVotes++<br>            <span class="hljs-keyword">if</span> receivedVotes*<span class="hljs-number">2</span> &gt; <span class="hljs-built_in">len</span>(rf.peers) &#123;<br>                rf.convertToLeader()<br>            &#125;<br>            rf.mu.Unlock()<br>        &#125;(i)<br>    &#125;<br><br>    <span class="hljs-comment">// 省略。。。。</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Bug-2"><a href="#Bug-2" class="headerlink" title="Bug 2"></a>Bug 2</h3><p>遇到的第二个 Bug 是由于使用负数索引导致的运行时崩溃，报错如下所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go">Test (<span class="hljs-number">2</span>A): initial election ...<br>  ... Passed --   <span class="hljs-number">3.1</span>  <span class="hljs-number">3</span>   <span class="hljs-number">56</span>   <span class="hljs-number">16914</span>    <span class="hljs-number">0</span><br>Test (<span class="hljs-number">2</span>A): election after network failure ...<br><span class="hljs-number">2022</span>/<span class="hljs-number">07</span>/<span class="hljs-number">30</span> <span class="hljs-number">18</span>:<span class="hljs-number">00</span>:<span class="hljs-number">11</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-built_in">panic</span>: runtime <span class="hljs-type">error</span>: index out of <span class="hljs-keyword">range</span> [<span class="hljs-number">-1</span>]<br><br>goroutine <span class="hljs-number">230</span> [running]:<br><span class="hljs-number">6.824</span>/raft.(*Raft).sendHearbeat.func1(<span class="hljs-number">0xc0000c81e0</span>, <span class="hljs-number">0x1</span>)<br>    /mnt/d/code/projects/distributed-system/<span class="hljs-number">6.824</span>/src/raft/raft.<span class="hljs-keyword">go</span>:<span class="hljs-number">613</span> +<span class="hljs-number">0x66f</span><br>created by <span class="hljs-number">6.824</span>/raft.(*Raft).sendHearbeat<br>    /mnt/d/code/projects/distributed-system/<span class="hljs-number">6.824</span>/src/raft/raft.<span class="hljs-keyword">go</span>:<span class="hljs-number">571</span> +<span class="hljs-number">0x64</span><br>exit status <span class="hljs-number">2</span><br>FAIL    <span class="hljs-number">6.824</span>/raft    <span class="hljs-number">3.157</span>s<br></code></pre></td></tr></table></figure><p>索引越界具体发生在代码的613行：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> reply.XTerm == rf.log[reply.XIndex<span class="hljs-number">-1</span>].Term<br></code></pre></td></tr></table></figure><p>通过日志可以知道，发生错误时心跳 RPC 得到的返回消息是：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">Reply &#123;<br>    Term: <span class="hljs-number">0</span><br>    Success: <span class="hljs-literal">false</span><br>    XTerm: <span class="hljs-number">0</span><br>    XIndex: <span class="hljs-number">0</span><br>    XLen: <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>根据 Term&#x3D;0 和 Success&#x3D;false 可以看出跟随者似乎没有执行任何对心跳消息的处理就直接返回了。可以推断出，跟随者应该是已经”死掉“了，因此才没有执行对心跳消息的处理。</p><p>解决方法是，在发送心跳的函数中增加对跟随者节点状态的判断，代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> reply.Term &lt; rf.currentTerm &#123;<br>    rf.mu.Unlock()<br>    <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>只要 <code>reply.Term</code> 小于 Leader 的任期号，就可以知道跟随者没有对 Leader 发送的心跳进行处理，那么跟随者自然就已经”死掉了“。</p><h3 id="Bug-3"><a href="#Bug-3" class="headerlink" title="Bug 3"></a>Bug 3</h3><p>第三个遇到的问题是 <code>TestRejoin2B</code> 测试失败，失败的日志如下所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs go">S0 sends hearbeat                                                                                                                                                           <br>S0 sends hearbeat to <span class="hljs-number">2</span>: &amp;&#123;Term:<span class="hljs-number">3</span>                                                                                                                                            <br>LeaderId:<span class="hljs-number">0</span> PrevLogIndex:<span class="hljs-number">3</span>                                                                                                                                                   <br>PrevLogTerm:<span class="hljs-number">3</span> Entries:[]                                                                                                                                                    <br>LeaderCommit:<span class="hljs-number">3</span>&#125;                                                                                                                                                             <br>S0 sends hearbeat to <span class="hljs-number">1</span>: &amp;&#123;Term:<span class="hljs-number">3</span>                                                                                                                                            <br>LeaderId:<span class="hljs-number">0</span> PrevLogIndex:<span class="hljs-number">2</span>                                                                                                                                                   <br>PrevLogTerm:<span class="hljs-number">2</span> Entries:[&#123;Command:<span class="hljs-number">104</span>                                                                                                                                         <br>Term:<span class="hljs-number">3</span> CommandIndex:<span class="hljs-number">3</span>&#125;]                                                                                                                                                     <br>LeaderCommit:<span class="hljs-number">3</span>&#125;                                                                                                                                                             <br>                                                                      S2 receives AppendEntriesRpc from                                                                     <br>                                                                      S0                                                                                                    <br>                                                                      S2 appends logs: []                                                                                   <br>                                                                      S2 changes commitIndex from <span class="hljs-number">2</span> to                                                                      <br>                                                                      <span class="hljs-number">3</span>                                                                                                     <br>                                                                      S2 reply AppendEntriesRpc from                                                                        <br>                                                                      S0: &amp;&#123;Term:<span class="hljs-number">3</span> Success:<span class="hljs-literal">true</span> XTerm:<span class="hljs-number">0</span>                                                                     <br>                                                                      XIndex:<span class="hljs-number">0</span> XLen:<span class="hljs-number">0</span>&#125;                                                                                      <br>                                                                      S2 applies msg&#123;Command:                                                                               <br>                                                                      %!s(<span class="hljs-type">int</span>=<span class="hljs-number">104</span>), Index: <span class="hljs-number">3</span>&#125;                                                                               <br>                                                                      S2 change lastApplied from <span class="hljs-number">2</span> to <span class="hljs-number">3</span>                                                                     <br>                                    S1 appends a log: &#123;Command:<span class="hljs-number">105</span>                                                                                                          <br>                                    Term:<span class="hljs-number">2</span> CommandIndex:<span class="hljs-number">3</span>&#125;                                                                                                                  <br>                                    S1 sends hearbeat                                                                                                                       <br>                                    S1 sends hearbeat to <span class="hljs-number">2</span>: &amp;&#123;Term:<span class="hljs-number">2</span>                                                                                                        <br>                                    LeaderId:<span class="hljs-number">1</span> PrevLogIndex:<span class="hljs-number">1</span>                                                                                                               <br>                                    PrevLogTerm:<span class="hljs-number">1</span>                                                                                                                           <br>                                    Entries:[&#123;Command:<span class="hljs-number">103</span> Term:<span class="hljs-number">2</span>                                                                                                            <br>                                    CommandIndex:<span class="hljs-number">2</span>&#125; &#123;Command:<span class="hljs-number">105</span>                                                                                                            <br>                                    Term:<span class="hljs-number">2</span> CommandIndex:<span class="hljs-number">3</span>&#125;]                                                                                                                 <br>                                    LeaderCommit:<span class="hljs-number">2</span>&#125;                                                                                                                         <br>                                                                      S2 receives AppendEntriesRpc from                                                                     <br>                                                                      S1                                                                                                    <br>                                                                      S2 reply AppendEntriesRpc from                                                                        <br>                                                                      S1: &amp;Reply&#123;Term: <span class="hljs-number">3</span>, Success:                                                                          <br>                                                                      <span class="hljs-literal">false</span>&#125;                                                                                                <br>                                    S1 becomes Follower                                                                                                                     <br>                                    S1 changes term from <span class="hljs-number">3</span> to <span class="hljs-number">3</span>                                                                                                             <br>                                    S1 sends hearbeat to <span class="hljs-number">0</span>: &amp;&#123;Term:<span class="hljs-number">3</span>                                                                                                        <br>                                    LeaderId:<span class="hljs-number">1</span> PrevLogIndex:<span class="hljs-number">2</span>                                                                                                               <br>                                    PrevLogTerm:<span class="hljs-number">2</span>                                                                                                                           <br>                                    Entries:[&#123;Command:<span class="hljs-number">105</span> Term:<span class="hljs-number">2</span>                                                                                                            <br>                                    CommandIndex:<span class="hljs-number">3</span>&#125;] LeaderCommit:<span class="hljs-number">2</span>&#125;                                                                                                        <br>S0 receives AppendEntriesRpc from                                                                                                                                           <br>S1                                                                                                                                                                          <br>S0 becomes Follower                                                                                                                                                         <br>S0 appends logs: [&#123;Command:<span class="hljs-number">105</span>                                                                                                                                              <br>Term:<span class="hljs-number">2</span> CommandIndex:<span class="hljs-number">3</span>&#125;]                                                                                                                                                     <br>S0 reply AppendEntriesRpc from S1:                                                                                                                                          <br>&amp;&#123;Term:<span class="hljs-number">3</span> Success:<span class="hljs-literal">true</span> XTerm:<span class="hljs-number">0</span>                                                                                                                                               <br>XIndex:<span class="hljs-number">0</span> XLen:<span class="hljs-number">0</span>&#125;                  <br></code></pre></td></tr></table></figure><p>在上面的日志中，S0 是 Leader 并且和 S2 可以正常通信，S1 被困在一个单独的网络分区中，并且自认为自己是 Leader。</p><p>当 S1 恢复正常后，S1 向 S2 发送 AppendEntries，然后收到了拒绝回复，并根据回复中的任期号重置自己的任期号，将自己转化为跟随者。到这里一切都还正常，但是接着 S1 继续向 S0 发送了 AppendEntries，导致 S0 退化成了跟随者，并且被追加了一条来自跟随者的日志，从而导致错误。</p><p>错误原因很明显，S1 在发送 AppendEntries 之前没有判断自己是否还是 Leader，因此在 S1 转变为跟随者之后，S1 仍然向 S0 发送了RPC消息。</p><p>那么，只需要在发送 AppendEntries 之前加一个小的条件判断即可：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 已经不是领导人了，直接返回</span><br><span class="hljs-keyword">if</span> rf.role != LEADER &#123;<br>    rf.mu.Unlock()<br>    <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Bug-4"><a href="#Bug-4" class="headerlink" title="Bug 4"></a>Bug 4</h3><p>最后遇到的 Bug 是没有通过 <code>TestFailNoAgree2B</code> 测试，错误日志如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs go">S0 starts running                                                                                                                                                           <br>                                    S1 starts running                                                                                                                       <br>                                                                      S2 starts running                                                                                     <br>                                                                                                        S3 starts running                                                   <br>                                                                                                                                          S4 starts running                 <br>S0 starts election                                                                                                                                                          <br>S0 becomes Candidate                                                                                                                                                        <br>S0 change term from <span class="hljs-number">0</span> to <span class="hljs-number">1</span>                                                                                                                                                  <br>S0 votes <span class="hljs-keyword">for</span> S0                                                                                                                                                             <br>                                    S1 receives VoteRequestRpc from                                                                                                         <br>                                    S0                                                                                                                                      <br>                                    S1 changes term from <span class="hljs-number">0</span> to <span class="hljs-number">1</span>                                                                                                             <br>                                    S1 votes <span class="hljs-keyword">for</span> S0                                                                                                                         <br>                                                                      S2 receives VoteRequestRpc from                                                                       <br>                                                                      S0                                                                                                    <br>                                                                      S2 changes term from <span class="hljs-number">0</span> to <span class="hljs-number">1</span>                                                                           <br>                                                                      S2 votes <span class="hljs-keyword">for</span> S0                                                                                       <br>S0 becomes Leader                                                                                                                                                           <br>S0 sends hearbeat                                                                                                                                                           <br>S0 sends hearbeat to S4: &amp;&#123;Term:<span class="hljs-number">1</span>                                                                                                                                           <br>LeaderId:<span class="hljs-number">0</span> PrevLogIndex:<span class="hljs-number">0</span>                                                                                                                                                   <br>PrevLogTerm:<span class="hljs-number">0</span> Entries:[]                                                                                                                                                    <br>LeaderCommit:<span class="hljs-number">0</span>&#125;                                                                                                                                                             <br>                                                                                                                                          S4 receives AppendEntriesRpc from <br>                                                                                                                                          S0                                <br>                                                                                                                                          S4 changes term from <span class="hljs-number">0</span> to <span class="hljs-number">1</span>       <br>                                                                                                                                          S4 appends logs: []               <br>                                                                                                                                          S4 reply AppendEntriesRpc from S0:<br>                                                                                                                                          &amp;&#123;Term:<span class="hljs-number">1</span> Success:<span class="hljs-literal">true</span> XTerm:<span class="hljs-number">0</span>     <br>                                                                                                                                          XIndex:<span class="hljs-number">0</span> XLen:<span class="hljs-number">0</span>&#125;                  <br>S0 sends hearbeat to S1: &amp;&#123;Term:<span class="hljs-number">1</span>                                                                                                                                           <br>LeaderId:<span class="hljs-number">0</span> PrevLogIndex:<span class="hljs-number">0</span>                                                                                                                                                   <br>PrevLogTerm:<span class="hljs-number">0</span> Entries:[]                                                                                                                                                    <br>LeaderCommit:<span class="hljs-number">0</span>&#125;                                                                                                                                                             <br>                                    S1 receives AppendEntriesRpc from                                                                                                       <br>                                    S0                                                                                                                                      <br>                                    S1 appends logs: []                                                                                                                     <br>                                    S1 reply AppendEntriesRpc from                                                                                                          <br>                                    S0: &amp;&#123;Term:<span class="hljs-number">1</span> Success:<span class="hljs-literal">true</span> XTerm:<span class="hljs-number">0</span>                                                                                                       <br>                                    XIndex:<span class="hljs-number">0</span> XLen:<span class="hljs-number">0</span>&#125;                                                                                                                        <br>S0 sends hearbeat to S3: &amp;&#123;Term:<span class="hljs-number">1</span>                                                                                                                                           <br>LeaderId:<span class="hljs-number">0</span> PrevLogIndex:<span class="hljs-number">0</span>                                                                                                                                                   <br>PrevLogTerm:<span class="hljs-number">0</span> Entries:[]                                                                                                                                                    <br>LeaderCommit:<span class="hljs-number">0</span>&#125;                                                                                                                                                             <br>                                                                                                        S3 starts election                                                  <br>                                                                                                        S3 becomes Candidate                                                <br>                                                                                                        S3 change term from <span class="hljs-number">0</span> to <span class="hljs-number">1</span>                                          <br>                                                                                                        S3 votes <span class="hljs-keyword">for</span> S3                                                     <br>S0 appends a log: &#123;Command:<span class="hljs-number">10</span>                                                                                                                                               <br>Term:<span class="hljs-number">1</span> CommandIndex:<span class="hljs-number">1</span>&#125;                                                                                                                                                      <br>S0 sends hearbeat                                                                                                                                                           <br>S0 sends hearbeat to S4: &amp;&#123;Term:<span class="hljs-number">1</span>                                                                                                                                           <br>LeaderId:<span class="hljs-number">0</span> PrevLogIndex:<span class="hljs-number">0</span>                                                                                                                                                   <br>PrevLogTerm:<span class="hljs-number">0</span> Entries:[&#123;Command:<span class="hljs-number">10</span>                                                                                                                                          <br>Term:<span class="hljs-number">1</span> CommandIndex:<span class="hljs-number">1</span>&#125;]                                                                                                                                                     <br>LeaderCommit:<span class="hljs-number">0</span>&#125;                                                                                                                                                             <br>                                                                                                                                          S4 receives AppendEntriesRpc from <br>                                                                                                                                          S0                                <br>                                                                                                                                          S4 appends logs: [&#123;Command:<span class="hljs-number">10</span>     <br>                                                                                                                                          Term:<span class="hljs-number">1</span> CommandIndex:<span class="hljs-number">1</span>&#125;]           <br>                                                                                                                                          S4 reply AppendEntriesRpc from S0:<br>                                                                                                                                          &amp;&#123;Term:<span class="hljs-number">1</span> Success:<span class="hljs-literal">true</span> XTerm:<span class="hljs-number">0</span>     <br>                                                                                                                                          XIndex:<span class="hljs-number">0</span> XLen:<span class="hljs-number">0</span>&#125;                  <br>S0 sends hearbeat to S2: &amp;&#123;Term:<span class="hljs-number">1</span>                                                                                                                                           <br>LeaderId:<span class="hljs-number">0</span> PrevLogIndex:<span class="hljs-number">0</span>                                                                                                                                                   <br>PrevLogTerm:<span class="hljs-number">0</span> Entries:[]                                                                                                                                                    <br>LeaderCommit:<span class="hljs-number">0</span>&#125;                                                                                                                                                             <br>                                                                      S2 receives AppendEntriesRpc from                                                                     <br>                                                                      S0                                                                                                    <br>                                                                      S2 appends logs: []                                                                                   <br>                                                                      S2 reply AppendEntriesRpc from                                                                        <br>                                                                      S0: &amp;&#123;Term:<span class="hljs-number">1</span> Success:<span class="hljs-literal">true</span> XTerm:<span class="hljs-number">0</span>                                                                     <br>                                                                      XIndex:<span class="hljs-number">0</span> XLen:<span class="hljs-number">0</span>&#125;                                                                                      <br>S0 receives VoteRequestRpc from S3                                                                                                                                          <br>                                    S1 receives VoteRequestRpc from                                                                                                         <br>                                    S3                                                                                                                                      <br>                                                                      S2 receives VoteRequestRpc from                                                                       <br>                                                                      S3                                                                                                    <br>                                                                                                                                          S4 receives VoteRequestRpc from S3<br>S0 sends hearbeat to S1: &amp;&#123;Term:<span class="hljs-number">1</span>                                                                                                                                           <br>LeaderId:<span class="hljs-number">0</span> PrevLogIndex:<span class="hljs-number">0</span>                                                                                                                                                   <br>PrevLogTerm:<span class="hljs-number">0</span> Entries:[&#123;Command:<span class="hljs-number">10</span>                                                                                                                                          <br>Term:<span class="hljs-number">1</span> CommandIndex:<span class="hljs-number">1</span>&#125;]                                                                                                                                                     <br>LeaderCommit:<span class="hljs-number">0</span>&#125;                                                                                                                                                             <br>                                    S1 receives AppendEntriesRpc from                                                                                                       <br>                                    S0                                                                                                                                      <br>                                    S1 appends logs: [&#123;Command:<span class="hljs-number">10</span>                                                                                                           <br>                                    Term:<span class="hljs-number">1</span> CommandIndex:<span class="hljs-number">1</span>&#125;]                                                                                                                 <br>                                    S1 reply AppendEntriesRpc from                                                                                                          <br>                                    S0: &amp;&#123;Term:<span class="hljs-number">1</span> Success:<span class="hljs-literal">true</span> XTerm:<span class="hljs-number">0</span>                                                                                                       <br>                                    XIndex:<span class="hljs-number">0</span> XLen:<span class="hljs-number">0</span>&#125;                                                                                                                        <br>S0 changes commitIndex from <span class="hljs-number">0</span> to <span class="hljs-number">1</span>                                                                                                                                          <br>S0 sends hearbeat to S2: &amp;&#123;Term:<span class="hljs-number">1</span>                                                                                                                                           <br>LeaderId:<span class="hljs-number">0</span> PrevLogIndex:<span class="hljs-number">0</span>                                                                                                                                                   <br>PrevLogTerm:<span class="hljs-number">0</span> Entries:[&#123;Command:<span class="hljs-number">10</span>                                                                                                                                          <br>Term:<span class="hljs-number">1</span> CommandIndex:<span class="hljs-number">1</span>&#125;]                                                                                                                                                     <br>LeaderCommit:<span class="hljs-number">1</span>&#125;                                                                                                                                                             <br>                                                                      S2 receives AppendEntriesRpc from                                                                     <br>                                                                      S0                                                                                                    <br>                                                                      S2 appends logs: [&#123;Command:<span class="hljs-number">10</span>                                                                         <br>                                                                      Term:<span class="hljs-number">1</span> CommandIndex:<span class="hljs-number">1</span>&#125;]                                                                               <br>                                                                      S2 changes commitIndex from <span class="hljs-number">0</span> to                                                                      <br>                                                                      <span class="hljs-number">1</span>                                                                                                     <br>                                                                      S2 reply AppendEntriesRpc from                                                                        <br>                                                                      S0: &amp;&#123;Term:<span class="hljs-number">1</span> Success:<span class="hljs-literal">true</span> XTerm:<span class="hljs-number">0</span>                                                                     <br>                                                                      XIndex:<span class="hljs-number">0</span> XLen:<span class="hljs-number">0</span>&#125;                                                                                      <br>S0 sends hearbeat to S3: &amp;&#123;Term:<span class="hljs-number">1</span>                                                                                                                                           <br>LeaderId:<span class="hljs-number">0</span> PrevLogIndex:<span class="hljs-number">0</span>                                                                                                                                                   <br>PrevLogTerm:<span class="hljs-number">0</span> Entries:[&#123;Command:<span class="hljs-number">10</span>                                                                                                                                          <br>Term:<span class="hljs-number">1</span> CommandIndex:<span class="hljs-number">1</span>&#125;]                                                                                                                                                     <br>LeaderCommit:<span class="hljs-number">1</span>&#125;                                                                                                                                                             <br>                                                                                                        S3 receives AppendEntriesRpc from                                   <br>                                                                                                        S0                                                                  <br>                                                                                                        S3 becomes Follower                                                 <br>                                                                                                        S3 appends logs: [&#123;Command:<span class="hljs-number">10</span>                                       <br>                                                                                                        Term:<span class="hljs-number">1</span> CommandIndex:<span class="hljs-number">1</span>&#125;]                                             <br>                                                                                                        S3 changes commitIndex from <span class="hljs-number">0</span> to                                    <br>                                                                                                        <span class="hljs-number">1</span>                                                                   <br>                                                                                                        S3 reply AppendEntriesRpc from                                      <br>                                                                                                        S0: &amp;&#123;Term:<span class="hljs-number">1</span> Success:<span class="hljs-literal">true</span> XTerm:<span class="hljs-number">0</span>                                   <br>                                                                                                        XIndex:<span class="hljs-number">0</span> XLen:<span class="hljs-number">0</span>&#125;                                                    <br>                                                                                                        S3 receives AppendEntriesRpc from                                   <br>                                                                                                        S0                                                                  <br>                                                                                                        S3 appends logs: []                                                 <br>                                                                                                        S3 reply AppendEntriesRpc from                                      <br>                                                                                                        S0: &amp;&#123;Term:<span class="hljs-number">1</span> Success:<span class="hljs-literal">true</span> XTerm:<span class="hljs-number">0</span>                                   <br>                                                                                                        XIndex:<span class="hljs-number">0</span> XLen:<span class="hljs-number">0</span>&#125;                                                    <br>                                                                      S2 applies msg&#123;Command:                                                                               <br>                                                                      %!s(<span class="hljs-type">int</span>=<span class="hljs-number">10</span>), Index: <span class="hljs-number">1</span>&#125;                                                                                <br>                                                                      S2 change lastApplied from <span class="hljs-number">0</span> to <span class="hljs-number">1</span>                                                                     <br>S0 applies msg&#123;Command:                                                                                                                                                     <br>%!s(<span class="hljs-type">int</span>=<span class="hljs-number">10</span>), Index: <span class="hljs-number">1</span>&#125;                                                                                                                                                      <br>S0 change lastApplied from <span class="hljs-number">0</span> to <span class="hljs-number">1</span>                                                                                                                                           <br><br><br><br><span class="hljs-number">6.824</span>/raft.(*Raft).applyMsgToStateMachine(<span class="hljs-number">0xc0000e02d0</span>)<br><br>FAIL    <span class="hljs-number">6.824</span>/raft      <span class="hljs-number">0.767</span>s<br></code></pre></td></tr></table></figure><p>在这个场景中，S0 收到了 S1 和 S2 的投票，在第20行成为了 Leader。之后 S0 在43行发送附加日志给 S3，附加日志的请求内容为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">S0 sends hearbeat to S1: &amp;&#123;Term:<span class="hljs-number">1</span> LeaderId:<span class="hljs-number">0</span> PrevLogIndex:<span class="hljs-number">0</span> <br>PrevLogTerm:<span class="hljs-number">0</span> Entries:[] LeaderCommit:<span class="hljs-number">0</span>&#125; <br></code></pre></td></tr></table></figure><p>之后，S0在51行收到了客户端的请求，并添加了一条日志：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">S0 appends a log: &#123;Command:<span class="hljs-number">10</span> Term:<span class="hljs-number">1</span> CommandIndex:<span class="hljs-number">1</span>&#125;    <br></code></pre></td></tr></table></figure><p>接着，S0 在第109行将追加的日志发送给 S3：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">S0 sends hearbeat to S3: &amp;&#123;<br>    Term:<span class="hljs-number">1</span> LeaderId:<span class="hljs-number">0</span> PrevLogIndex:<span class="hljs-number">0</span>                                                                                                                                                   <br>    PrevLogTerm:<span class="hljs-number">0</span> Entries:[&#123;Command:<span class="hljs-number">10</span> Term:<span class="hljs-number">1</span> CommandIndex:<span class="hljs-number">1</span>&#125;]                                                                                                                                                     <br>    LeaderCommit:<span class="hljs-number">1</span>&#125;<br></code></pre></td></tr></table></figure><p>但是 S3 在第118行首先收到了第二条附加日志RPC：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">S3 receives AppendEntriesRpc from S0                                                                  <br>S3 becomes Follower                                                 <br>S3 appends logs: [&#123;Command:<span class="hljs-number">10</span> Term:<span class="hljs-number">1</span> CommandIndex:<span class="hljs-number">1</span>&#125;]                                             <br>S3 changes commitIndex from <span class="hljs-number">0</span> to <span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure><p>S3 在125行才收到第一条附加日志RPC：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">S3 receives AppendEntriesRpc from S0                                                                                                       <br>S3 appends logs: []<br></code></pre></td></tr></table></figure><p>由于RPC请求的乱序到达，S3 首先会收到第二条附加日志RPC，它会追加一条日志。之后才会收到一条附加日志RPC，这这个RPC的 Entries 是空的，这回导致 S3 覆盖掉之前追加的日志。</p><p>但是 S3 此时已经将 CommitIndex 修改为1，之后 S3 会应用 ComminIndex 位置的日志到状态机中，但是对应位置的日志是空的，这就导致了错误。</p><p>很明显，在收到第一条附加日志RPC后，我们不能覆盖掉之前的追加的日志，因此在追加日志的实现中应该加一些判断：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">logIndex, entriesIndex := args.PrevLogIndex+<span class="hljs-number">1</span>, <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> logIndex &lt;= rf.lastLogIndex &amp;&amp; entriesIndex &lt; <span class="hljs-built_in">len</span>(args.Entries) &amp;&amp; rf.log[logIndex<span class="hljs-number">-1</span>] == args.Entries[entriesIndex] &#123;<br>    logIndex++<br>    entriesIndex++<br>&#125;<br><span class="hljs-keyword">if</span> !(entriesIndex == <span class="hljs-built_in">len</span>(args.Entries) &amp;&amp; logIndex &lt;= rf.lastLogIndex &amp;&amp; rf.log[logIndex<span class="hljs-number">-1</span>].Term == args.Term) &#123;<br>    rf.log = <span class="hljs-built_in">append</span>(rf.log[:logIndex<span class="hljs-number">-1</span>], args.Entries[entriesIndex:]...)<br>&#125;<br></code></pre></td></tr></table></figure><p>首先，我们扫描发送过来的日志和本地的日志，找到第一条不匹配的日志的位置X。在之前的实现中，没有第6行的判断，直接执行第7行的追加日志操作，这可能导致已有的日志被覆盖。</p><p>如果剩下的需要追加的日志为空，并且X对应的位置存在日志，如果X对应的日志的任期与当前的 Leader 的任期号相等，说明X对应的日志是当前Leader发送过来的，那么就不应该覆盖掉它。</p><p>除了上述情况，都可以直接执行 <code>rf.log = append(rf.log[:logIndex-1], args.Entries[entriesIndex:]...)</code> 把剩下的日志复制过去。</p><p>在解决完所有 Bug 后并发跑500次测试，全部顺利通过：</p><img src="/2022/07/31/Raft-3/Raft-%E5%9B%BE5.png" class=""><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://pdos.csail.mit.edu/6.824/">MIT 6.824</a></p></li><li><p><a href="https://raft.github.io/raft.pdf">Raft paper</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>distributed system</category>
      
    </categories>
    
    
    <tags>
      
      <tag>distributed</tag>
      
      <tag>consistency</tag>
      
      <tag>paper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Raft（二）：Leader选举</title>
    <link href="/2022/07/25/Raft-2/"/>
    <url>/2022/07/25/Raft-2/</url>
    
    <content type="html"><![CDATA[<h2 id="脑裂"><a href="#脑裂" class="headerlink" title="脑裂"></a>脑裂</h2><p>在多副本的分布式系统中，通常会存在一个 Primary 节点，由它来决定整个系统的决策，这样可以简化一致性的实现，因为 Priamry 只需要强迫其他节点与它保持一致即可。</p><p>但是 Primary 节点本身会发生故障，之后我们需要选出一个新的 Primary 节点，这样就可能会面临<strong>脑裂</strong>的场景。</p><p>现在我们以 VMware FT 为例，来说明为什么会出现脑裂。假设在一个网络中有两台服务器 S1 和 S2 ，这两台服务器是 Test-and-Set 服务的副本，这个网络中还有两个客户端 C1 和 C2 ，现在它们需要通过 Test-and-Set 服务确定谁是 Primary。</p><img src="/2022/07/25/Raft-2/Raft-%E5%9B%BE1.png" class=""><p>在正常情况下，Test-and-Set 服务中的数据记录从0开始。一个客户端会向两台服务器发送 Test-and-Set 指令，这个指令会把两台服务器中的数据记录设置为1，之后返回 Success 响应。如果服务器中的数据记录已经被设置，那么另一个客户端发送 Test-and-Set 指令后，则会收到一个 Fail 响应。因此，其本质上就是一个互斥锁服务。</p><p>我们希望 Test-and-Set 具有容错特性，当一个客户端只能与一个 Test-and-Set 服务器通信时，也可以正常工作。例如 C1 可以和 S1 通信，但不能和 S2 通信，C1 也可以正常工作。反之，如果 C1 必须和 S2 通信，而恰好 C1 和 S2 之间的网络出现了故障，这就导致 C1 为了等待 S2 的响应将永远无法继续工作，这就失去了多副本的意义。</p><p>因此为了具备容错特性，我们允许一个客户端只与它能连通的服务器交互。在这种情况下，如果发生了网络分区，例如 C1 只能与 S1 通信，C2 只能与 S2 通信，则会导致脑裂：</p><img src="/2022/07/25/Raft-2/Raft-%E5%9B%BE2.png" class=""><p>C1 发送 Test-and-Set 指令给 S1，S1将自己的数据记录设置为1，并返回 Success 给 C1。同时，C2 发送 Test-and-Set 指令给 S2，S2 将自己的数据记录为1，并返回 Success 给 C2。因此，C1 和 C2 都获得了 Success 响应，C1 和 C2 都会认为自己是 Primary，而不需要与另一个虚拟机进行协调，从而进入错误的场景。</p><p>因此，在这种有两个副本的服务中，我们似乎只有两种选择：要么等待两个服务器响应，那么这个时候就没有容错能力；要么只等待一个服务器响应，那么就会进入错误的场景，而这种错误的场景，通常被称为脑裂。</p><p>在上世纪八十年代，对于脑裂并没有什么好的解决办法。但是，当时又的确有多副本系统的需要，为了解决脑裂问题，有两种技术：</p><ul><li><p>构建不可能出现故障的网络。</p></li><li><p>人工解决问题，当一个服务器出现了故障，让运维人员去检查这台服务器是否真的关机了，还是出现了网络方面的故障。</p></li></ul><h2 id="过半投票"><a href="#过半投票" class="headerlink" title="过半投票"></a>过半投票</h2><p>当网络出现故障，将网络分割成两半，网络的两边独自运行，且不能访问对方，这通常被称为网络分区。而网络分区可能会导致进入上面提到的脑裂场景，从而导致多副本服务出现不一致。</p><p>随着技术的发展，人们发现即使出现分区，也能正确地实现能够自动完成故障切换的系统。在构建能自动恢复，同时又避免脑裂的多副本系统时，关键点在于<strong>过半投票</strong>。</p><p>首先服务器的数量必须是奇数，那么当出现网络分区时，必然只可能最多有一个分区拥有半数以上的服务器。我们可以规定，如果要完成任何操作，必须要凑够半数以上的服务器的投票。这样，在任何情况下只可能有一个分区能够完成操作，这也就避免了脑裂的场景。</p><p>在这种过半投票的思想的支持下，在上世纪九十年代，有两个系统被同时提出：Paxos 和 ViewStamped Replication，这两个系统都使用过半购票的原理来避免脑裂的问题。</p><h2 id="Raft-领导人选举"><a href="#Raft-领导人选举" class="headerlink" title="Raft 领导人选举"></a>Raft 领导人选举</h2><p>Raft 也应用了过半投票的思想来解决脑裂问题。Raft 会通过过半投票选举出一个领导人，然后给予他全部的管理复制日志的责任来实现一致性。</p><p>领导人从客户端接收日志条目，把日志条目复制到其他服务器上，并告诉其他的服务器什么时候可以安全地将日志条目应用到他们的状态机中。拥有一个领导人大大简化了对复制日志的管理。例如，领导人可以决定新的日志条目需要放在日志中的什么位置而不需要和其他服务器商议，并且数据都从领导人流向其他服务器。一个领导人可能会发生故障，或者和其他服务器失去连接，在这种情况下一个新的领导人会被选举出来。</p><p>具体的领导人选举算法，在 Raft 论文中说的非常详细：<a href="https://raft.github.io/raft.pdf">Raft paper</a>（第5节和5.2节）。</p><h2 id="Lab-2A-中遇到的问题"><a href="#Lab-2A-中遇到的问题" class="headerlink" title="Lab 2A 中遇到的问题"></a>Lab 2A 中遇到的问题</h2><p>最后说一说，在实现 6.824 的 LAB 2A 时遇到一个死锁 Bug。</p><p>在 6.824 的 LAB 2A 中，是需要大量使用互斥锁的，这非常容易出错。在我第一次实现完 LAB 2A 并运行测试的时候，报了大量的数据竞争错误，把这个错误改完就花了十几分钟~~。</p><p>之后继续运行测试的时候，又卡在了 “election after network failure” 的测试中，但奇怪的是整个测试并没有报错，只是“卡住了”，我就猜到可能出现了死锁。使用博客 <a href="https://blog.josejg.com/debugging-pretty/">Debugging by Pretty Printing</a> 中的测试框架，得到了如下的日志记录：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs go">S0 starts running                                                                                                                                                         <br>                                                          S1 starts running                                                                                               <br>                                                                                                                  S2 starts running                                       <br>S0 starts election                                                                                                                                                        <br>S0 becomes Candidate                                                                                                                                                      <br>S0 change term from <span class="hljs-number">0</span> to <span class="hljs-number">1</span>                                                                                                                                                <br>S0 votes <span class="hljs-keyword">for</span> S0                                                                                                                                                           <br>                                                          S1 receives VoteRequestRpc from S0                                                                              <br>                                                          S1 becomes Follower                                                                                             <br>                                                          S1 changes term from <span class="hljs-number">1</span> to <span class="hljs-number">1</span>                                                                                     <br>                                                          S1 votes <span class="hljs-keyword">for</span> S0                                                                                                 <br>S0 becomes Leader                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>                                                          S1 receives AppendEntriesRpc from S0                                                                            <br>                                                          S1 reply AppendEntriesRpc from S0: &amp;&#123;Term:<span class="hljs-number">1</span>&#125;                                                                    <br>                                                                                                                  S2 receives AppendEntriesRpc from S0                    <br>                                                                                                                  S2 becomes Follower                                     <br>                                                                                                                  S2 changes term from <span class="hljs-number">1</span> to <span class="hljs-number">1</span>                             <br>                                                                                                                  S2 reply AppendEntriesRpc from S0: &amp;&#123;Term:<span class="hljs-number">1</span>&#125;            <br>S0 sends hearbeat                                                                                                                                                         <br>                                                          S1 receives AppendEntriesRpc from S0                                                                            <br>                                                          S1 reply AppendEntriesRpc from S0: &amp;&#123;Term:<span class="hljs-number">1</span>&#125;                                                                    <br>                                                                                                                  S2 receives AppendEntriesRpc from S0                    <br>                                                                                                                  S2 reply AppendEntriesRpc from S0: &amp;&#123;Term:<span class="hljs-number">1</span>&#125;            <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>                                                                                                                  S2 starts election                                      <br>                                                                                                                  S2 becomes Candidate                                    <br>                                                                                                                  S2 change term from <span class="hljs-number">1</span> to <span class="hljs-number">2</span>                              <br>                                                                                                                  S2 votes <span class="hljs-keyword">for</span> S2                                         <br>                                                          S1 starts election                                                                                              <br>                                                          S1 becomes Candidate                                                                                            <br>                                                          S1 change term from <span class="hljs-number">1</span> to <span class="hljs-number">2</span>                                                                                      <br>                                                          S1 votes <span class="hljs-keyword">for</span> S1                                                                                                 <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>                                                                                                                  S2 receives VoteRequestRpc from S1                      <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>S0 sends hearbeat                                                                                                                                                         <br>                                                          S1 receives VoteRequestRpc from S2                                                                              <br>S0 sends hearbeat   <br>S0 sends hearbeat<br>S0 sends hearbeat<br>S0 sends hearbeat<br>S0 sends hearbeat<br>S0 sends hearbeat                                                                                                                                                                                          <br></code></pre></td></tr></table></figure><p>在第25到28行的记录中，可以看到 S0 发送了四次心跳，但是都没有收到 S1 和 S2 的答复，可以推测出发生了网络分区，这时候 S1 和 S2 无法与 S0 通信。</p><p>之后 S1 和 S2 触发选举超时，发起选举投票，它们首先都为自己投票，因此 S1 和 S2 都不会得到过半投票。按照理论来说，过一会之后又会触发选举超时，S1 或 S2 会再次发起选举投票，但是整个系统卡住了，只有 S0 还在打印消息。</p><p>根据上面的分析，可初步定位是在选举投票的实现中出了问题，之前的实现如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(rf *Raft)</span></span> startElection() &#123;<br>    <span class="hljs-comment">// ...........</span><br>    <span class="hljs-comment">// ...........</span><br>    <span class="hljs-comment">// ...........</span><br><br>    receivedVotes := <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> rf.peers &#123;<br>        <span class="hljs-keyword">if</span> i == rf.me &#123;<br>            <span class="hljs-keyword">continue</span><br>        &#125;<br>        <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(peerId <span class="hljs-type">int</span>)</span></span> &#123;<br>            rf.mu.Lock()<br>            <span class="hljs-keyword">defer</span> rf.mu.Unlock()    <br>            <span class="hljs-comment">// 已经被选举成了领导人，或退化成了跟随者，直接返回</span><br>            <span class="hljs-keyword">if</span> rf.role != CANDIDATE &#123;<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            <span class="hljs-comment">// 选举超时，当前节点发起新一轮选举，因此任期号改变了，直接返回</span><br>            <span class="hljs-keyword">if</span> electionStartTerm != rf.currentTerm &#123;<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            args := &amp;RequestVoteArgs&#123;<br>                Term:        electionStartTerm,<br>                CandidateId: rf.me,<br>            &#125;<br>            reply := &amp;RequestVoteReply&#123;&#125;<br>            <span class="hljs-keyword">if</span> !rf.sendRequestVote(peerId, args, reply) &#123;<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            <span class="hljs-comment">// ...........</span><br>            <span class="hljs-comment">// ...........</span><br>            <span class="hljs-comment">// ...........</span><br>        &#125;(i)<br>    &#125;<br><br>    <span class="hljs-comment">// 重置选举超时计时器</span><br>    rf.electionStart = time.Now()<br>    rf.electionTimeout = rf.randomElectionTimeout()<br>    <span class="hljs-keyword">go</span> rf.ticker()<br>&#125;    <br></code></pre></td></tr></table></figure><p>在循环中，对每个节点我们都会开一个 Go 程去“拉票”，在 Go 程最开头的时候我们申请了锁，然后使用 <code>defer rf.mu.Unlock()</code> 在 Go 程返回的时候释放锁，而这恰恰就导致了死锁。</p><p>在这个实现中，S1 和 S2 在发起投票 RPC 的时候是持有自己的锁的（假设 S1 的锁为锁A，S2 的锁为锁B）。而 S1 和 S2 在收到投票 RPC 后需要读取自己的一些状态，因此 S1 会申请锁A，S2 会申请锁B，但是此时锁A和锁B已经被 S1 和 S2 持有了，这样整个系统就卡住了，无法继续执行下去，因此 S1 和 S2 自然就不可能再次发起选举，很显然这就是一个死锁Bug。</p><p>解决方法也很简单，只要 S1 和 S2 在发起投票 RPC 之前是否释放掉持有的锁即可：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(rf *Raft)</span></span> startElection() &#123;<br>    <span class="hljs-comment">// ...........</span><br>    <span class="hljs-comment">// ...........</span><br>    <span class="hljs-comment">// ...........</span><br><br>    receivedVotes := <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> rf.peers &#123;<br>        <span class="hljs-keyword">if</span> i == rf.me &#123;<br>            <span class="hljs-keyword">continue</span><br>        &#125;<br>        <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(peerId <span class="hljs-type">int</span>)</span></span> &#123;<br>            rf.mu.Lock()<br>            <span class="hljs-comment">// 已经被选举成了领导人，或退化成了跟随者，直接返回</span><br>            <span class="hljs-keyword">if</span> rf.role != CANDIDATE &#123;<br>                rf.mu.Unlock()<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            <span class="hljs-comment">// 选举超时，当前节点发起新一轮选举，因此任期号改变了，直接返回</span><br>            <span class="hljs-keyword">if</span> electionStartTerm != rf.currentTerm &#123;<br>                rf.mu.Unlock()<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            rf.mu.Unlock()    <span class="hljs-comment">// 在投票前释放</span><br>            args := &amp;RequestVoteArgs&#123;<br>                Term:        electionStartTerm,<br>                CandidateId: rf.me,<br>            &#125;<br>            reply := &amp;RequestVoteReply&#123;&#125;<br>            <span class="hljs-keyword">if</span> !rf.sendRequestVote(peerId, args, reply) &#123;<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            <span class="hljs-comment">// ...........</span><br>            <span class="hljs-comment">// ...........</span><br>            <span class="hljs-comment">// ...........</span><br>        &#125;(i)<br>    &#125;<br><br>    <span class="hljs-comment">// 重置选举超时计时器</span><br>    rf.electionStart = time.Now()<br>    rf.electionTimeout = rf.randomElectionTimeout()<br>    <span class="hljs-keyword">go</span> rf.ticker()<br>&#125;<br></code></pre></td></tr></table></figure><p>再次运行 Lab 2A 的测试，就能完美通过了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">Test (<span class="hljs-number">2</span>A): initial election ...<br>  ... Passed --   <span class="hljs-number">3.0</span>  <span class="hljs-number">3</span>  <span class="hljs-number">110</span>   <span class="hljs-number">11914</span>    <span class="hljs-number">0</span><br>Test (<span class="hljs-number">2</span>A): election after network failure ...<br>  ... Passed --   <span class="hljs-number">4.5</span>  <span class="hljs-number">3</span>  <span class="hljs-number">130</span>    <span class="hljs-number">9694</span>    <span class="hljs-number">0</span><br>Test (<span class="hljs-number">2</span>A): multiple elections ...<br>  ... Passed --   <span class="hljs-number">5.6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">852</span>   <span class="hljs-number">69742</span>    <span class="hljs-number">0</span><br>PASS<br>ok      <span class="hljs-number">6.824</span>/raft      <span class="hljs-number">14.129</span>s<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://pdos.csail.mit.edu/6.824/">MIT 6.824</a></p></li><li><p><a href="https://raft.github.io/raft.pdf">Raft paper</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>distributed system</category>
      
    </categories>
    
    
    <tags>
      
      <tag>distributed</tag>
      
      <tag>consistency</tag>
      
      <tag>paper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Raft（一）：一致性算法</title>
    <link href="/2022/07/24/Raft-1/"/>
    <url>/2022/07/24/Raft-1/</url>
    
    <content type="html"><![CDATA[<h2 id="为什么我们需要分布式系统？"><a href="#为什么我们需要分布式系统？" class="headerlink" title="为什么我们需要分布式系统？"></a>为什么我们需要分布式系统？</h2><p>分布式系统是由一组通过网络进行通信、为了完成共同的任务而协调工作的计算机节点组成的系统。</p><p>事实上分布式系统的复杂程度通常远远超过单机系统，在单机系统中，我们可能会遇到磁盘故障、并发死锁、系统崩溃等问题，而在分布式系统中，除了这些问题外，我们还可能遇到网络延迟、分区、系统状态不一致等千奇百怪的问题。</p><p>但是，分布式系统同样具有一些好处来吸引人们使用它：</p><ul><li><p>分布式系统中存在大量的计算机并行运行，可以获取<strong>更高的性能</strong>。比如大量的计算的CPU、内存、磁盘可以并行运行。</p></li><li><p>分布式系统可以提供<strong>容错</strong>。比如两台计算机运行完全相同的任务，其中一台发生故障，可以切换到另一台。</p></li><li><p>由于物理原因，有些系统天然在<strong>空间上是分布式</strong>的。例如银行转账，假设银行在相距很远的地方分别由两台服务器，如果要在这两台服务器之前进行交易转账，那么就需要一种在两者之间进行协调的方法。</p></li><li><p>实现一些<strong>安全</strong>目标。比如有一些代码不被信任，但是我们需要和它交互，这些代码不会立即表现出恶意或出现bug。我们可以把代码分散在多处运行，这样不被信任的代码在一台计算机运行，我们的代码在自己的计算机上运行，然后再通过一些特定的网络协议通信。这样就把系统分成了多个计算机，可以限制恶意代码的出错域。</p></li></ul><h2 id="通过复制实现容错"><a href="#通过复制实现容错" class="headerlink" title="通过复制实现容错"></a>通过复制实现容错</h2><p>上面提到，人们使用分布式系统的其中一个原因就是容错，而复制是实现容错的一个重要的工具。通过复制，可以让分布式系统中的节点运行相同副本，从在可以在一个节点出现故障的情况下，其他的节点可以继续提供服务。</p><p>有两种方法可以实现复制，一种是状态转移（State Transfer），另一种是复制状态机（Replicated State Machine）。</p><p>假设我们有一个服务的两个副本，一个是 Primary，另一个是 Backup。我们需要让它们保持同步，在实际上互为副本，这样一旦 Primary 出现故障，因为 Backup 的状态与 Primary 一致，就可以接管整个服务。</p><p>状态转移背后的思想是，Primary 将自己完整状态，比如说内存中的内容，拷贝并发送给Backup。Backup 会保存收到的最近一次状态，所以 Backup 会有所有的数据。当 Primary 故障了，Backup 就可以从它所保存的最新状态开始运行。所以，状态转移就是发送 Primary的状态。</p><p>复制状态机基于一个事实：我们想要复制的大部分服务都有一些确定的内部操作，而外部输入是不确定的。如果一台计算机没有外部输入，它只是一个接一个的执行指令，这样运行着相同服务的多个计算机的状态就会保持一致。只有当存在外部输入时，才可能会破坏一致性。例如，一台服务器在某个时间收到了一个网络数据包，导致服务器做一些不同的事情。</p><p>所以，复制状态机不会在不同的副本之间发送状态，相应的，它只会从 Primary 将这些外部输入发送给 Backup。假设有多台计算机，如果它们从相同的状态启动，并且以相同的顺序执行相同的外部输入，那么它们会一直互为副本，保持一致。</p><p>因此，状态转移传输的是可能是内存状态，而复制状态机会将来自客户端的操作或者其他外部输入，从 Primary 传输到 Backup。</p><h2 id="Raft-是什么？"><a href="#Raft-是什么？" class="headerlink" title="Raft 是什么？"></a>Raft 是什么？</h2><p>上面我们提到复制状态机是复制的一种实现方法，而复制状态机又通常是基于复制日志实现的，如图所示：</p><img src="/2022/07/24/Raft-1/raft-%E5%9B%BE1.png" class=""><p>每个服务器存储一个包含一系列指令的日志，并且按照日志的顺序执行指令。如果每个日志都按照相同的顺序包含相同的指令，那么每个服务器都将执行相同的指令序列，最终所有的服务其都将保持一致的状态。反过来说，如果服务器上的日志出现了不一致，比如某些服务器上缺失了一条指令，或者指令顺序与其他的服务器不一样，那么每个服务器将会执行不一样的指令序列，导致出现状态不同步的问题。</p><p>而 Raft 就是一种一致性算法，其任务是保证复制日志的一致性。服务器上的一致性模块接收客户端发送的指令然后添加到自己的日志中。它和其他服务器上的一致性模块进行通信来保证每一个服务器上的日志最终都以相同的顺序包含相同的请求，即使有些服务器发生故障。一旦指令被正确复制，每一个服务器的状态机按照日志顺序处理他们，然后输出结果被返回给客户端。因此，服务器集群看起来形成了一个高可靠的状态机。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://pdos.csail.mit.edu/6.824/">MIT 6.824</a></p></li><li><p><a href="https://raft.github.io/raft.pdf">Raft paper</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>distributed system</category>
      
    </categories>
    
    
    <tags>
      
      <tag>distributed</tag>
      
      <tag>consistency</tag>
      
      <tag>paper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lock-free hashtable</title>
    <link href="/2022/05/22/lock-free-hashtable/"/>
    <url>/2022/05/22/lock-free-hashtable/</url>
    
    <content type="html"><![CDATA[<h2 id="lock-free-linked-list"><a href="#lock-free-linked-list" class="headerlink" title="lock-free linked list"></a>lock-free linked list</h2><p>施工中。。。。</p><h2 id="lock-free-hashtable"><a href="#lock-free-hashtable" class="headerlink" title="lock-free hashtable"></a>lock-free hashtable</h2><p>施工中。。。。</p>]]></content>
    
    
    <categories>
      
      <category>concurrent</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rust</tag>
      
      <tag>concurrent</tag>
      
      <tag>parallel</tag>
      
      <tag>lock-free</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>drop check</title>
    <link href="/2022/05/22/drop-check/"/>
    <url>/2022/05/22/drop-check/</url>
    
    <content type="html"><![CDATA[<h2 id="drop-check-x2F-may-dangle"><a href="#drop-check-x2F-may-dangle" class="headerlink" title="drop check&#x2F;may_dangle"></a>drop check&#x2F;may_dangle</h2><p>Drop checker会检查一个类型是否能够安全地实现Drop Tarit。<strong>如果一个能够安全实现Drop的类型，那么它的泛型参数的生命周期必须严格长于它本身</strong>。一个违反Drop check的例子：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#![allow(unused)]</span><br><span class="hljs-keyword">use</span> std::alloc::&#123;GlobalAlloc, Layout, System&#125;;<br><span class="hljs-keyword">use</span> std::fmt;<br><span class="hljs-keyword">use</span> std::mem;<br><span class="hljs-keyword">use</span> std::ptr;<br><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> (y, x);<br>    x = String::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    y = MyBox::<span class="hljs-title function_ invoke__">new</span>(&amp;x);<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MyBox</span>&lt;T&gt; &#123;<br>    v: *<span class="hljs-keyword">mut</span> T,<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T&gt; MyBox&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(t: T) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = System.<span class="hljs-title function_ invoke__">alloc</span>(Layout::array::&lt;T&gt;(<span class="hljs-number">1</span>).<span class="hljs-title function_ invoke__">unwrap</span>());<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = p <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> T;<br>            ptr::<span class="hljs-title function_ invoke__">write</span>(p, t);<br>            MyBox &#123;<br>                v: p,<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T&gt; <span class="hljs-built_in">Drop</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">MyBox</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">drop</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            ptr::<span class="hljs-title function_ invoke__">drop_in_place</span>(<span class="hljs-keyword">self</span>.v);<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = <span class="hljs-keyword">self</span>.v <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> _;<br>            System.<span class="hljs-title function_ invoke__">dealloc</span>(p, Layout::array::&lt;T&gt;(<span class="hljs-number">1</span>).<span class="hljs-title function_ invoke__">unwrap</span>());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译将会发生报错：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust">error[E0597]: `x` does not live long enough<br>  -<span class="hljs-punctuation">-&gt;</span> src/main.rs:<span class="hljs-number">13</span>:<span class="hljs-number">20</span><br>   |<br><span class="hljs-number">13</span> |     y = MyBox::<span class="hljs-title function_ invoke__">new</span>(&amp;x);<br>   |                    ^^ borrowed value does not live long enough<br><span class="hljs-number">14</span> | &#125;<br>   | -<br>   | |<br>   | `x` dropped here <span class="hljs-keyword">while</span> still borrowed<br>   | borrow might be used here, when `y` is dropped and runs the `<span class="hljs-built_in">Drop</span>` code <span class="hljs-keyword">for</span> <span class="hljs-title class_">type</span> `MyBox`<br>   |<br>   = note: values <span class="hljs-keyword">in</span> a scope are dropped <span class="hljs-keyword">in</span> the opposite order they are defined<br></code></pre></td></tr></table></figure><p>从表面上看，<code>x</code>与<code>y</code>的生命周期是一样长的。但是<code>x</code>比<code>y</code>先定义，因此变量<code>x</code>会首先发生析构，因此<code>x</code>的生命周期并不严格长于<code>y</code>的生命周期，这显然不满足Drop checker的条件，因此发生报错：编译器认为在调用<code>y</code>的析构函数时，可能会使用<code>x</code>的引用，这会导致UB，因此编译器拒绝这段代码。</p><p>但是，实际上我们并没有在<code>y</code>的析构函数使用<code>x</code>的引用，不会出现UB行为。为了解决这个问题，可以开启特性<code>#![feature(dropck_eyepatch)]</code>，并使用属性<code>#[may_dangle]</code>注解<code>T</code>，明确表示不会在<code>y</code>的析构函数中使用<code>x</code>的引用：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#![allow(unused)]</span><br><span class="hljs-meta">#![feature(dropck_eyepatch)]</span><br><span class="hljs-keyword">use</span> std::alloc::&#123;GlobalAlloc, Layout, System&#125;;<br><span class="hljs-keyword">use</span> std::fmt;<br><span class="hljs-keyword">use</span> std::mem;<br><span class="hljs-keyword">use</span> std::ptr;<br><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> (y, x);<br>    x = String::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    y = MyBox::<span class="hljs-title function_ invoke__">new</span>(&amp;x);<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MyBox</span>&lt;T&gt; &#123;<br>    v: *<span class="hljs-keyword">mut</span> T,<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T&gt; MyBox&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(t: T) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = System.<span class="hljs-title function_ invoke__">alloc</span>(Layout::array::&lt;T&gt;(<span class="hljs-number">1</span>).<span class="hljs-title function_ invoke__">unwrap</span>());<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = p <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> T;<br>            ptr::<span class="hljs-title function_ invoke__">write</span>(p, t);<br>            MyBox &#123;<br>                v: p,<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">impl</span>&lt;<span class="hljs-meta">#[may_dangle]</span> T&gt; <span class="hljs-built_in">Drop</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">MyBox</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">drop</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            ptr::<span class="hljs-title function_ invoke__">drop_in_place</span>(<span class="hljs-keyword">self</span>.v);<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = <span class="hljs-keyword">self</span>.v <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> _;<br>            System.<span class="hljs-title function_ invoke__">dealloc</span>(p, Layout::array::&lt;T&gt;(<span class="hljs-number">1</span>).<span class="hljs-title function_ invoke__">unwrap</span>());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译将会顺利通过：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust">Compiling playground v0.<span class="hljs-number">0.1</span> (/playground)<br>    Finished dev [unoptimized + debuginfo] <span class="hljs-title function_ invoke__">target</span>(s) <span class="hljs-keyword">in</span> <span class="hljs-number">7.20</span>s<br>     Running `target/debug/playground`<br></code></pre></td></tr></table></figure><h2 id="phantomData"><a href="#phantomData" class="headerlink" title="phantomData"></a>phantomData</h2><p>使用<code>may_dangle</code>后编译器将不会进行Drop check检查，但是在下面的代码中将会出现UB：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#![allow(unused)]</span><br><span class="hljs-meta">#![feature(dropck_eyepatch)]</span><br><span class="hljs-keyword">use</span> std::alloc::&#123;GlobalAlloc, Layout, System&#125;;<br><span class="hljs-keyword">use</span> std::fmt;<br><span class="hljs-keyword">use</span> std::mem;<br><span class="hljs-keyword">use</span> std::ptr;<br><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> (y, x);<br>    x = Hello::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">13</span>);<br>    y = MyBox::<span class="hljs-title function_ invoke__">new</span>(Hello::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;y&quot;</span>, &amp;x));<br>&#125;<br><br><span class="hljs-meta">#[derive(Copy, Clone, Debug)]</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">State</span> &#123;<br>    Invalid,<br>    Valid,<br>&#125;<br><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Hello</span>&lt;T: fmt::<span class="hljs-built_in">Debug</span>&gt;(&amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span>, T, State);<br><br><span class="hljs-keyword">impl</span>&lt;T: fmt::<span class="hljs-built_in">Debug</span>&gt; Hello&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(name: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span>, t: T) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-title function_ invoke__">Hello</span>(name, t, State::Valid)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T: fmt::<span class="hljs-built_in">Debug</span>&gt; <span class="hljs-built_in">Drop</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Hello</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">drop</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Drop hello(&#123;&#125;, &#123;:?&#125;, &#123;:?&#125;)&quot;</span>, <span class="hljs-keyword">self</span>.<span class="hljs-number">0</span>, <span class="hljs-keyword">self</span>.<span class="hljs-number">1</span>, <span class="hljs-keyword">self</span>.<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">self</span>.<span class="hljs-number">2</span> = State::Invalid;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MyBox</span>&lt;T&gt; &#123;<br>    v: *<span class="hljs-keyword">mut</span> T,<br>    <span class="hljs-comment">// _pd: PhantomData&lt;T&gt;</span><br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T&gt; MyBox&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(t: T) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = System.<span class="hljs-title function_ invoke__">alloc</span>(Layout::array::&lt;T&gt;(<span class="hljs-number">1</span>).<span class="hljs-title function_ invoke__">unwrap</span>());<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = p <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> T;<br>            ptr::<span class="hljs-title function_ invoke__">write</span>(p, t);<br>            MyBox &#123;<br>                v: p,<br>                <span class="hljs-comment">// _pd: PhantomData</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">impl</span>&lt;<span class="hljs-meta">#[may_dangle]</span> T&gt; <span class="hljs-built_in">Drop</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">MyBox</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">drop</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            ptr::<span class="hljs-title function_ invoke__">drop_in_place</span>(<span class="hljs-keyword">self</span>.v);<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = <span class="hljs-keyword">self</span>.v <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> _;<br>            System.<span class="hljs-title function_ invoke__">dealloc</span>(p, Layout::array::&lt;T&gt;(<span class="hljs-number">1</span>).<span class="hljs-title function_ invoke__">unwrap</span>());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译结果：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-built_in">Drop</span> <span class="hljs-title function_ invoke__">hello</span>(x, <span class="hljs-number">13</span>, Valid)<br><span class="hljs-built_in">Drop</span> <span class="hljs-title function_ invoke__">hello</span>(y, <span class="hljs-title function_ invoke__">Hello</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">13</span>, Invalid), Valid)<br></code></pre></td></tr></table></figure><p>使用MIRI检查是否存在UB：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs rust">error: Undefined Behavior: pointer to alloc999 was dereferenced after this allocation got freed<br>    -<span class="hljs-punctuation">-&gt;</span> /playground/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/<span class="hljs-keyword">mod</span>.rs:<span class="hljs-number">2116</span>:<span class="hljs-number">1</span><br>     |<br><span class="hljs-number">2116</span> | fmt_refs! &#123; <span class="hljs-built_in">Debug</span>, Display, Octal, Binary, LowerHex, UpperHex, LowerExp, UpperExp &#125;<br>     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pointer to alloc999 was dereferenced after this allocation got freed<br>     |<br>     = help: this indicates a bug <span class="hljs-keyword">in</span> the program: it performed an invalid operation, and caused Undefined Behavior<br>     = help: see https:<span class="hljs-comment">//doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information</span><br><br>     = note: inside `&lt;&amp;Hello&lt;<span class="hljs-type">i32</span>&gt; <span class="hljs-keyword">as</span> std::fmt::<span class="hljs-built_in">Debug</span>&gt;::fmt` at /playground/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/<span class="hljs-keyword">mod</span>.rs:<span class="hljs-number">2106</span>:<span class="hljs-number">71</span><br>     = note: inside `std::fmt::write` at /playground/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/<span class="hljs-keyword">mod</span>.rs:<span class="hljs-number">1168</span>:<span class="hljs-number">17</span><br>     = note: inside `&lt;std::io::StdoutLock <span class="hljs-keyword">as</span> std::io::Write&gt;::write_fmt` at /playground/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/io/<span class="hljs-keyword">mod</span>.rs:<span class="hljs-number">1653</span>:<span class="hljs-number">15</span><br>     = note: inside `&lt;&amp;std::io::Stdout <span class="hljs-keyword">as</span> std::io::Write&gt;::write_fmt` at /playground/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/io/stdio.rs:<span class="hljs-number">844</span>:<span class="hljs-number">9</span><br>     = note: inside `&lt;std::io::Stdout <span class="hljs-keyword">as</span> std::io::Write&gt;::write_fmt` at /playground/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/io/stdio.rs:<span class="hljs-number">818</span>:<span class="hljs-number">9</span><br>     = note: inside `std::io::stdio::print_to::&lt;std::io::Stdout&gt;` at /playground/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/io/stdio.rs:<span class="hljs-number">1186</span>:<span class="hljs-number">21</span><br>     = note: inside `std::io::_print` at /playground/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/io/stdio.rs:<span class="hljs-number">1199</span>:<span class="hljs-number">5</span><br>note: inside `&lt;Hello&lt;&amp;Hello&lt;<span class="hljs-type">i32</span>&gt;&gt; <span class="hljs-keyword">as</span> std::ops::<span class="hljs-built_in">Drop</span>&gt;::drop` at /playground/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:<span class="hljs-number">99</span>:<span class="hljs-number">9</span><br>    -<span class="hljs-punctuation">-&gt;</span> src/main.rs:<span class="hljs-number">32</span>:<span class="hljs-number">9</span><br>     |<br><span class="hljs-number">32</span>   |         <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Drop hello(&#123;&#125;, &#123;:?&#125;, &#123;:?&#125;)&quot;</span>, <span class="hljs-keyword">self</span>.<span class="hljs-number">0</span>, <span class="hljs-keyword">self</span>.<span class="hljs-number">1</span>, <span class="hljs-keyword">self</span>.<span class="hljs-number">2</span>);<br>     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br>     = note: inside `std::ptr::drop_in_place::&lt;Hello&lt;&amp;Hello&lt;<span class="hljs-type">i32</span>&gt;&gt;&gt; - <span class="hljs-title function_ invoke__">shim</span>(<span class="hljs-title function_ invoke__">Some</span>(Hello&lt;&amp;Hello&lt;<span class="hljs-type">i32</span>&gt;&gt;))` at /playground/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ptr/<span class="hljs-keyword">mod</span>.rs:<span class="hljs-number">188</span>:<span class="hljs-number">1</span><br>note: inside `&lt;MyBox&lt;Hello&lt;&amp;Hello&lt;<span class="hljs-type">i32</span>&gt;&gt;&gt; <span class="hljs-keyword">as</span> std::ops::<span class="hljs-built_in">Drop</span>&gt;::drop` at src/main.rs:<span class="hljs-number">59</span>:<span class="hljs-number">13</span><br>    -<span class="hljs-punctuation">-&gt;</span> src/main.rs:<span class="hljs-number">59</span>:<span class="hljs-number">13</span><br>     |<br><span class="hljs-number">59</span>   |             ptr::<span class="hljs-title function_ invoke__">drop_in_place</span>(<span class="hljs-keyword">self</span>.v);<br>     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^<br>     = note: inside `std::ptr::drop_in_place::&lt;MyBox&lt;Hello&lt;&amp;Hello&lt;<span class="hljs-type">i32</span>&gt;&gt;&gt;&gt; - <span class="hljs-title function_ invoke__">shim</span>(<span class="hljs-title function_ invoke__">Some</span>(MyBox&lt;Hello&lt;&amp;Hello&lt;<span class="hljs-type">i32</span>&gt;&gt;&gt;))` at /playground/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ptr/<span class="hljs-keyword">mod</span>.rs:<span class="hljs-number">188</span>:<span class="hljs-number">1</span><br>note: inside `main` at src/main.rs:<span class="hljs-number">13</span>:<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>之所以会出现上述结果，是因为在<code>y</code>的析构函数中，我们调用了<code>T: Hello::new(&quot;y&quot;, &amp;x)</code>的析构函数，在<code>T</code>的析构函数中会打印<code>&amp;x</code>的值，而<code>x</code>在此时已经被析构了，它的值变成了<code>Hello(x,13,Invalid)</code>。因此<code>y</code>中的<code>&amp;x</code>变成了悬垂引用，并且在<code>T</code>的析构函数中使用了<code>&amp;x</code>，这显然是一种UB。</p><p>为了防止UB，我们可以在<code>MyBox</code>中添加<code>PhantomData</code>字段，表示<code>MyBox</code>拥有<code>T</code>，会在<code>MyBox</code>的析构函数中析构<code>T</code>（当然<code>MyBox</code>并不拥有<code>T</code>，也不一定会析构<code>T</code>），告诉编译器对<code>MyBox</code>进行Drop check检查。</p><p>修改上述代码，添加<code>PhantomData</code>字段：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#![allow(unused)]</span><br><span class="hljs-meta">#![feature(dropck_eyepatch)]</span><br><span class="hljs-keyword">use</span> std::alloc::&#123;GlobalAlloc, Layout, System&#125;;<br><span class="hljs-keyword">use</span> std::fmt;<br><span class="hljs-keyword">use</span> std::mem;<br><span class="hljs-keyword">use</span> std::ptr;<br><span class="hljs-keyword">use</span> std::marker::PhantomData;<br><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> (y, x);<br>    x = Hello::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">13</span>);<br>    y = MyBox::<span class="hljs-title function_ invoke__">new</span>(Hello::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;y&quot;</span>, &amp;x));<br>&#125;<br><br><span class="hljs-meta">#[derive(Copy, Clone, Debug)]</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">State</span> &#123;<br>    Invalid,<br>    Valid,<br>&#125;<br><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Hello</span>&lt;T: fmt::<span class="hljs-built_in">Debug</span>&gt;(&amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span>, T, State);<br><br><span class="hljs-keyword">impl</span>&lt;T: fmt::<span class="hljs-built_in">Debug</span>&gt; Hello&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(name: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span>, t: T) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-title function_ invoke__">Hello</span>(name, t, State::Valid)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T: fmt::<span class="hljs-built_in">Debug</span>&gt; <span class="hljs-built_in">Drop</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Hello</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">drop</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Drop hello(&#123;&#125;, &#123;:?&#125;, &#123;:?&#125;)&quot;</span>, <span class="hljs-keyword">self</span>.<span class="hljs-number">0</span>, <span class="hljs-keyword">self</span>.<span class="hljs-number">1</span>, <span class="hljs-keyword">self</span>.<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">self</span>.<span class="hljs-number">2</span> = State::Invalid;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MyBox</span>&lt;T&gt; &#123;<br>    v: *<span class="hljs-keyword">mut</span> T,<br>    _pd: PhantomData&lt;T&gt;<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T&gt; MyBox&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(t: T) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = System.<span class="hljs-title function_ invoke__">alloc</span>(Layout::array::&lt;T&gt;(<span class="hljs-number">1</span>).<span class="hljs-title function_ invoke__">unwrap</span>());<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = p <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> T;<br>            ptr::<span class="hljs-title function_ invoke__">write</span>(p, t);<br>            MyBox &#123;<br>                v: p,<br>                _pd: PhantomData<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">impl</span>&lt;<span class="hljs-meta">#[may_dangle]</span> T&gt; <span class="hljs-built_in">Drop</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">MyBox</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">drop</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            ptr::<span class="hljs-title function_ invoke__">drop_in_place</span>(<span class="hljs-keyword">self</span>.v);<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = <span class="hljs-keyword">self</span>.v <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> _;<br>            System.<span class="hljs-title function_ invoke__">dealloc</span>(p, Layout::array::&lt;T&gt;(<span class="hljs-number">1</span>).<span class="hljs-title function_ invoke__">unwrap</span>());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译将会报错：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust">error[E0597]: `x` does not live long enough<br>  -<span class="hljs-punctuation">-&gt;</span> src/main.rs:<span class="hljs-number">13</span>:<span class="hljs-number">36</span><br>   |<br><span class="hljs-number">13</span> |     y = MyBox::<span class="hljs-title function_ invoke__">new</span>(Hello::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;y&quot;</span>, &amp;x));<br>   |                                    ^^ borrowed value does not live long enough<br><span class="hljs-number">14</span> | &#125;<br>   | -<br>   | |<br>   | `x` dropped here <span class="hljs-keyword">while</span> still borrowed<br>   | borrow might be used here, when `y` is dropped and runs the `<span class="hljs-built_in">Drop</span>` code <span class="hljs-keyword">for</span> <span class="hljs-title class_">type</span> `MyBox`<br>   |<br>   = note: values <span class="hljs-keyword">in</span> a scope are dropped <span class="hljs-keyword">in</span> the opposite order they are defined<br></code></pre></td></tr></table></figure><p>这表明Drop checker起了作用，有效防止出现UB。</p><p>但是，这似乎与最初版的代码的编译是一样的，那要<code>PhantomData</code>和<code>may_dangle</code>有什么用？答案当然是有用的，如果<code>MyBox&lt;T&gt;</code>中的<code>T</code>没有实现Drop trait，那么上述代码将会编译通过。</p><p>删除<code>Hello</code>的析构函数：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#![allow(unused)]</span><br><span class="hljs-meta">#![feature(dropck_eyepatch)]</span><br><span class="hljs-keyword">use</span> std::alloc::&#123;GlobalAlloc, Layout, System&#125;;<br><span class="hljs-keyword">use</span> std::fmt;<br><span class="hljs-keyword">use</span> std::mem;<br><span class="hljs-keyword">use</span> std::ptr;<br><span class="hljs-keyword">use</span> std::marker::PhantomData;<br><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> (y, x);<br>    x = Hello::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">13</span>);<br>    y = MyBox::<span class="hljs-title function_ invoke__">new</span>(Hello::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;y&quot;</span>, &amp;x));<br>&#125;<br><br><span class="hljs-meta">#[derive(Copy, Clone, Debug)]</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">State</span> &#123;<br>    Invalid,<br>    Valid,<br>&#125;<br><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Hello</span>&lt;T: fmt::<span class="hljs-built_in">Debug</span>&gt;(&amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span>, T, State);<br><br><span class="hljs-keyword">impl</span>&lt;T: fmt::<span class="hljs-built_in">Debug</span>&gt; Hello&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(name: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span>, t: T) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-title function_ invoke__">Hello</span>(name, t, State::Valid)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MyBox</span>&lt;T&gt; &#123;<br>    v: *<span class="hljs-keyword">mut</span> T,<br>    _pd: PhantomData&lt;T&gt;<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T&gt; MyBox&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(t: T) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = System.<span class="hljs-title function_ invoke__">alloc</span>(Layout::array::&lt;T&gt;(<span class="hljs-number">1</span>).<span class="hljs-title function_ invoke__">unwrap</span>());<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = p <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> T;<br>            ptr::<span class="hljs-title function_ invoke__">write</span>(p, t);<br>            MyBox &#123;<br>                v: p,<br>                _pd: PhantomData<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">impl</span>&lt;<span class="hljs-meta">#[may_dangle]</span> T&gt; <span class="hljs-built_in">Drop</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">MyBox</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">drop</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            ptr::<span class="hljs-title function_ invoke__">drop_in_place</span>(<span class="hljs-keyword">self</span>.v);<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = <span class="hljs-keyword">self</span>.v <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> _;<br>            System.<span class="hljs-title function_ invoke__">dealloc</span>(p, Layout::array::&lt;T&gt;(<span class="hljs-number">1</span>).<span class="hljs-title function_ invoke__">unwrap</span>());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译将会通过：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust">Compiling playground v0.<span class="hljs-number">0.1</span> (/playground)<br>   Finished dev [unoptimized + debuginfo] <span class="hljs-title function_ invoke__">target</span>(s) <span class="hljs-keyword">in</span> <span class="hljs-number">1.53</span>s<br>    Running `target/debug/playground`<br></code></pre></td></tr></table></figure><p>这是因为，如果<code>MyBox&lt;T&gt;</code>中的<code>T</code>没有实现<code>Drop Trait</code>，就算<code>T</code>中存在悬垂引用，也不可能在<code>MyBox</code>的析构函数中通过<code>T</code>的析构函数访问这个悬垂引用，因此不会出现UB，</p><p>如果不使用<code>may_dangle</code>和<code>PhantomData</code>，那么即使<code>T</code>没有实现Drop trait，代码也不会通过编译，即编译器会拒绝掉正确的代码，这显然不是我们所期望的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综上所述，<code>may_dangle</code>和<code>PhantomData</code>结合使用将会有如下效果：</p><ul><li>如果<code>MyBox&lt;T&gt;</code>中的<code>T</code>实现了Drop Trait，那么Drop Checker会要求<code>T</code>的生命周期严格长于<code>MyBox</code>；</li><li>如果<code>MyBox&lt;T&gt;</code>中的<code>T</code>没有实现Drop Trait，那么Drop Checker不会会要求<code>T</code>的生命周期严格长于<code>MyBox</code>。</li></ul><p>如果没有使用<code>may_dangle</code>和<code>PhantomData</code>，那么无论<code>T</code>有没有实现Drop Trait，Drop Checker都会要求<code>T</code>的生命周期严格长于<code>MyBox</code>。</p><p>参考：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/383004091">https://zhuanlan.zhihu.com/p/383004091</a></li><li><a href="https://stackoverflow.com/questions/42708462/why-is-it-useful-to-use-phantomdata-to-inform-the-compiler-that-a-struct-owns-a">https://stackoverflow.com/questions/42708462/why-is-it-useful-to-use-phantomdata-to-inform-the-compiler-that-a-struct-owns-a</a></li><li>来自群友的答疑解惑😀</li></ul>]]></content>
    
    
    <categories>
      
      <category>rust</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rust</tag>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/22/hello-world/"/>
    <url>/2022/05/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
